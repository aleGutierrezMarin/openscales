<?xml version="1.0" encoding="utf-8"?>
<!--- The style of the french regions depend on filters parameterized by the geometry of the features.
The legend is automatically generated from the style.
Click on a region to see its attributes in the information panel.
Use the top-right button to switch the style of the rendering. -->
<s:VGroup xmlns="http://openscales.org" xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" width="100%" height="100%" creationComplete="initMap()" xmlns:components="components.*">
	
	<Map id="fxMap" width="100%" height="100%" resolution="0.087890625" center="4.84479575848897,45.7531798723947" projection="EPSG:900913">

		<Bing key="Ar3-LKk-acyISMevsF2bqH70h21mzr_FN9AhHfi7pS26F5hMH1DmpI7PBK1VCLBk" imagerySet="Aerial" />

		<WheelHandler/>

		<Spinner x="{width / 2}" y="{height / 2}"/>

		<WFS id="ignGeoplaFrance" name="IGN - Geopla (France)" url="http://openscales.org/geoserver/wfs"
				typename="pg:simplif_france" projection="EPSG:2154"
				version="1.0.0" style="{this.createBitmapStyle()}"
				maxExtent="-142057.542842283,6038798.675807986,1512391.727425894,7306294.234914808,EPSG:2154"/>

		<WFS id="ignGeoplaRegion" name="IGN - Geopla (Region)"
				url="http://openscales.org/geoserver/wfs" typename="pg:simplif_dept"
				projection="EPSG:2154" version="1.0.0" style="{this.createBitmapStyle()}"
				maxExtent="-142057.542842283,6038798.675807986,1512391.727425894,7306294.234914808,EPSG:2154"/>

		<SelectFeaturesHandler id="selectFeatureHandler" active="true"/>
				
		<PanZoom id="panZoom" x="10" y="10" />
		
		<s:Panel title="Legend" id="legends" bottom="60" left="5" >
			<s:layout>
				<s:VerticalLayout paddingLeft="5" paddingRight="5"
								  paddingTop="5" paddingBottom="5"/>
			</s:layout>
		</s:Panel>
		
		<s:Panel title="featureInfos" bottom="5" right="5">
			<FeatureInfo id="featureInfoComponent"
							creationComplete="(selectFeatureHandler.handler as SelectFeaturesHandler).onSelectedFeature = featureInfoComponent.showInfo"/>
		</s:Panel>
		
		<DataOriginatorsDisplay x="10" y="{height-90}" />
		
		<s:Button id="switchStyleButton" label="Switch style" x="{width-switchStyleButton.width-10}"
				  y="10" click="switchStyle();"/>
		
	</Map>
	<components:toolbar fxMap="{fxMap}" />
	
	<fx:Script>
		<![CDATA[
			import org.openscales.geometry.basetypes.Bounds;
			import org.openscales.core.utils.Trace;
			import org.openscales.core.filter.ContainsFilter;
			import org.openscales.core.filter.ElseFilter;
			import org.openscales.core.handler.feature.SelectFeaturesHandler;
			import org.openscales.core.style.Rule;
			import org.openscales.core.style.Style;
			import org.openscales.core.style.fill.BitmapFill;
			import org.openscales.core.style.fill.SolidFill;
			import org.openscales.core.style.stroke.Stroke;
			import org.openscales.core.style.symbolizer.PolygonSymbolizer;
			import org.openscales.core.style.symbolizer.Symbolizer;
			
			import spark.components.HGroup;
			import spark.components.Label;
			import spark.components.VGroup;
			import spark.core.SpriteVisualElement;
			
			import manageLayer.styleexample.CentroidYFilter;
			
			[Bindable]
			private var styles:Array = [];
			
			[Bindable]
			[Embed(source='/assets/images/pattern.png')]
			private var Pattern:Class;
			
			private function initMap():void {
				this.createStyleLatitude();
				this.generateLegend();
				
			}
			
			private function generateLegend():void {
				this.legends.removeAllElements();
				
				for each (var style:Style in this.styles) {
					var vb:VGroup = new VGroup();
					
					var label:Label = new Label();
					label.text = style.name;
					label.setStyle("fontWeight", "bold");
					
					vb.addElement(label);
					
					var legendType:String;
					switch (style.name) {
						case "Default circle style":
						case "Default point style":  {
							legendType = Rule.LEGEND_POINT;
							break;
						}
						case "Draw linear style":
						case "Default line style":  {
							legendType = Rule.LEGEND_LINE;
							break;
						}
						default:  {
							legendType = Rule.LEGEND_POLYGON;
						}
					}
					
					for each (var rule:Rule in style.rules) {
						var hb:HGroup = new HGroup();
						hb.height=30;
						hb.setStyle("verticalAlign", "middle");
						hb.verticalCenter=0;
						hb.horizontalCenter=0;
						
						var leg:SpriteVisualElement = new SpriteVisualElement();
						leg.height = 30;
						leg.width = 30;
						leg.addChild(rule.getLegendGraphic(legendType));
						hb.addElement(leg);
						
						var ruleLabel:Label = new Label();
						ruleLabel.text = rule.name;
						hb.addElement(ruleLabel);
						ruleLabel.height = 30;
						ruleLabel.setStyle("verticalAlign", "middle");
						vb.addElement(hb);
					}
					
					this.legends.addElement(vb);
				}
			}
			
			private function switchStyle():void {
				var currentStyleName:String = "";
				if (this.styles.length > 1) {
					currentStyleName = (this.styles[1] as Style).name;
					this.styles.splice(1, this.styles.length);
				}
				switch (currentStyleName) {
					case "Latitude related coloration":
						Trace.info("Use the 'Geographical coloration' style");
						this.createStyleGeographical();
						break;
					case "Geographical coloration":
						Trace.info("Use the 'Latitude related coloration' style");
						this.createStyleLatitude();
						break;
					default:
						Trace.warn("Error in the style's names used => use the 'Latitude related coloration' style");
						this.createStyleLatitude();
				}
				this.generateLegend();
			}
			
			private function createStyleLatitude():void {
				var style:Style = new Style();
				style.name = "Latitude related coloration";
				var fill:SolidFill, stroke:Stroke, symbolizer:Symbolizer, rule:Rule;
				
				rule = new Rule();
				rule.name = "Centroid Y-coordinate in [70000;75000]";
				fill = new SolidFill(0x176273, .8);
				stroke = new Stroke(0x0A2C33, 2);
				symbolizer = new PolygonSymbolizer(fill, stroke);
				rule.symbolizers.push(symbolizer);
				rule.filter = new CentroidYFilter(70000, 75000);
				style.rules.push(rule);
				
				rule = new Rule();
				rule.name = "Centroid Y-coordinate in [65000;70000]";
				fill = new SolidFill(0xD8F20F, .8);
				stroke = new Stroke(0x2D3303, 2);
				symbolizer = new PolygonSymbolizer(fill, stroke);
				rule.symbolizers.push(symbolizer);
				rule.filter = new CentroidYFilter(65000, 70000);
				style.rules.push(rule);
				
				rule = new Rule();
				rule.name = "Centroid Y-coordinate out of previous ranges";
				fill = new SolidFill(0x84BF7A, .8);
				stroke = new Stroke(0x233321, 2);
				symbolizer = new PolygonSymbolizer(fill, stroke);
				rule.symbolizers.push(symbolizer);
				rule.filter = new ElseFilter();
				style.rules.push(rule);
				
				this.styles.push(style);
				this.ignGeoplaRegion.style = style;
				this.ignGeoplaRegion.nativeLayer.redraw();
			}
			
			private function createStyleGeographical():void {
				var style:Style = new Style();
				style.name = "Geographical coloration";
				var fill:SolidFill, stroke:Stroke, symbolizer:Symbolizer, rule:Rule;
				var bounds:Bounds;
				
				rule = new Rule();
				rule.name = "Departements of Bourgogne";
				fill = new SolidFill(0x176273, .8);
				stroke = new Stroke(0x0A2C33, 2);
				symbolizer = new PolygonSymbolizer(fill, stroke);
				rule.symbolizers.push(symbolizer);
				bounds = new Bounds(682105, 6558859, 892780, 6816381, "EPSG:2154");
				rule.filter = new ContainsFilter(bounds.toGeometry(), "EPSG:2154");
				style.rules.push(rule);
				
				rule = new Rule();
				rule.name = "Other departements of France";
				fill = new SolidFill(0x84BF7A, .8);
				stroke = new Stroke(0x233321, 2);
				symbolizer = new PolygonSymbolizer(fill, stroke);
				rule.symbolizers.push(symbolizer);
				rule.filter = new ElseFilter();
				style.rules.push(rule);
				
				this.styles.push(style);
				this.ignGeoplaRegion.style = style;
				this.ignGeoplaRegion.nativeLayer.redraw();
			}
			
			private function createBitmapStyle():Style {
				
				var style:Style = new Style();
				style.name = "France";
				var fill:BitmapFill, stroke:Stroke, symbolizer:Symbolizer, rule:Rule;
				var bounds:Bounds;
				
				rule = new Rule();
				rule.name = "France";
				fill = new BitmapFill((new Pattern().bitmapData as BitmapData));
				stroke = new Stroke(0xECF2BA, 6);
				symbolizer = new PolygonSymbolizer(fill, stroke);
				rule.symbolizers.push(symbolizer);
				style.rules.push(rule);
				
				this.styles[0] = style;
				return style;
			}
		
		]]>
	</fx:Script>
	

</s:VGroup>
