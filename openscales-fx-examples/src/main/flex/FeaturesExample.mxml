<?xml version="1.0" encoding="utf-8"?>
<!--- <p>This is an example of each type of geometry: point (red), multipoint (orange), line (green), multiline (red), polygon (blue), multipolygon (violet).</p>
<p>The additional black geometries are used to test the 'containsPoint' and 'intersects' functions of each geometry.</p>
<p>In 'select mode', select one geometry by a click or several geometries by drawing a selectBox (keep the mouse button down).
Use CTRL+click and CTRL+selectBox to add features to the selection.
Use SHIFT+click and SHIFT+selectBox to remove features from the selection.
The big black rectangle is registered as an unselectable feature.</p>-->
<s:Group xmlns="http://openscales.org" xmlns:s="library://ns.adobe.com/flex/spark" xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 width="100%" height="100%" creationComplete="initMap();" xmlns:mx="library://ns.adobe.com/flex/mx">
	
	<Map id="fxMap" width="100%" height="100%" resolution="0.001373291" center="4.833,45.767" projection="EPSG:900913" maxExtent="-20037508.34,-20037508.34,20037508.34,20037508.34">
		
		<Mapnik name="Mapnik" />
		
		<DragHandler id="dragHandler" />
		<WheelHandler />
		<Spinner id="spinner" x = "{width / 2}" y = "{height / 2}"/>	
		<MousePosition x="10" y="{height-20}" displayProjection="EPSG:4326"/>
		
		<SelectFeaturesHandler id="selectFeaturesHandler" creationComplete="{selectFeaturesHandler.handler.active=false;}"/>
		
	</Map>
	
	<TraceInfo id="traceInfo"  x="{width-200}" y="0"/>
	
	<s:VGroup horizontalAlign="center" x="10" y="10">
		<mx:ToggleButtonBar id="buttons" selectedIndex="0">
			<mx:dataProvider>
				<fx:Array>
					<fx:String>Pan</fx:String>
					<fx:String>Select</fx:String>
					<fx:String>Clear</fx:String>
				</fx:Array>
			</mx:dataProvider>
			<mx:itemClick>
				<![CDATA[
					switch (buttons.selectedIndex) {
						case 0 :
							Trace.info("pan mode");
							selectFeaturesHandler.handler.active = false;
							dragHandler.handler.active = true;
							break;
						case 1 :
							Trace.info("select mode");
							dragHandler.handler.active = false;
							selectFeaturesHandler.handler.active = true;
							break;
						case 2 :
							Trace.info("clear selection");
							(selectFeaturesHandler.handler as SelectFeaturesHandler).clearSelection();
							// Once the selection is cleared, return in previous mode
							if (dragHandler.handler.active) {
								Trace.info("back to pan mode");
								buttons.selectedIndex = 0;
							} else if (selectFeaturesHandler.handler.active) {
								Trace.info("back to select mode");
								buttons.selectedIndex = 1;
							}
							break;
						default:
							Trace.info("unknown mode");
					}
				]]>
			</mx:itemClick>
		</mx:ToggleButtonBar>
		
	</s:VGroup>
	
	<fx:Script>
		<![CDATA[
			import org.openscales.core.utils.Trace;
			import org.openscales.core.basetypes.Resolution;
			import org.openscales.core.feature.Feature;
			import org.openscales.core.feature.MultiPolygonFeature;
			import org.openscales.core.feature.PointFeature;
			import org.openscales.core.feature.PolygonFeature;
			import org.openscales.core.handler.feature.SelectFeaturesHandler;
			import org.openscales.core.layer.VectorLayer;
			import org.openscales.geometry.Collection;
			import org.openscales.geometry.Geometry;
			import org.openscales.geometry.LinearRing;
			import org.openscales.geometry.Point;
			import org.openscales.geometry.Polygon;
			
			private function initMap():void {
				// Specific initialize for this example
				var layer:VectorLayer = SampleLayers.features();
				// Usefull to test selection when a layer is not displayed
				//layer.minZoomLevel = 10;
				layer.minResolution = new Resolution(0.001373291015625,layer.projection);
				
				(selectFeaturesHandler.handler as SelectFeaturesHandler).unselectableFeatures = new <Feature>[ layer.getChildAt(4) as PolygonFeature ];
				fxMap.map.addLayer(layer);
				testContainsPoint(layer);
				testIntersects(layer);
			}
			
			/**
			 * Test all the containsPoint functions for the relevant gÃ©ometries.
			 */
			public function testContainsPoint(layer:VectorLayer):void {
				// Useful variables for the tests
				var geom1:Geometry, geom2:Geometry;
				var testResult:Boolean, testExpectedResult:Boolean;
				var textResult:String;

				// LinearRing contains a Point : true
				testExpectedResult = true;
				geom1 = ((layer.getChildAt(9) as PolygonFeature).geometry as Collection).componentByIndex(0);
				geom2 = (layer.getChildAt(5) as PointFeature).geometry;
				testResult = (geom1 as LinearRing).containsPoint(geom2 as org.openscales.geometry.Point);
				textResult = "Does the outer LinearRing of the blue Polygon contain the red point (true) ? => "+testResult;
				if (testResult==testExpectedResult) Trace.info(textResult) else Trace.error(textResult);

				// LinearRing contains a Point : false for a point outside of the AABB of the LinearRing
				testExpectedResult = false;
				geom1 = ((layer.getChildAt(9) as PolygonFeature).geometry as Collection).componentByIndex(0);
				geom2 = (layer.getChildAt(0) as PointFeature).geometry;
				testResult = (geom1 as LinearRing).containsPoint(geom2 as org.openscales.geometry.Point);
				textResult = "Does the outer LinearRing of the blue Polygon contain the black point below the violet multipolygon (false) ? => "+testResult;
				if (testResult==testExpectedResult) Trace.info(textResult) else Trace.error(textResult);

				// LinearRing contains a Point : false even if the point is inside the AABB of the LinearRing
				testExpectedResult = false;
				geom1 = ((layer.getChildAt(9) as PolygonFeature).geometry as Collection).componentByIndex(0);
				geom2 = (layer.getChildAt(2) as PointFeature).geometry;
				testResult = (geom1 as LinearRing).containsPoint(geom2 as org.openscales.geometry.Point);
				textResult = "Does the outer LinearRing of the blue Polygon contain the nearest black point (false) ? => "+testResult;
				if (testResult==testExpectedResult) Trace.info(textResult) else Trace.error(textResult);

				// Polygon contains a Point without management of the holes : true
				testExpectedResult = true;
				geom1 = (layer.getChildAt(9) as PolygonFeature).geometry;
				geom2 = (layer.getChildAt(5) as PointFeature).geometry;
				testResult = (geom1 as Polygon).isPointInPolygon(geom2 as org.openscales.geometry.Point, false);
				textResult = "Does the blue Polygon contain the red point without managing its holes (true) ? => "+testResult;
				if (testResult==testExpectedResult) Trace.info(textResult) else Trace.error(textResult);

				// Polygon contains a Point with management of the holes : false
				testExpectedResult = false;
				geom1 = (layer.getChildAt(9) as PolygonFeature).geometry;
				geom2 = (layer.getChildAt(5) as PointFeature).geometry;
				testResult = (geom1 as Polygon).containsPoint(geom2 as org.openscales.geometry.Point);
				textResult = "Does the blue Polygon contain the red point without managing its holes (false) ? => "+testResult;
				if (testResult==testExpectedResult) Trace.info(textResult) else Trace.error(textResult);
				
				// MultiPolygon contains a Point : true
				testExpectedResult = true;
				geom1 = ((layer.getChildAt(10) as MultiPolygonFeature).geometry as Collection).componentByIndex(0) as Collection;
				geom2 = (layer.getChildAt(0) as PointFeature).geometry;
				testResult = (geom1 as Polygon).containsPoint(geom2 as org.openscales.geometry.Point);
				textResult = "Does the violet MultiPolygon contain the upper black point (true) ? => "+testResult;
				if (testResult==testExpectedResult) Trace.info(textResult) else Trace.error(textResult);
				
				// MultiPolygon contains a Point : false
				testExpectedResult = false;
				geom1 = ((layer.getChildAt(10) as MultiPolygonFeature).geometry as Collection).componentByIndex(0) as Collection;
				geom2 = (layer.getChildAt(1) as PointFeature).geometry;
				testResult = (geom1 as Polygon).containsPoint(geom2 as org.openscales.geometry.Point);
				textResult = "Does the violet MultiPolygon contain the lower black point (false) ? => "+testResult;
				if (testResult==testExpectedResult) Trace.info(textResult) else Trace.error(textResult);
			}
			
			/**
			 * Test all the intersects functions for the relevant geometries.
			 */
			public function testIntersects(layer:VectorLayer):void {
				// Useful variables for the tests
				var geom1:Geometry, geom2:Geometry;
				var testResult:Boolean, testExpectedResult:Boolean;
				var textResult:String;
				
				// Polygon intersect a Polygon : true
				testExpectedResult = true;
				geom1 = (layer.getChildAt(9) as PolygonFeature).geometry;
				geom2 = (layer.getChildAt(4) as PolygonFeature).geometry;
				testResult = (geom1 as Polygon).intersects(geom2 as org.openscales.geometry.Polygon);
				textResult = "Does the blue Polygon intersect the big black rectangle (true) ? => "+testResult;
				if (testResult==testExpectedResult) Trace.info(textResult) else Trace.error(textResult);
				
				// Polygon intersect a Polygon : true
				testExpectedResult = true;
				geom1 = (layer.getChildAt(9) as PolygonFeature).geometry;
				geom2 = (layer.getChildAt(11) as PolygonFeature).geometry;
				testResult = (geom1 as Polygon).intersects(geom2 as org.openscales.geometry.Polygon);
				textResult = "Does the blue Polygon intersect the inside small black rectangle (true) ? => "+testResult;
				if (testResult==testExpectedResult) Trace.info(textResult) else Trace.error(textResult);
				
				// Polygon intersect a Polygon : false
				testExpectedResult = false;
				geom1 = (layer.getChildAt(9) as PolygonFeature).geometry;
				geom2 = (layer.getChildAt(12) as PolygonFeature).geometry;
				testResult = (geom1 as Polygon).intersects(geom2 as org.openscales.geometry.Polygon);
				textResult = "Does the blue Polygon intersect the black lozenge (false) ? => "+testResult;
				if (testResult==testExpectedResult) Trace.info(textResult) else Trace.error(textResult);
			}
		]]>
	</fx:Script>
	
</s:Group>
