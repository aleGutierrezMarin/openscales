<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx" 
		 creationComplete="onCreationComplete()"
		 width="300" height="350">
	<fx:Declarations>
		<!-- Placer ici les éléments non visuels (services et objets de valeur, par exemple). -->
	</fx:Declarations>
	
	<s:layout>
		<s:VerticalLayout paddingBottom="10" paddingTop="10" paddingLeft="10" paddingRight="10" />
	</s:layout>
	
	<s:Label id="formatLabel" text="{this.formatLabelText}" />
	
	<s:DropDownList id="listFormat"
					change="{this.formatChange(event)}"
					dataProvider="{this.formatProvider}"
					selectedIndex="{this.selectedFormat}" />

	<s:Button id="validateExportButton" label="{this.exportLabel}" click="{this.validateExportFeature(event)}" />

	
	<fx:Script>
		<![CDATA[
			import mx.collections.ArrayCollection;
			
			import org.openscales.core.events.I18NEvent;
			import org.openscales.core.format.GPXFormat;
			import org.openscales.core.format.GeoRssFormat;
			import org.openscales.core.format.KMLFormat;
			import org.openscales.core.format.gml.writer.GML321Writer;
			import org.openscales.core.i18n.Catalog;
			import org.openscales.core.layer.KML;
			
			private var _exportFeature:ExportFeature = null;
			
			/**
			 * Datas in the format dropdownlist
			 */
			[Bindable]
			public var formatProvider:ArrayCollection = new ArrayCollection();
			
			/**
			 * Contains all the format supported
			 */
			[Bindable]
			public var supportedFormat:Array = null;
			
			/**
			 * The label format value
			 */
			[Bindable]
			public var formatLabelText:String = Catalog.getLocalizationForKey('drawing.format');	
			
			/**
			 * The valide import text
			 */
			[Bindable]
			public var exportLabel:String = Catalog.getLocalizationForKey('drawing.export');
			
			
			/**
			 * The current selected format
			 * @default the first one : 0
			 */
			[Bindable]
			public var selectedFormat:Number = 0;
			
			
			/**
			 * The file reference
			 */
			private var fileReference:FileReference;
			
			private static const DEFAULT_FILE_NAME:String = "export.xml";
			
			/**
			 * Initialise the component onCreationComplete
			 */
			public function onCreationComplete():void
			{
				if(!this.supportedFormat)
				{
					// init all available formats
					this.supportedFormat = new Array();
					this.supportedFormat[0] = "KML";
					/*
					this.supportedFormat[1] = "GPX";
					this.supportedFormat[2] = "GeoRSS";
					this.supportedFormat[3] = "OSM";
					this.supportedFormat[4] = "GML";
					*/
				}
				
				// init formats :
				for each(var format:String in supportedFormat)
				{
					this.formatProvider.addItem(format);
				}
			}
			
			
			/**
			 * Call when a change event if dispatch by the dropdownlist linked to formats
			 * Update the current format value according to the new selection
			 * And then refresh the version list
			 */
			public function formatChange(event:Event):void
			{
				if(event)
				{
					var list:DropDownList = event.currentTarget as DropDownList
					this.selectedFormat = list.selectedIndex;
				}
			}
			
			/**
			 * Change the text values on Map Language changed
			 * @param event The I18N event received
			 */
			public function onMapLanguageChange(event:I18NEvent):void 
			{
				this.formatLabelText = Catalog.getLocalizationForKey('drawing.format');
				this.exportLabel = Catalog.getLocalizationForKey('drawing.export');
			}
			
			/**
			 * Export the fila at the requested format
			 */
			public function validateExportFeature(event:MouseEvent):void
			{
				var format:String = this.formatProvider.getItemAt(this.selectedFormat) as String;
				
				//create the FileReference instance
				fileReference = new FileReference();
				
				//listen for the file has been saved
				fileReference.addEventListener(Event.COMPLETE, onFileSave);
				
				//listen for when then cancel out of the save dialog
				fileReference.addEventListener(Event.CANCEL,onCancel);
				
				//listen for any errors that occur while writing the file
				fileReference.addEventListener(IOErrorEvent.IO_ERROR, onSaveError);

				var datas:Object;
				
				switch(format)
				{
					case "KML":
						
						var writeKML:KMLFormat = new KMLFormat();
						datas = writeKML.write(this.exportFeature.target.features);
						break;
					
					case "GPX":
						
						var writeGPX:GPXFormat = new GPXFormat();
						datas = writeGPX.write(this.exportFeature.target.features);
						break;
					
					case "GeoRss":
						
						var writeGeoRss:GeoRssFormat = new GeoRssFormat();
						datas = writeGeoRss.write(this.exportFeature.target.features);
						break;
					
					case "OSM":
						break;
					
					case "GML":
						
						var writeGML:GML321Writer = new GML321Writer();
						//datas = writeGML.write(this.exportFeature.target.features);
						break;
				}
				
				//open a native save file dialog, using the default file name
				fileReference.save(datas, DEFAULT_FILE_NAME);
				
				this.exportFeature.closePopUp();
			}
			
			
			/**
			 * called once the file has been saved
			 */
			private function onFileSave(e:Event):void
			{
				trace("File Saved");
				fileReference = null;
			}
			
			/**
			 * called if the user cancels out of the file save dialog
			 */
			private function onCancel(e:Event):void
			{
				trace("File save select canceled.");
				fileReference = null;
			}
			
			/**
			 * called if an error occurs while saving the file
			 */
			private function onSaveError(e:IOErrorEvent):void
			{
				trace("Error Saving File : " + e.text);
				fileReference = null;
			}
			
			/**
			 * Return the importFeature linked to theb current form
			 */
			public function get exportFeature():ExportFeature
			{
				return _exportFeature;
			}
			
			
			/**
			 * @private
			 */
			public function set exportFeature(value:ExportFeature):void
			{
				_exportFeature = value;
				if(_exportFeature.target && _exportFeature.target.map)
				{
					this._exportFeature.target.map.addEventListener(I18NEvent.LOCALE_CHANGED, this.onMapLanguageChange);
				}
			}

		]]>
	</fx:Script>
	
</s:Group>
