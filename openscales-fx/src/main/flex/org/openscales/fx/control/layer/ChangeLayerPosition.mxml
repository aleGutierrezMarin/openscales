<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx"
		 xmlns="org.openscales.fx.control.layer.*"
		 xmlns:os="org.openscales.fx.control.*">
	
	<fx:Script>
		<![CDATA[
			import assets.fxg.DownArrowDown;
			import assets.fxg.DownArrowOver;
			import assets.fxg.DownArrowUp;
			import assets.fxg.UpArrowDown;
			import assets.fxg.UpArrowOver;
			import assets.fxg.UpArrowUp;
			
			import org.openscales.core.Map;
			import org.openscales.core.events.I18NEvent;
			import org.openscales.core.events.LayerEvent;
			import org.openscales.core.i18n.Catalog;
			import org.openscales.core.layer.Layer;
			import org.openscales.fx.control.layer.LayerManager;
			
			/**
			 * Tooltip for move front button
			 */
			[Bindable]
			public var tooltipMoveFront:String = Catalog.getLocalizationForKey('layercontrol.movefront');
			/**
			 * Tooltip for move back button
			 */
			[Bindable]
			public var tooltipMoveBack:String = Catalog.getLocalizationForKey('layercontrol.moveback');
			
			/**
			 * Indicates if the arrow up has to be displayed (if true) or not otherwise.
			 * This value is bind to the layerSwitcherArrowUp enable attribute
			 * 
			 * @default true
			 */
			[Bindable]
			public var _arrowUpVisibility:Boolean = true;

			/**
			 * Indicates if the arrow down has to be displayed (if true) or not otherwise.
			 * This value is bind to the layerSwitcherArrowDown enable attribute
			 * 
			 * @default true
			 */
			[Bindable]
			public var _arrowDownVisibility:Boolean = true;
			
			private var _layer:Layer;
			
			private var _layerManager:LayerManager;
			
			public function get layer():Layer{
				return _layer;
			}
						
			/**
			 * Configure the first display for this component when the layer is set
			 * Set one or two arrows depending of the position of the current layer
			 */ 
			public function set layer(value:Layer):void
			{
				this._layer = value;
				
				this.updateArrowsDisplay();
				
				if(_layer && _layer.map)
				{			
					this._layer.map.addEventListener(LayerEvent.LAYER_REMOVED, updateArrowsDisplay);
					this._layer.map.addEventListener(LayerEvent.LAYER_ADDED, updateArrowsDisplay);
					this._layer.map.addEventListener(LayerEvent.LAYER_CHANGED, updateArrowsDisplay);
					this._layer.map.addEventListener(LayerEvent.LAYER_CHANGED_ORDER, updateArrowsDisplay);
					this._layer.map.addEventListener(I18NEvent.LOCALE_CHANGED, onMapLanguageChange);
				}
			}
			public function get layerManager():LayerManager{
			
				return _layerManager;
			}
			
			public function set layerManager(value:LayerManager):void{
			
				_layerManager = value;
				this.updateArrowsDisplay();
			}
			
			/**
			 * @inherit
			 */
			public function onMapLanguageChange(event:I18NEvent):void 
			{
				this.tooltipMoveFront = Catalog.getLocalizationForKey('layercontrol.movefront');
				this.tooltipMoveBack = Catalog.getLocalizationForKey('layercontrol.moveback');		
			}
			
			/**
			 * Update the display of arrows according to the position of the layer
			 */
			public function updateArrowsDisplay(event:LayerEvent = null):void
			{
				if(_layerManager && _layer && _layerManager.layers.length > 1){

					
					switch(_layerManager.layers.getItemIndex(_layer)){
						// the layer is at the bottom of the list, we hide the arrowDown						
						case  _layerManager.layers.length-1:{
							this._arrowUpVisibility = true;
							this._arrowDownVisibility = false;
							break;
						}
						case 0:{
							this._arrowUpVisibility = false;
							this._arrowDownVisibility = true;
							break;
						}
						default:{
							this._arrowUpVisibility = true;
							this._arrowDownVisibility = true;
						}
					
					}
				}
				else{
					this._arrowUpVisibility = false;
					this._arrowDownVisibility = false;
				}
				
			}

			/**
			 * Move the current Layer up on the map
			 */
			public function upLayer(event:MouseEvent):void {
				if(_layerManager){
				
					_layerManager.moveForward(_layer);
				}
				else{
					this._layer.map.changeLayerIndexByStep(this._layer,+1);
				}
			}
			
			/**
			 * Move the current Layer down on the map
			 */
			public function downLayer(event:MouseEvent):void {
				if(_layerManager){
					
					_layerManager.moveBack(_layer);
				}
				else{
					this._layer.map.changeLayerIndexByStep(this._layer,-1);
				}
			}
		]]>
	</fx:Script>
	
	<s:SkinnableContainer>
		<s:layout>
			<s:VerticalLayout gap="0" verticalAlign="middle" />
		</s:layout>
		<os:IconButton id="layerSwitcherArrowUp"
					toolTip="{this.tooltipMoveBack}"
					click="upLayer(event)"
					icon="{new UpArrowUp()}"
					iconOver="{new UpArrowOver()}"
					iconDown="{new UpArrowDown()}"
					width="10"
					height="10" 
					enabled="{this._arrowUpVisibility}"/>
		
		<os:IconButton id="layerSwitcherArrowDown"
					toolTip="{this.tooltipMoveBack}"
					click="downLayer(event)"
					icon="{new DownArrowUp()}"
					iconOver="{new DownArrowOver()}"
					iconDown="{new DownArrowDown()}"
					width="10"
					height="10"
					enabled="{this._arrowDownVisibility}"/>
	</s:SkinnableContainer>
</s:Group>
