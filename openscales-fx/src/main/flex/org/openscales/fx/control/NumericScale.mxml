<?xml version="1.0" encoding="utf-8"?>
<!--- Numeric scale display a scale ratio -->
<Control xmlns="http://openscales.org" 
		 xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx" >
	
	<fx:Script>
		<![CDATA[
			import org.openscales.core.Map;
			import org.openscales.core.basetypes.Resolution;
			import org.openscales.core.events.LayerEvent;
			import org.openscales.core.events.MapEvent;
			import org.openscales.geometry.basetypes.Location;
			import org.openscales.geometry.basetypes.Unit;
			import org.openscales.proj4as.ProjConstants;
			import org.openscales.proj4as.ProjProjection;
			
			/**
			 * The default fixed round for scale precision
			 */
			public static var DEFAULT_FIXED_ROUND:uint=0;
			
			
			/**
			 * The default dpi value to use
			 */
			public static const DEFAUL_DPI:Number = 101.6;
			
			/**
			 * @private
			 * The value of the current numeric scale
			 * @default 1
			 */
			private var _value:Number = 1;
			
			/**
			 * @private
			 * The dpi to use for the scale calculation
			 */
			private var _dpi:Number = DEFAUL_DPI;

			/**
			 * The current value of the scale Label
			 * @default "1 / 1"
			 */
			[Bindable]
			public var scaleLabel: String = "1 / 1";
			
			/**
			 * The current visibility of the numeric scale text input.
			 * @default false
			 */
			[Bindable]
			private var textInputVisibility:Boolean = false;
			
			/**
			 * The current visibility of the numeric scale label.
			 * @default true
			 */
			[Bindable]
			private var labelVisibility:Boolean = true;
			
			/**
			 * The current value of the numeric scale text input.
			 * @default ""
			 */
			[Bindable]
			private var textInputText:String = "";
				
			override public function set map(value:Map):void
			{
				super.map = value;
				this.updateScale();
			}
			
			/**
			 * @inherit
			 */
			override public function activate():void 
			{
				super.activate();
				
				// add listener to the map
				if(this._map)
				{
					this._map.addEventListener(MapEvent.PROJECTION_CHANGED,this.updateScale);
					this._map.addEventListener(MapEvent.CENTER_CHANGED,this.updateScale);
					this._map.addEventListener(MapEvent.RESOLUTION_CHANGED,this.updateScale);
				}
			}
			
			/**
			 * @inherit
			 */
			override public function desactivate():void 
			{
				super.desactivate();
				
				// add listener to the map
				if(this._map)
				{
					this._map.removeEventListener(MapEvent.PROJECTION_CHANGED,this.updateScale);
					this._map.removeEventListener(MapEvent.CENTER_CHANGED,this.updateScale);
					this._map.removeEventListener(MapEvent.RESOLUTION_CHANGED,this.updateScale);
				}
			}
			
			/**
			 * Update the value of the numeric scale.
			 * The new numeric scale is obtain by Unit.getScaleFrom resolution with the current resolution and the current map projection unit.
			 * 
			 * @param event The event received if the function is called 
			 * when a zoom occur or when the map projection is changed.
			 */
			public function updateScale(MapEvent:Event=null):void
			{
				if(this._map == null)
					return;
				
				// Calculate the scale according to the current center resolution
				var projection:ProjProjection = ProjProjection.getProjProjection(this._map.projection);
				var resolutionAtCenter:Number = Unit.getResolutionOnCenter(this._map.resolution.value, this._map.center, projection);
				
				var unit:String = ProjProjection.getProjProjection(this._map.projection).projParams.units;
				
				if(projection.projName  == "longlat")
					unit = Unit.METER;
				
				// screen dpi flash.system.Capabilities.screenDPI
				this.value = Math.round(Unit.getScaleFromResolution(resolutionAtCenter,unit,this._dpi));
				//this.value = Math.round(Unit.getScaleDenominatorFromResolution(resolutionAtCenter,unit));
				
				// update the label :
				this.scaleLabel = "1 / "+this._value;
			}
			
			/**
			 * Called when the user click on the numeric scale.
			 * He is also allowed to change his value in order to change the map resolution.
			 * 
			 * @param event The event received if the function is called when the user click
			 * on the numeric scale.
			 */
			private function onClick(event:MouseEvent):void
			{
				this.labelVisibility = false;
				this.textInputVisibility = true;
				
				this.textInputText = this._value.toString();
			}
			
			/**
			 * Called when the user pressed a keyboard key.
			 * If the key is enter, then we can update the scale value and the map resolution.
			 * 
			 * @param event The event received if the function is called when the user pressed
			 * a keyboard key.
			 */
			private function onEnterPressed(event:KeyboardEvent):void
			{
				// If the pressed key is "Enter"
				if (event.keyCode == 13)
				{
					var projection:ProjProjection = ProjProjection.getProjProjection(this._map.projection);
					var resolutionAtCenter:Number = Unit.getResolutionOnCenter(this._map.resolution.value, this._map.center, projection);
					
					var unit:String = ProjProjection.getProjProjection(this._map.projection).projParams.units;
					
					if(projection.projName  == "longlat")
						unit = Unit.METER;
					
					
					var scale:Number = Number(this.textInputText);
					var resolutionValue:Number = Unit.getResolutionFromScale(scale, unit, this._dpi);
					
					this._map.resolution = new Resolution(resolutionValue, projection);
					
					this.labelVisibility = true;
					
					this.textInputVisibility = false;
				}
			}
			
			/**
			 * The value of the current numeric scale
			 */
			[Bindable]
			public function get value():Number
			{
				return this._value;
			}
			
			public function set value(value:Number):void
			{
				this._value = value;
			}
			
			/**
			 * The dpi to use for the scale calculation
			 */
			public function get dpi():Number
			{
				return _dpi;
			}
			
			/**
			 * @private
			 */
			public function set dpi(value:Number):void
			{
				_dpi = value;
			}
		]]>
	</fx:Script>
	
	<s:Label id="numericScaleLabel"
			  width="100%"
			  height="25"
			  backgroundColor="0xFFFFFF" 
			  paddingTop="5" 
			  paddingLeft="5" 
			  paddingRight="5"
			  text="{this.scaleLabel}" 
			  click="onClick(event)" />
	
	<s:TextInput id="numericScaleTextInput"
				 width="{this.numericScaleLabel.width}"
				 height="25"
				 paddingTop="5"
				 paddingLeft="5"
				 paddingRight="5"
				 visible="{this.textInputVisibility}"
				 includeInLayout="{this.textInputVisibility}"
				 text="@{this.textInputText}"
				 keyDown="onEnterPressed(event)"
				 />
	
</Control>