<?xml version="1.0" encoding="utf-8"?>
<os:IconButton xmlns:fx="http://ns.adobe.com/mxml/2009"
			   xmlns:s="library://ns.adobe.com/flex/spark"
			   xmlns:mx="library://ns.adobe.com/flex/mx"
			   xmlns:os="org.openscales.fx.control.*"
			   toolTip="{this.tooltip}"
			   icon="{_btnAttributes}"
			   alpha="{_alpha}"
			   width="25"
			   height="25"
			   click="onClick()">
	
	<fx:Script>
		<![CDATA[
			import org.openscales.core.Map;
			import org.openscales.core.events.DrawingEvent;
			import org.openscales.core.events.FeatureEvent;
			import org.openscales.core.events.I18NEvent;
			import org.openscales.core.feature.Feature;
			import org.openscales.core.i18n.Catalog;
			import org.openscales.core.layer.VectorLayer;
			import org.openscales.fx.control.drawing.popup.EditFeatureAttributes;
			import org.openscales.fx.control.drawing.popup.ViewFeatureAttributes;
			
			[Bindable]
			private var _alpha:Number = 1;
			
			[Bindable]
			private var tooltip:String = Catalog.getLocalizationForKey('drawing.attributes');
			
			[Bindable]
			[Embed(source="/assets/images/icons/Icons-13.jpg")]
			private var _btnAttributes:Class;
			
			private var _map:Map = null;
			private var _editHandlerActivated:Boolean = false;
			private var _defaultAttributes:Array = new Array("id","description");
			private var _index:int;
			private var _vectorLayer:VectorLayer;
			
			/**
			 * The Map associated to the component
			 */
			public function get map():Map{
				
				return this._map;
			}
			public function set map(value:Map):void{
				
				this._map = value;
				this._map.addEventListener(FeatureEvent.FEATURE_SELECT, onSelectedFeature);
				this._map.addEventListener(DrawingEvent.DRAW_HANDLER_ACTIVATED, onChangeActiveHandler);
				this._map.addEventListener(DrawingEvent.EDIT_HANDLER_ACTIVATED, onChangeActiveHandler);
				this._map.addEventListener(DrawingEvent.MOVE_HANDLER_ACTIVATED, onChangeActiveHandler);
				this._map.addEventListener(DrawingEvent.SELECT_HANDLER_ACTIVATED, onChangeActiveHandler);
				this._map.addEventListener(FeatureEvent.FEATURE_DRAWING_END, onFeatureAdded);
				this._map.addEventListener(DrawingEvent.CHANGE_ACTIVE_LAYER, onChangeActiveLayer);
				this._map.addEventListener(I18NEvent.LOCALE_CHANGED, onMapLanguageChange);
			}
			
			/**
			 * The default attributes
			 */
			public function set defaultAttributes(value:Array):void{
				
				this._defaultAttributes = value;
				if(this._vectorLayer){
					this._vectorLayer.attributesId = new Array();
					for(var i:uint = 0; i < this._defaultAttributes.length; i++){
						this._vectorLayer.attributesId.push(this._defaultAttributes[i]);
					}
				}
			}
			public function get defaultAttributes():Array{
				
				return this._defaultAttributes;
			}
			
			/**
			 * The VectorLayer associated to the component
			 */
			public function get target():VectorLayer{
				
				return this._vectorLayer;
			}
			public function set target(value:VectorLayer):void{
				
				this._vectorLayer = value;
				if(!value)
					return;
				
				// set the default attributes if this is the first selection of the layer
				var k:uint;
				if(this.parentDocument is DrawingToolbar && !this._vectorLayer.initInDrawingToolbar){
					this._vectorLayer.attributesId = new Array();
					for(k = 0; k < this._defaultAttributes.length; k++){
						this._vectorLayer.attributesId.push(this._defaultAttributes[k]);
					}
					this._vectorLayer.initInDrawingToolbar = true;
				}
				else if(!(this.parentDocument is DrawingToolbar) && !this._vectorLayer.initInDrawingToolbar && !this._vectorLayer.initOutDrawingToolbar){
					this._vectorLayer.attributesId = new Array();
					for(k = 0; k < this._defaultAttributes.length; k++){
						this._vectorLayer.attributesId.push(this._defaultAttributes[k]);
					}
					this._vectorLayer.initOutDrawingToolbar = true;
				}
			}
			
			/**
			 * This function is called when a feature is added to the associated Map
			 */
			private function onFeatureAdded(event:FeatureEvent):void{
				
				if(event.feature.layer == this.target && this.target != null)
				{
					var temp:Array = new Array(this.target.attributesId.length);
					if(!event.feature.attributes)
						event.feature.attributes = new Object();
					for(var i:uint = this.target.attributesId.length;i>0;--i) {
						if(!event.feature.attributes[this.target.attributesId[i-1]]) {
							if(this.target.attributesId[i-1]!="id")
								event.feature.attributes[this.target.attributesId[i-1]]="";
							else
								event.feature.name = event.feature.name + " / " + this.target.name;
						}
					}
					event.stopImmediatePropagation();
				}
			}
			
			/**
			 * This function is called when a feature is selected
			 */
			private function onSelectedFeature(event:FeatureEvent):void
			{
				if(this._editHandlerActivated && this.target != null){
					event.stopImmediatePropagation();
					new EditFeatureAttributes().feature = event.feature;
				}
				else{
					event.stopImmediatePropagation();
					new ViewFeatureAttributes().feature = event.feature;
				}
			}
			
			/**
			 * This function is called by the ChangeAttributes pop-up
			 */
			private function onChangeAttributes(textInputArray:Array):void{
				/*
				for(var i:uint = 0; i < this.target.attributesId.length; i++)
					(this.target.attributesVal[_index].values as Array)[i] = (textInputArray[i] as TextInput).text;
				*/
			}
			
			/**
			 * This function is called when the icon button is clicked
			 */
			private function onClick():void{
				
				if(!this.target)
					return;
				var evt:DrawingEvent = new DrawingEvent(DrawingEvent.ATTRIBUTES_HANDLER_ACTIVATED);
				evt.activeHandler = this.id;
				this.map.dispatchEvent(evt);
				new org.openscales.fx.control.drawing.popup.ManageAttributes(this._map, this.target.attributesId, this.onManageAttributes);
			}
			
			/**
			 * This function is called by the ManageAttributes pop-up
			 */
			private function onManageAttributes(value:String, action:String):void
			{
				var i:uint;
				var j:uint;
				
				var features:Vector.<Feature> = this.target.features;
				
				if(action == "add")
				{
					if(this.target.attributesId.indexOf(value)!=-1)
						return;
					this.target.attributesId.push(value);
					if(features) {
						for(i=features.length;i>0;--i) {
							if(!features[i-1].attributes[value])
								features[i-1].attributes[value]="";
						}
					}
				}
				else if(action == "delete")
				{
					if(features) {
						for(i=features.length;i>0;--i) {
							if(features[i-1].attributes[value])
								delete features[i-1].attributes[value];
						}
					}
				}
			}
			
			/**
			 * This function is called when a DrawingEvent occured
			 */
			private function onChangeActiveHandler(event:DrawingEvent):void{
				
				if(event.type == DrawingEvent.EDIT_HANDLER_ACTIVATED)
					this._editHandlerActivated = true;
				else
					this._editHandlerActivated = false;
			}
			
			/**
			 * This function is called when the active layer changed
			 */
			private function onChangeActiveLayer(evt:DrawingEvent):void{
				
				if(this.parentDocument is DrawingToolbar){
					this.target = evt.layer;
				}
			}
			
			/**
			 * Update texts on map language changed
			 */
			public function onMapLanguageChange(event:I18NEvent):void{
				
				this.tooltip = Catalog.getLocalizationForKey('drawing.attributes');
			}
		]]>
	</fx:Script>			
</os:IconButton>
