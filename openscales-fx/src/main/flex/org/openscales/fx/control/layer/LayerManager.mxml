<?xml version="1.0" encoding="utf-8"?>
<!--- LayerManager Flex control, used to change layer order or visbility -->
<Control xmlns="http://openscales.org"
		 xmlns:fx="http://ns.adobe.com/mxml/2009"
		 xmlns:s="library://ns.adobe.com/flex/spark"
		 width="215" xmlns:layer="org.openscales.fx.control.layer.*"
		 creationComplete="configure()">
	
	<fx:Script>
		<![CDATA[
			import assets.fxg.ButtonCloseOver;
			import assets.fxg.ButtonCloseUp;
			
			import flashx.textLayout.formats.BackgroundColor;
			
			import mx.collections.ArrayCollection;
			import mx.collections.IList;
			import mx.controls.RadioButton;
			import mx.core.Application;
			import mx.events.DragEvent;
			import mx.events.FlexEvent;
			import mx.events.IndexChangedEvent;
			import mx.events.ScrollEvent;
			import mx.events.SliderEvent;
			
			import org.openscales.core.Map;
			import org.openscales.core.Trace;
			import org.openscales.core.control.LayerManager;
			import org.openscales.core.events.LayerEvent;
			import org.openscales.core.events.LayerManagerEvent;
			import org.openscales.core.events.MapEvent;
			import org.openscales.core.events.OpenScalesEvent;
			import org.openscales.core.handler.mouse.ClickHandler;
			import org.openscales.core.layer.Layer;
			import org.openscales.fx.control.IconButton;
			
			import spark.components.Group;
			import spark.components.HSlider;
			import spark.components.Label;
			import spark.components.VSlider;
			import spark.components.supportClasses.ItemRenderer;
			import spark.primitives.Rect;
			
			
			/**
			 * @private
			 * Options for the LayerManager renderer (for additionnal controls to display like Metadatas, legend...)
			 * @default null
			 */
			[Bindable]
			private var _rendererOptions:Object = null;

			
			/**
			 * @private
			 * The itemRenderer class for display item of the layerSwithcer list
			 * @default DefaultLayerRenderer
			 */
			private var _itemRenderer:Class = DefaultLayerRenderer;
			
			/**
			 * 
			 */
			public function configure():void
			{
				layerList.itemRenderer = new ClassFactory(this._itemRenderer);
			}
			
			/**
			 * Set the map
			 * @param value
			 */	 
			override public function set map(value:Map):void {
				//cleanup
				if(this.map != null) {
					this.map.removeEventListener(LayerEvent.LAYER_ADDED,this.refresh);
					this.map.removeEventListener(LayerEvent.LAYER_CHANGED,this.refresh);
					this.map.removeEventListener(LayerEvent.LAYER_REMOVED,this.refresh);
					this.map.removeEventListener(LayerEvent.LAYER_CHANGED_ORDER,this.refresh);
				}
				super.map = value;
				
				if(this.map != null) {
					//Listening of layer event
					this.map.addEventListener(LayerEvent.LAYER_ADDED,this.refresh);
					this.map.addEventListener(LayerEvent.LAYER_CHANGED,this.refresh);
					this.map.addEventListener(LayerEvent.LAYER_REMOVED,this.refresh);
					this.map.addEventListener(LayerEvent.LAYER_CHANGED_ORDER,this.refresh);
					
					//stock layer by type : baselayer and overlays
					var overlayArray:Vector.<Layer>  = this.map.layers;
					var ac:ArrayCollection = new ArrayCollection();
					var i:int = overlayArray.length;
					for(i;i>0;--i)
						ac.addItem(overlayArray[i-1]);
					layerList.dataProvider = ac;
					
				}
			}
			
			/**
			 * Refresh the LayerSwitcher when a layer is add, delete or update
			 * @param event Layer event
			 */
			public function refresh(event:LayerEvent):void {	
				//Test the triggered event
				if(event.type == LayerEvent.LAYER_ADDED){
					layerList.dataProvider.addItemAt(event.layer,0);
					layerList.invalidateDisplayList();
				}
				
				if(event.type == LayerEvent.LAYER_REMOVED){
					var index:int = layerList.dataProvider.getItemIndex(event.layer);
					layerList.dataProvider.removeItemAt(index);
					layerList.invalidateDisplayList();
				}
				
				if(event.type == LayerEvent.LAYER_CHANGED || event.type == LayerEvent.LAYER_CHANGED_ORDER){
					var overlayArray:Vector.<Layer> = this.map.layers;
					var i:uint = overlayArray.length;
					layerList.dataProvider.removeAll();
					layerList.invalidateDisplayList();
					for(i;i>0;--i)
						layerList.dataProvider.addItem(overlayArray[i-1]);
					layerList.invalidateDisplayList();
					
				}
			}
			
			/**
			 * Update layers order when a user change it
			 * @param event Drag event
			 */
			public function changeLayerOrder(event:DragEvent):void{
				var layer:Layer = layerList.selectedItem as Layer;
				this.map.changeLayerIndex(layer,layerList.selectedIndex);
			}
			
			// getter / setter
			
			/**
			 * Options for the LayerManager renderer (for additionnal controls to display like Metadatas, legend...)
			 */
			public function get rendererOptions():Object
			{
				return this._rendererOptions;
			}
			
			/**
			 * @private
			 */
			public function set rendererOptions(value:Object):void
			{
				this._rendererOptions=value;
			}
	
			/**
			 * The itemRenderer for the list contains by the LayerSwitcher
			 */
			public function get itemRenderer():Class
			{
				return this._itemRenderer;
			}
			
			/**
			 * @private
			 */
			public function set itemRenderer(value:Class):void
			{
				this._itemRenderer=value;
			}
			
		]]>
	</fx:Script>
	

	
	
	<s:VGroup width="100%"
			  paddingLeft="2" paddingRight="2" paddingBottom="2" paddingTop="2"> 
		<s:List id="layerList" 
				dropEnabled="false"
				dragEnabled="false"
				dragMoveEnabled="false"
				width="100%"
				x="0"
				y="0"
				borderVisible="false">
			<s:layout>
				<s:VerticalLayout horizontalAlign="justify"
								  variableRowHeight="true"
								  requestedRowCount="4"/>
			</s:layout>
		</s:List>
	</s:VGroup>
	<s:Rect id="overRect"
			x="0" y="0"
			width="0" height="0"
			visible="false">
		<s:fill>
			<s:SolidColor color="white" alpha="1" />
		</s:fill>
		<s:stroke>
			<s:SolidColorStroke color="black" weight="1" alpha="1" />
		</s:stroke>
	</s:Rect>
</Control>

