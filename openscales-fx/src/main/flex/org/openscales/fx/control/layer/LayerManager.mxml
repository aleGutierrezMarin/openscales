<?xml version="1.0" encoding="utf-8"?>
<!--- LayerManager Flex control, used to change layer order or visbility -->
<Control xmlns="org.openscales.fx.control.*"
		 xmlns:fx="http://ns.adobe.com/mxml/2009"
		 xmlns:s="library://ns.adobe.com/flex/spark"
		 width="250" height="200"      
		 creationComplete="configure()">
	
	<fx:Script>
		<![CDATA[
			import assets.fxg.ButtonCloseOver;
			import assets.fxg.ButtonCloseUp;
			
			import flashx.textLayout.formats.BackgroundColor;
			
			import mx.collections.ArrayCollection;
			import mx.collections.IList;
			import mx.controls.RadioButton;
			import mx.core.Application;
			import mx.events.DragEvent;
			import mx.events.FlexEvent;
			import mx.events.IndexChangedEvent;
			import mx.events.ScrollEvent;
			import mx.events.SliderEvent;
			
			import org.openscales.core.Map;
			import org.openscales.core.Trace;
			import org.openscales.core.control.LayerManager;
			import org.openscales.core.events.I18NEvent;
			import org.openscales.core.events.LayerEvent;
			import org.openscales.core.events.LayerManagerEvent;
			import org.openscales.core.events.MapEvent;
			import org.openscales.core.events.OpenScalesEvent;
			import org.openscales.core.handler.mouse.ClickHandler;
			import org.openscales.core.i18n.Catalog;
			import org.openscales.core.layer.Layer;
			import org.openscales.fx.control.IconButton;
			
			import spark.components.Group;
			import spark.components.HSlider;
			import spark.components.Label;
			import spark.components.VSlider;
			import spark.components.supportClasses.ItemRenderer;
			import spark.primitives.Rect;
			
			/**
			 * Title value for the Panel
			 */
			[Bindable]
			public var panelTitle:String = Catalog.getLocalizationForKey('layerswitcher.title');
			
			
			/**
			 * The dataProvider use for the list.
			 */
			private var _dataProvider:ArrayCollection = new ArrayCollection();
			
			/**
			 * @private
			 * Options for the LayerManager renderer (for additionnal controls to display like Metadatas, legend...)
			 * @default null
			 */
			[Bindable]
			private var _rendererOptions:Object = null;

			
			/**
			 * @private
			 * The itemRenderer class for display item of the LayerMananger list
			 * @default DefaultLayerRenderer
			 */
			private var _itemRenderer:Class = DefaultLayerRenderer;
			
			/**
			 * Configure the object
			 */
			public function configure():void
			{
				layerList.itemRenderer = new ClassFactory(this._itemRenderer);
			}
			
			/**
			 * Set the map
			 * @param value
			 */	 
			override public function set map(value:Map):void {
				
				super.map = value;
				
				if(this._map != null) 
				{
					//stock layer by type : baselayer and overlays
					var overlayArray:Vector.<Layer>  = this.map.layers;
					var ac:ArrayCollection = new ArrayCollection();
					var i:int = overlayArray.length;
					for(i;i>0;--i)
						ac.addItem(overlayArray[i-1]);
					this.dataProvider = ac;
				}
			}
			
			/**
			 * @inherit
			 */
			override public function onMapLanguageChange(event:I18NEvent):void 
			{
				panelTitle = Catalog.getLocalizationForKey('layerswitcher.title');
			}
			
			/**
			 * @inherit
			 */
			override public function activate():void 
			{
				super.activate();
				
				if(this._map)
				{
					//Listening of layer event
					this._map.addEventListener(LayerEvent.LAYER_ADDED,this.refresh);
					this._map.addEventListener(LayerEvent.LAYER_CHANGED,this.refresh);
					this._map.addEventListener(LayerEvent.LAYER_REMOVED,this.refresh);
					this._map.addEventListener(LayerEvent.LAYER_CHANGED_ORDER,this.refresh);
				}
			}
			
			/**
			 * @inherit
			 */
			override public function desactivate():void 
			{
				super.desactivate();
				
				if(this._map)
				{
					this._map.removeEventListener(LayerEvent.LAYER_ADDED,this.refresh);
					this._map.removeEventListener(LayerEvent.LAYER_CHANGED,this.refresh);
					this._map.removeEventListener(LayerEvent.LAYER_REMOVED,this.refresh);
					this._map.removeEventListener(LayerEvent.LAYER_CHANGED_ORDER,this.refresh);
				}
			}
			
			/**
			 * Refresh the LayerSwitcher when a layer is add, delete or update
			 * @param event Layer event
			 */
			public function refresh(event:LayerEvent):void {	
				//Test the triggered event
				if(event.type == LayerEvent.LAYER_ADDED){
					this._dataProvider.addItemAt(event.layer,0);
					
					// indicates change to synchronyse the data
					dispatchEvent(new Event("dataProviderChanged"));
					layerList.invalidateDisplayList();
				}
				
				if(event.type == LayerEvent.LAYER_REMOVED){
					var index:int = layerList.dataProvider.getItemIndex(event.layer);
					this._dataProvider.removeItemAt(index);
					
					// indicates change to synchronyse the data
					dispatchEvent(new Event("dataProviderChanged"));
					layerList.invalidateDisplayList();
				}
				
				if(event.type == LayerEvent.LAYER_CHANGED || event.type == LayerEvent.LAYER_CHANGED_ORDER){
					var overlayArray:Vector.<Layer> = this.map.layers;
					var i:uint = overlayArray.length;
					this._dataProvider.removeAll();
					layerList.invalidateDisplayList();
					for(i;i>0;--i)
						layerList.dataProvider.addItem(overlayArray[i-1]);
					
					// indicates change to synchronyse the data
					dispatchEvent(new Event("dataProviderChanged"));
					layerList.invalidateDisplayList();
				}
			}
			
			/**
			 * Update layers order when a user change it
			 * @param event Drag event
			 */
			public function changeLayerOrder(event:DragEvent):void{
				var layer:Layer = layerList.selectedItem as Layer;
				this.map.changeLayerIndex(layer,layerList.selectedIndex);
			}
			
			// getter / setter
			/**
			 * The dataProvider use for the list.
			 */
			[Bindable(event="dataProviderChanged")]
			public function get dataProvider():ArrayCollection
			{
				return this._dataProvider;
			}
			
			/**
			 * @private
			 */
			public function set dataProvider(value:ArrayCollection):void
			{
				this._dataProvider=value;
				dispatchEvent(new Event("dataProviderChanged"));
				if( layerList )
				{
					layerList.invalidateDisplayList();
				}
			}
			
			/**
			 * Options for the LayerManager renderer (for additionnal controls to display like Metadatas, legend...)
			 */
			public function get rendererOptions():Object
			{
				return this._rendererOptions;
			}
			
			/**
			 * @private
			 */
			public function set rendererOptions(value:Object):void
			{
				this._rendererOptions=value;
			}
	
			/**
			 * The itemRenderer for the list contains by the LayerSwitcher
			 */
			public function get itemRenderer():Class
			{
				return this._itemRenderer;
			}
			
			/**
			 * @private
			 */
			public function set itemRenderer(value:Class):void
			{
				this._itemRenderer=value;
				layerList.itemRenderer = new ClassFactory(this._itemRenderer);
			}
			
		]]>
	</fx:Script>
	

	
	<s:Panel id="layerPanel" title="{this.panelTitle}" height="{this.height}" width="{this.width}" > 
		<s:List id="layerList" 
				dropEnabled="false"
				dragEnabled="false"
				dragMoveEnabled="false"
				dataProvider="{this.dataProvider}"
				width="100%"
				height="{(this.height-35)}"
				x="0"
				y="0"
				borderVisible="false">
			<s:layout>
				<s:VerticalLayout horizontalAlign="justify"
								  variableRowHeight="true"
								  requestedRowCount="4" />
			</s:layout>
		</s:List>
	</s:Panel>
	
</Control>

