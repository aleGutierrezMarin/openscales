<?xml version="1.0" encoding="utf-8"?>
<!--- LayerManager Flex control, used to change layer order or visbility -->
<Control xmlns="http://openscales.org" xmlns:fx="http://ns.adobe.com/mxml/2009"
		 xmlns:s="library://ns.adobe.com/flex/spark" width="215">
	
	<fx:Script>
		<![CDATA[
			import flashx.textLayout.formats.BackgroundColor;
			
			import mx.collections.ArrayCollection;
			import mx.collections.IList;
			import mx.controls.RadioButton;
			import mx.core.Application;
			import mx.events.DragEvent;
			import mx.events.FlexEvent;
			import mx.events.IndexChangedEvent;
			import mx.events.ScrollEvent;
			import mx.events.SliderEvent;
			
			import org.openscales.core.Map;
			import org.openscales.core.Trace;
			import org.openscales.core.control.LayerManager;
			import org.openscales.core.events.LayerEvent;
			import org.openscales.core.events.LayerManagerEvent;
			import org.openscales.core.events.MapEvent;
			import org.openscales.core.events.OpenScalesEvent;
			import org.openscales.core.handler.mouse.ClickHandler;
			import org.openscales.core.layer.Layer;
			
			import spark.components.Group;
			import spark.components.HSlider;
			import spark.components.VSlider;
			
			private var _layer:Layer;
			
			// Array wich contains all layers
			[Bindable]private var _layerArray:ArrayCollection = new ArrayCollection();
			
			private var _group:Group = null;
			
			private var _vSlider:VSlider = null;
			private var _hSlider:HSlider = null;
			
			private var _layerOldZindex:int=0;
			
			// static reference to itself : makes LayerRenderer code cleaner
			static public var layerManager:LayerManager;
			/**
			 * Set the map
			 *
			 * @param value
			 */	 
			override public function set map(value:Map):void {
				super.map = value;
				layerManager = this;
				if(map != null) {
					//Listening of layer event
					this.map.addEventListener(LayerEvent.LAYER_ADDED,this.refresh);
					this.map.addEventListener(LayerEvent.LAYER_CHANGED,this.refresh);
					this.map.addEventListener(LayerEvent.LAYER_REMOVED,this.refresh);
					this.map.addEventListener(LayerEvent.LAYER_CHANGED_ORDER,this.refresh);
					this.map.addEventListener(LayerManagerEvent.COMPONENT_OPACITY,manageOpacity);
					
					//stock layer by type : baselayer and overlays
					var overlayArray:Vector.<Layer>  = this.map.layers;
					var ac:ArrayCollection = new ArrayCollection();
					var i:int = overlayArray.length;
					for(i;i>0;--i)
						ac.addItem(overlayArray[i-1]);
					layerList.dataProvider = ac;
					
				}
			}
			
			/**
			 * Refresh the LayerSwitcher when a layer is add, delete or update
			 *
			 * @param event Layer event
			 */
			public function refresh(event:LayerEvent):void {	
				//Test the triggered event
				if(event.type == LayerEvent.LAYER_ADDED){
					layerList.dataProvider.addItemAt(event.layer,0);
					layerList.invalidateDisplayList();
				}
				
				if(event.type == LayerEvent.LAYER_REMOVED){
					var index:int = layerList.dataProvider.getItemIndex(event.layer);
					layerList.dataProvider.removeItemAt(index);
					layerList.invalidateDisplayList();
				}
				
				if(event.type == LayerEvent.LAYER_CHANGED || event.type == LayerEvent.LAYER_CHANGED_ORDER){
					var overlayArray:Vector.<Layer> = this.map.layers;
					var i:uint = overlayArray.length;
					var ac:ArrayCollection = new ArrayCollection();
					for(i;i>0;--i)
						ac.addItem(overlayArray[i-1]);
					layerList.dataProvider = ac;
					
				}
				if(myTimer != null){
					myTimer.stop();
					myTimer.removeEventListener(TimerEvent.TIMER, timerOpacityHandler);
					myTimer = null;
				}
				if(this._group != null) {
					this.removeElement(this._group);
					this._group = null;
				}
			}
			
			/**
			 * Update layers order when a user change it
			 *
			 * @param event Drag event
			 */
			public function changeLayerOrder(event:DragEvent):void{
				var layer:Layer = layerList.selectedItem as Layer;
				this.map.changeLayerIndex(layer,layerList.selectedIndex);
			}
			
			
			/**
			 * Update layers order when a user change it
			 *
			 * @param event Drag event
			 */
			public function manageOpacity(event:LayerManagerEvent):void
			{
				// remove timer before manage opacity
				removeTimerOpacity(new MouseEvent(MouseEvent.MOUSE_OVER));
				
				this._layerOldZindex = event.layer.zindex;
				if(this._group != null)
				{
					this.removeElement(this._group);
					this._group = null;
					if(this._layer == event.layer)
					{
						return;
					}
				}
				if(this._layer != event.layer || this._group == null)
				{
					this._layer = event.layer;
					//Create group that contain VSlider to manage opacity
					this._group = new Group();
					this._group.x = event.x+3;
					this._group.y = event.y+5;
					this._group.height = 45;
					this._group.width = 18;
					this._group.alpha = 0.7;
					
					
					//Create VSlider
					this._hSlider = new HSlider();
					this._hSlider.x=10;
					this._hSlider.y=5;
					this._hSlider.height=11;
					this._hSlider.width = 100;
					this._hSlider.minimum = 0;
					this._hSlider.maximum = 100;
					this._hSlider.value = this._layer.alpha*100;
					this._hSlider.snapInterval = 1;
					this._hSlider.dataTipFormatFunction = percentDataTip;
					this._hSlider.addEventListener(MouseEvent.MOUSE_DOWN,onDrag);
					this._hSlider.addEventListener(SliderEvent.CHANGE,layerOpacity);
					this._group.addElement(this._hSlider);
					
					/*
					this._vSlider = new VSlider();
					this._vSlider.x=6;
					this._vSlider.height = this._group.height;
					this._vSlider.width = 11;
					this._vSlider.minimum = 0;
					this._vSlider.maximum = 100;
					this._vSlider.value = this._layer.alpha*100;
					this._vSlider.snapInterval = 1;
					this._vSlider.dataTipFormatFunction = percentDataTip;
					this._vSlider.addEventListener(MouseEvent.MOUSE_DOWN,onDrag); 
					this._vSlider.addEventListener(SliderEvent.CHANGE,layerOpacity);
					this._group.addElement(this._vSlider);
					*/
					
					//Add the group to the LayerManager
					this.addElement(this._group);
					this._group.setVisible(true);
					// add listener for group
					this._group.addEventListener(MouseEvent.ROLL_OUT,addTimerOpacity);
				}
			}
			
			private var myTimer:Timer = null;
			
			public function addTimerOpacity(event:MouseEvent):void{
				if(myTimer != null){
					myTimer.reset();
				}else{
					myTimer = new Timer(2000, 1);
				}
				this._group.addEventListener(MouseEvent.MOUSE_OVER,removeTimerOpacity);
				myTimer.addEventListener(TimerEvent.TIMER, timerOpacityHandler);
				myTimer.start();
			}
			
			public function removeTimerOpacity(event:MouseEvent):void{
				if(myTimer != null){
					myTimer.stop();
					myTimer.removeEventListener(TimerEvent.TIMER, timerOpacityHandler);
					myTimer = null;
				}	
			}
			
			public function timerOpacityHandler(event:TimerEvent):void {
				if(this._group != null)
				{
					myTimer.removeEventListener(TimerEvent.TIMER, timerOpacityHandler);
					myTimer = null;
					this.removeElement(this._group);
					this._group = null;
					
				}
			}
			
			public function closeOpacity(event:ScrollEvent):void
			{
				if(_layer != null)
				{
					this._layerOldZindex = _layer.zindex;
				}
				if(this._group != null)
				{
					this.removeElement(this._group);
					this._group = null;
				}
			}
			
			/**
			 * Change the opacity of the layer
			 *
			 * @param event event send by a slide
			 */
			public function layerOpacity(event:Event):void
			{	
				this._layer.alpha = (event.target as HSlider).value/100;
			}
			
			public function percentDataTip(value:Number):String
			{
				return value+"%";
			}
			
			private function onDrag(event:Event):void {
				event.stopPropagation();
			}
			
			public function get overlayArray():ArrayCollection {
				return this._layerArray;
			}
			
		]]>
	</fx:Script>
	
	
	
	<s:VGroup width="100%" paddingLeft="2" paddingRight="2" paddingBottom="2" paddingTop="2"> 
		
		<s:List id="layerList" 
				itemRenderer="org.openscales.fx.control.layer.LayerRenderer"
				dropEnabled="true"
				dragEnabled="true"
				dragMoveEnabled="true"
				width="100%" 
				dragComplete="changeLayerOrder(event)" borderVisible="false">
			<s:layout>
				<s:VerticalLayout horizontalAlign="justify"
								  requestedRowCount="4"/>
				
			</s:layout>
		</s:List>
		
	</s:VGroup>
	
</Control>

