<?xml version="1.0" encoding="utf-8"?>
<s:TitleWindow xmlns:fx="http://ns.adobe.com/mxml/2009" 
			   xmlns:s="library://ns.adobe.com/flex/spark" 
			   xmlns:mx="library://ns.adobe.com/flex/mx"
			   close="close()" xmlns:openscales="http://openscales.org"
			   creationComplete="localize()">
	<fx:Declarations>
		<!-- Placer ici les éléments non visuels (services et objets de valeur, par exemple). -->
		<s:RadioButtonGroup id="pointPreviewMode" itemClick="this.changeMode()" />
		<s:RadioButtonGroup id="pointIconMode" itemClick="this.changePointMode()" />
		<s:RadioButtonGroup id="linePreviewMode" itemClick="this.changeMode()" />
		<s:RadioButtonGroup id="polygonPreviewMode" itemClick="this.changeMode()" />
		<s:RadioButtonGroup id="labelPreviewMode" itemClick="this.changeMode()" />
		
	</fx:Declarations>
	<fx:Script>
		<![CDATA[  
			import mx.collections.ArrayCollection;
			import mx.managers.PopUpManager;
			
			import org.hamcrest.mxml.collection.Array;
			import org.hamcrest.mxml.core.Not;
			import org.openscales.core.events.FeatureEvent;
			import org.openscales.core.events.I18NEvent;
			import org.openscales.core.feature.Feature;
			import org.openscales.core.feature.LabelFeature;
			import org.openscales.core.feature.LineStringFeature;
			import org.openscales.core.feature.MultiLineStringFeature;
			import org.openscales.core.feature.MultiPointFeature;
			import org.openscales.core.feature.MultiPolygonFeature;
			import org.openscales.core.feature.PointFeature;
			import org.openscales.core.feature.PolygonFeature;
			import org.openscales.core.handler.feature.draw.EditKMLStyleHandler;
			import org.openscales.core.i18n.Catalog;
			import org.openscales.core.style.Rule;
			import org.openscales.core.style.Style;
			import org.openscales.core.style.fill.Fill;
			import org.openscales.core.style.fill.SolidFill;
			import org.openscales.core.style.marker.CustomMarker;
			import org.openscales.core.style.marker.WellKnownMarker;
			import org.openscales.core.style.stroke.Stroke;
			import org.openscales.core.style.symbolizer.LineSymbolizer;
			import org.openscales.core.style.symbolizer.PointSymbolizer;
			import org.openscales.core.style.symbolizer.PolygonSymbolizer;
			import org.openscales.core.style.symbolizer.Symbolizer;
			import org.openscales.fx.control.drawing.popup.skin.CustomDropDownListSkin;
			
			[Embed(source="/assets/images/defaut.png")]
			private const Default:Class;
			[Embed(source="/assets/images/annuler.png")]
			private const Annuler:Class;
			[Embed(source="/assets/images/pipette.png")]
			private const Pipette:Class;
			[Embed(source="/assets/images/pot_peinture.png")]
			private const Pot:Class;
			[Embed(source="/assets/images/line.png")]
			private const Line:Class;
			[Embed(source="/assets/images/icons/Icons-03.png")]
			private const Point:Class;
			[Bindable]
			private var _fonts:ArrayCollection = new ArrayCollection ([{label:"Verdana", data:"0"},{label:"Tahoma", data:"1"}]);
			[Bindable]
			private var _fontStyles:ArrayCollection = new ArrayCollection ([{label:"Regular", data:"0"},{label:"Bold", data:"1"},{label:"Italic", data:"2"}]);	
		
			private var _targetFeature:Feature;
			
			private var _editedSymbolize:Symbolizer;
			
			[Bindable]
			private var _isPoint:Boolean = false;
			
			[Bindable]
			private var _isPolygon:Boolean = false;
			
			[Bindable]
			private var _isLine:Boolean = false;
			
			[Bindable]
			private var _isLabelPoint:Boolean = false;
			
			[Bindable]
			private var _allMode:Boolean = false;
			
			[Bindable]
			private var _selectedMode:Boolean = false;
			
			[Bindable]
			private var _typeSelectedMode:Boolean = false;
			
			private var _editStyleHandler:EditKMLStyleHandler;
			
			[Bindable]
			private var _lineColor:uint = 0x000000;
			
			[Bindable]
			private var _lineBorderOpacity:int = 100;
			
			[Bindable]
			private var _lineWidth:String = "5";
			
			[Bindable]
			private var _polygonLineColor:uint = 0x000000;
			
			[Bindable]
			private var _polygonLineBorderOpacity:int = 100;
			
			[Bindable]
			private var _polygonLineWidth:String = "5";
			
			[Bindable]
			private var _polygonFillColor:uint = 0x000000;
			
			[Bindable]
			private var _polygonFillOpacity:int = 100;
			
			[Bindable]
			private var _pointColorMode:Boolean = false;
			
			[Bindable]
			private var _pointIconMode:Boolean = true;
			
			[Bindable]
			private var _pointColor:uint = 0x000000;
			
			[Bindable]
			private var _pointOpacity:int = 100;
			
			[Bindable]
			private var _iconSelectedIndex:int = -1;

			[Bindable]
			private var _cancelPushed:Boolean = false;
			
			[Bindable]
			private var _pickingAlpha:Number = 1;
			
			[Bindable]
			private var _paintingAlpha:Number = 1;
			
			
			
			
			/**
			 * Toggle style picking
			 */
			private function toggleStylePicking():void
			{
				if (this._editStyleHandler.colorPickingActivated)
				{
					this._editStyleHandler.disactivateStylePicking();
					this._pickingAlpha = 1;  
				}
				else
				{
					if (this._editStyleHandler.colorPaintingActivated)
					{
						this._editStyleHandler.disactivateStylePainting();
					}
					this._editStyleHandler.activateStylePicking();
					this._pickingAlpha = 0.3;  
				}
				
			}
			
			/**
			 * Toggle style picking
			 */
			private function toggleStylePainting():void
			{
				if (this._editStyleHandler.colorPaintingActivated)
				{
					this._editStyleHandler.disactivateStylePainting();
					this._paintingAlpha = 1;  
				}
				else
				{
					if (this._editStyleHandler.colorPickingActivated)
					{
						this._editStyleHandler.disactivateStylePicking();
					}
					this._editStyleHandler.activateStylePainting();
					this._paintingAlpha = 0.3;  
				}
				
			}
			
			
			//Callback
			
			
			
			/**
			 * Method to handle the icon mode change on pointEdition
			 */
			private function changePointMode():void
			{
				if (this._pointIconMode)
				{
					var customMarker:CustomMarker = new CustomMarker((this.iconDropDownList.selectedItem as String));
					(this._editedSymbolize as PointSymbolizer).graphic = customMarker;
					this.editStyleHandler.actualizeFeature();
				}
				else
				{
					var fill:SolidFill = new SolidFill();
					fill.color = this.pointColorPicker.selectedColor;
					fill.opacity = this.pointFillOpacity.value/100;
					var wkm:WellKnownMarker = new WellKnownMarker(WellKnownMarker.WKN_SQUARE, fill)
					var ptsym:PointSymbolizer = this._editedSymbolize as PointSymbolizer;
					ptsym.graphic = wkm;
					this.editStyleHandler.actualizeFeature();
				}
			}
			
			/**
			 * Method to handle the preview mode
			 */
			private function changeMode():void
			{
				var mode:String= "";
				if (this._allMode)
				{
					mode = "all";
				}
				else if(this._selectedMode)
				{
					mode = "selected";
				}
				else if(this._typeSelectedMode)
				{
					mode ="typeselected"
				}
				if (mode != this._editStyleHandler.targetFeatures)
				{
					this._editStyleHandler.changePreviewMode(mode);
				}
				this.targetFeature = this._editStyleHandler.selectedFeature;
			}
			
			/**
			 * Method to close the title window
			 */
			private function close():void
			{
				this._editStyleHandler.validateChanges();
				PopUpManager.removePopUp(this);
			}
			
			/**
			 * Function that handle the text displayed in the bubble when changing opacity
			 */
			private function percentageTipFunc(val:String):String {
				return String(int(val))+"%";
			}
			
			/**
			 * callback to handle line color change
			 */
			private function onLineColorChanged():void
			{
				var stroke:Stroke = (this._editedSymbolize as LineSymbolizer).stroke;
				stroke.color = this._lineColor;
				this.editStyleHandler.actualizeFeature();
			}
			
			/**
			 * callback to handle line opacity change
			 */
			private function onLineOpacityChanged():void
			{
				var stroke:Stroke = (this._editedSymbolize as LineSymbolizer).stroke;
				stroke.opacity = this._lineBorderOpacity/100;
				this.editStyleHandler.actualizeFeature();
			}
			
			/**
			 * callback to handle line width change
			 */
			private function onLineWidthChanged():void
			{
				var stroke:Stroke = (this._editedSymbolize as LineSymbolizer).stroke;
				stroke.width = int(this._lineWidth);
				this.editStyleHandler.actualizeFeature();
			}
			
			/**
			 * callback to handle polygon line color change
			 */
			private function onPolygonLineColorChanged():void
			{
				var stroke:Stroke = (this._editedSymbolize as PolygonSymbolizer).stroke;
				stroke.color = this._polygonLineColor;
				this.editStyleHandler.actualizeFeature();
			}
			
			/**
			 * callback to handle polygon line opacity change
			 */
			private function onPolygonLineOpacityChanged():void
			{
				var stroke:Stroke = (this._editedSymbolize as PolygonSymbolizer).stroke;
				stroke.opacity = this._polygonLineBorderOpacity/100;
				this.editStyleHandler.actualizeFeature();
			}
			
			/**
			 * callback to handle polygon line width change
			 */
			private function onPolygonLineWidthChanged():void
			{
				var stroke:Stroke = (this._editedSymbolize as PolygonSymbolizer).stroke;
				stroke.width = int(this._polygonLineWidth);
				this.editStyleHandler.actualizeFeature();
			}
			
			/**
			 * callback to handle polygon fill color change
			 */
			private function onPolygonFillColorChanged():void
			{
				var fill:SolidFill = (this._editedSymbolize as PolygonSymbolizer).fill as SolidFill;
				fill.color = this._polygonFillColor
				this.editStyleHandler.actualizeFeature();
			}
			
			/**
			 * callback to handle polygon fill opacity change
			 */
			private function onPolygonFillOpacityChanged():void
			{
				var fill:SolidFill = (this._editedSymbolize as PolygonSymbolizer).fill as SolidFill;
				fill.opacity = this._polygonFillOpacity/100;
				this.editStyleHandler.actualizeFeature();
			}
			
			/**
			 * callback to handle point icon change
			 */
			private function onIconChanged():void
			{
				var customMarker:CustomMarker = new CustomMarker((this.iconDropDownList.selectedItem as String));
				(this._editedSymbolize as PointSymbolizer).graphic = customMarker;
				this.editStyleHandler.actualizeFeature();
			}
			
			private function onPointColorChanged():void
			{
				var fill:SolidFill = new SolidFill();
				fill.color = this.pointColorPicker.selectedColor;
				fill.opacity = this.pointFillOpacity.value/100;
				var wkm:WellKnownMarker = new WellKnownMarker(WellKnownMarker.WKN_SQUARE, fill)
				var ptsym:PointSymbolizer = this._editedSymbolize as PointSymbolizer;
				ptsym.graphic = wkm;
				this.editStyleHandler.actualizeFeature();
			}
			
			private function onPointOpacityChanged():void
			{
				var fill:SolidFill = new SolidFill();
				fill.color = this.pointColorPicker.selectedColor;
				fill.opacity = this.pointFillOpacity.value/100;
				var wkm:WellKnownMarker = new WellKnownMarker(WellKnownMarker.WKN_SQUARE, fill)
				var ptsym:PointSymbolizer = this._editedSymbolize as PointSymbolizer;
				ptsym.graphic = wkm;
				this.editStyleHandler.actualizeFeature();
			}
			
			/***
			 * Cancel styles changes mades on the opened popup
			 */
			private function cancelChanges():void
			{
				this._editStyleHandler.cancelChanges();
				this.targetFeature = this._targetFeature;
			}
			
			private function applyDefaultStyle():void
			{
				this._editStyleHandler.applyDefaultStyle();
				this.targetFeature = this._editStyleHandler.selectedFeature;
			}
			
			/**
			 * @private
			 */ 
			protected function localize(event:I18NEvent=null):void{
				this.title = Catalog.getLocalizationForKey("editStyle.mainPanel.title");
				this.cancelButton.toolTip = Catalog.getLocalizationForKey("editStyle.cancelButton.tooltip");
				this.setDefaultButton.toolTip = Catalog.getLocalizationForKey("editStyle.defaultButton.tooltip");
				this.stylePicking.toolTip = Catalog.getLocalizationForKey("editStyle.stylePicking.tooltip");
				this.stylePainting.toolTip = Catalog.getLocalizationForKey("editStyle.stylePainting.tooltip");
				this.dropdownPointModeRB.label = Catalog.getLocalizationForKey("editStyle.pointStyleEdition.dropDownMode");	
				this.colorPointModeRB.label = Catalog.getLocalizationForKey("editStyle.pointStyleEdition.colorMode");
				this.pointApplyTo.text = Catalog.getLocalizationForKey("editStyle.pointStyleEdition.labelText");
				this.pointPreviewModeAll.label = Catalog.getLocalizationForKey("editStyle.pointStyleEdition.previewModeAll");
				this.pointPreviewModeSelected.label = Catalog.getLocalizationForKey("editStyle.pointStyleEdition.previewModeSelected");
				this.pointPreviewModeTypeSelected.label = Catalog.getLocalizationForKey("editStyle.pointStyleEdition.previewModeTypeSelected");
				this.lineFillLabel.text = Catalog.getLocalizationForKey("editStyle.lineStyleEdition.fillLabelText");
				this.lineApplyTo.text = Catalog.getLocalizationForKey("editStyle.lineStyleEdition.labelText");
				this.linePreviewModeAll.label = Catalog.getLocalizationForKey("editStyle.lineStyleEdition.previewModeAll");
				this.linePreviewModeSelected.label = Catalog.getLocalizationForKey("editStyle.lineStyleEdition.previewModeSelected");
				this.linePreviewModeTypeSelected.label = Catalog.getLocalizationForKey("editStyle.lineStyleEdition.previewModeTypeSelected");
				this.polyStrokeLabel.text = Catalog.getLocalizationForKey("editStyle.polyStyleEdition.strokeLabelText");
				this.polyFillLabel.text = Catalog.getLocalizationForKey("editStyle.polyStyleEdition.fillLabelText");
				this.polyApplyTo.text = Catalog.getLocalizationForKey("editStyle.polyStyleEdition.labelText");
				this.polyPreviewModeAll.label = Catalog.getLocalizationForKey("editStyle.polyStyleEdition.previewModeAll");
				this.polyPreviewModeSelected.label = Catalog.getLocalizationForKey("editStyle.polyStyleEdition.previewModeSelected");
				this.polyPreviewModeTypeSelected.label = Catalog.getLocalizationForKey("editStyle.polyStyleEdition.previewModeTypeSelected");
			}
			
			// Getter Setter
			
			/**
			 * The editKMLStyleHandler that provide methods to manipulate style edition
			 */
			public function get editStyleHandler():EditKMLStyleHandler
			{
				return this._editStyleHandler;
			}
			
			/**
			 * @private
			 */
			public function set editStyleHandler(value:EditKMLStyleHandler):void
			{
				this._editStyleHandler = value;
				if (this._editStyleHandler)
				{
					if (this._editStyleHandler.targetFeatures == "selected")
					{
						this._allMode = false;
						this._typeSelectedMode = false;
						this._selectedMode = true;
					}
					else if(this._editStyleHandler.targetFeatures == "all")
					{
						this._allMode = true;
						this._typeSelectedMode = false;
						this._selectedMode = false;
					}
					else if(this._editStyleHandler.targetFeatures == "typeselected")
					{
						this._allMode = false;
						this._typeSelectedMode = true;
						this._selectedMode = false;
					}
				}
				if(this._editStyleHandler.map){
					this._editStyleHandler.map.addEventListener(I18NEvent.LOCALE_CHANGED, localize);
				}
			}
			
			/**
			 * The ArrayCollection containing the urls to the icons that can be used to edit custom markers 
			 */
			[Bindable]
			public function get iconURLArray():ArrayCollection
			{
				return this._editStyleHandler.iconURLArray;
			}
			
			
			/**
			 * privqte
			 */
			public function set iconURLArray(value:ArrayCollection):void
			{
				this._editStyleHandler.iconURLArray = value;
			}
			
			/**
			 * Feature holding the style to edit
			 */
			public function get targetFeature():Feature
			{
				return this._targetFeature;
				
			}
			
			/**
			 * @private
			 */
			public function set targetFeature(value:Feature):void
			{
				if (!value || !value.style)
					return;
				
				if (this._editStyleHandler.colorPickingActivated)
					this._pickingAlpha = 0.3;
				else
					this._pickingAlpha = 1;
				
				if (this._editStyleHandler.colorPaintingActivated)
					this._paintingAlpha = 0.3;
				else
					this._paintingAlpha = 1;
				
				var i:int;
				var rule:Rule;
				var symbLength:Number;
				this._targetFeature = value;
				if(_targetFeature is LabelFeature)
				{
					this._isPoint = false;
					this._isLabelPoint = true;
					this._isPolygon = false;
					this._isLine = false;
				}
				else if (_targetFeature is PointFeature || _targetFeature is MultiPointFeature)
				{
					// If labelSymbolizer?
					this._isPoint = true;
					this._isLabelPoint = false;
					this._isPolygon = false;
					this._isLine = false;
					if (_targetFeature.style.rules)
					{
						rule = _targetFeature.style.rules[0];
						symbLength = rule.symbolizers.length;
						for (i = 0; i< symbLength; ++i)
						{
							if (rule.symbolizers[i] is PointSymbolizer)
							{
								var ptSymb:PointSymbolizer = rule.symbolizers[i] as PointSymbolizer;
								if (ptSymb.graphic is CustomMarker)
								{
									var cm:CustomMarker = ptSymb.graphic as CustomMarker;
									if(this.iconURLArray.getItemIndex(cm.url) == -1)
									{
										this.iconURLArray.addItem(cm.url);
									}
									var itemIndex:int = this.iconURLArray.getItemIndex(cm.url);
									this._iconSelectedIndex = itemIndex;
									this._pointColorMode = false;
									this._pointIconMode = true;
								}
								else if (ptSymb.graphic is WellKnownMarker)
								{
									var wkm:WellKnownMarker = ptSymb.graphic as WellKnownMarker;
									this._pointColor = wkm.fill.color as uint;
									this._pointOpacity = wkm.fill.opacity*100;
									this._pointColorMode = true;
									this._pointIconMode = false;
								}
								_editedSymbolize = ptSymb;
								return;
							} 
							/*else if (rule.symbolizers[i] is LabelSymbolizer)
							{
								
							}*/
						}
					}
				}
				else if (_targetFeature is PolygonFeature || _targetFeature is MultiPolygonFeature)
				{
					this._isPoint = false;
					this._isLabelPoint = false;
					this._isPolygon = true;
					this._isLine = false;
					if (_targetFeature.style.rules)
					{
						rule = _targetFeature.style.rules[0];
						symbLength = rule.symbolizers.length;
						for (i = 0; i< symbLength; ++i)
						{
							if (rule.symbolizers[i] is PolygonSymbolizer)
							{
								var polySymb:PolygonSymbolizer = rule.symbolizers[i] as PolygonSymbolizer;
								this._polygonFillColor = (polySymb.fill as SolidFill).color as uint;
								this._polygonFillOpacity = (polySymb.fill as SolidFill).opacity*100;
								this._polygonLineBorderOpacity = polySymb.stroke.opacity*100;
								this._polygonLineColor = polySymb.stroke.color;
								this._polygonLineWidth = polySymb.stroke.width.toString();
								_editedSymbolize = polySymb;
								return;
							}
						}
					}
				}
				else if (_targetFeature is LineStringFeature || _targetFeature is MultiLineStringFeature)
				{
					this._isPoint = false;
					this._isLabelPoint = false;
					this._isPolygon = false;
					this._isLine = true;
					
					if (_targetFeature.style.rules)
					{
						rule = _targetFeature.style.rules[0];
						symbLength = rule.symbolizers.length;
						for (i = 0; i< symbLength; ++i)
						{
							if (rule.symbolizers[i] is LineSymbolizer)
							{
								var lineSymb:LineSymbolizer = rule.symbolizers[i] as LineSymbolizer;
								this._lineColor = lineSymb.stroke.color;
								this._lineBorderOpacity = lineSymb.stroke.opacity*100;
								this._lineWidth = lineSymb.stroke.width.toString();
								_editedSymbolize = lineSymb;
								return;
							}
						}
					}
				}
			}
			
			
		
		]]>        
	</fx:Script>
		<s:Group id="global" width="100%" >
			<s:layout >
				<s:VerticalLayout paddingLeft="5" paddingTop="5" paddingBottom="5" paddingRight="5"/>
			</s:layout>
			
			<!-- Barre d'outils-->
			<s:Group  id="tools" width="106">
				<s:layout >
					<s:HorizontalLayout paddingLeft="40" paddingTop="10" gap="10"/>
				</s:layout>
				
				<openscales:IconButton id="cancelButton" icon="{Annuler}" useHandCursor="true" click="{cancelChanges()}"/>
				<openscales:IconButton id="setDefaultButton" icon="{Default}" useHandCursor="true" click="{applyDefaultStyle()}"/>
				<openscales:IconButton id="stylePicking" icon="{Pipette}"  alpha="@{this._pickingAlpha}" useHandCursor="true" click="{toggleStylePicking()}"/>
				<openscales:IconButton id="stylePainting" icon="{Pot}" alpha="@{this._paintingAlpha}" useHandCursor="true" click="{toggleStylePainting()}"/>
			</s:Group>
			
			<!--Point-->
			<s:Group visible="{this._isPoint}" includeInLayout="{this._isPoint}">
				<s:layout >
					<s:VerticalLayout/>
				</s:layout>
				
				<s:Group width="175" >
					<s:layout >
						<s:VerticalLayout paddingLeft="5" paddingTop="5" gap="10"/>
					</s:layout>
						
					<mx:Image left="5" source="{Line}"/>
					<s:Group>
						<s:layout >
							<s:VerticalLayout paddingLeft="5" paddingTop="5" gap="10"/>
						</s:layout>
						
						<s:Group>
							<s:layout >
								<s:HorizontalLayout paddingLeft="5" paddingTop="5" gap="10"/>
							</s:layout>
							<s:RadioButton id="dropdownPointModeRB" selected="@{this._pointIconMode}" groupName="pointIconMode" />
							<s:DropDownList enabled="{this._pointIconMode}" id="iconDropDownList" skinClass="org.openscales.fx.control.drawing.popup.skin.CustomDropDownListSkin" itemRenderer="org.openscales.fx.control.drawing.popup.IconListItemRenderer" dataProvider="{this.iconURLArray}"  selectedIndex="@{this._iconSelectedIndex}" change="onIconChanged()" top="1" left="1" width="40"/>
						</s:Group>
						
						<s:Group>
							<s:layout >
								<s:HorizontalLayout paddingLeft="5" paddingTop="5" gap="10"/>
							</s:layout>
							<s:RadioButton id="colorPointModeRB" selected="@{this._pointColorMode}" groupName="pointIconMode" />
							<s:Group>
								<s:layout >
									<s:VerticalLayout paddingLeft="5" paddingTop="5" gap="10"/>
								</s:layout>
								
								<s:Graphic x="0" y="0">
									<mx:ColorPicker id="pointColorPicker" enabled="{this._pointColorMode}" selectedColor="@{this._pointColor}" change="onPointColorChanged()"/>
								</s:Graphic>
								<s:HSlider id="pointFillOpacity" enabled="{this._pointColorMode}"  value="@{this._pointOpacity}" dataTipFormatFunction="percentageTipFunc" change="onPointOpacityChanged()" height="11" width="70" minimum="0" maximum="100"/>
							</s:Group>
						</s:Group>
					</s:Group>
					<mx:Image left="5" source="{Line}"/>
				</s:Group>
				<s:Group >
					<s:layout >
						<s:VerticalLayout paddingLeft="2"/>
					</s:layout>
					<s:Label id="pointApplyTo" />
					<s:RadioButton id="pointPreviewModeAll" selected="@{this._allMode}" groupName="pointPreviewMode"/>
					<s:RadioButton id="pointPreviewModeSelected" selected="@{this._selectedMode}" groupName="pointPreviewMode"/>
					<s:RadioButton id="pointPreviewModeTypeSelected" selected="@{this._typeSelectedMode}" groupName="pointPreviewMode"/>
				</s:Group>
			</s:Group>
			
			
			<!--Line-->
			<s:Group visible="{this._isLine}" includeInLayout="{this._isLine}">
				<s:layout >
					<s:VerticalLayout/>
				</s:layout>
				
				<s:Group width="156" >
					<s:layout >
						<s:VerticalLayout paddingLeft="5" paddingTop="10" gap="10"/>
					</s:layout>
					
					<mx:Image left="5" source="{Line}"/>
					<s:Label id="lineFillLabel" color="black"/>
				</s:Group>
				
				<s:Group id="border" width="170" >
					<s:layout >
						<s:HorizontalLayout paddingLeft="5" gap="5"/>
					</s:layout>
					
					<mx:ColorPicker id="lineColorPicker" selectedColor="@{this._lineColor}" change="onLineColorChanged()"/>
					<s:Group>
						<s:layout >
							<s:HorizontalLayout paddingTop="5"/>
						</s:layout>
						
						<s:HSlider id="borderControlOpacity" dataTipFormatFunction="percentageTipFunc" height="11" width="100" minimum="0" maximum="100" value="@{this._lineBorderOpacity}" change="onLineOpacityChanged()"/>
					</s:Group>
					<s:TextInput id="lineWidth" restrict="0-9" maxChars="3" left="5" height="20" width="20" text="@{this._lineWidth}" change="onLineWidthChanged()" />
					<s:Label paddingTop="5" text="px" color="black"/>
				</s:Group>
				<s:Group>
					<s:layout >
						<s:VerticalLayout paddingLeft="2"/>
					</s:layout>
					<mx:Image left="5" source="{Line}"/>
					<s:Label id="lineApplyTo"/>
					<s:RadioButton id="linePreviewModeAll" selected="@{this._allMode}" groupName="linePreviewMode" />
					<s:RadioButton id="linePreviewModeSelected" selected="@{this._selectedMode}" groupName="linePreviewMode" />
					<s:RadioButton id="linePreviewModeTypeSelected" selected="@{this._typeSelectedMode}" groupName="linePreviewMode"/>
				</s:Group>
			</s:Group>
			
			<!--Polygon-->
			<s:Group visible="{this._isPolygon}" includeInLayout="{this._isPolygon}">
				<s:layout >
					<s:VerticalLayout/>
				</s:layout>
					
				<s:Group width="170">
					<s:layout >
						<s:VerticalLayout paddingLeft="5" paddingTop="10" gap="10"/>
					</s:layout>
					<mx:Image left="5" source="{Line}"/>
					<s:Label id="polyStrokeLabel" color="black"/>
				</s:Group>
				
				<s:Group id="polygonBorder" width="170" >
					<s:layout >
						<s:HorizontalLayout paddingLeft="5" gap="5"/>
					</s:layout>
					
					<s:Graphic x="0" y="0">
						<mx:ColorPicker id="polygonStrokeColorPicker" selectedColor="@{this._polygonLineColor}" change="onPolygonLineColorChanged()"/>
					</s:Graphic>
					<s:Group>
						<s:layout >
							<s:HorizontalLayout paddingTop="5"/>
						</s:layout>
						
						<s:HSlider id="polygonBorderControlOpacity" dataTipFormatFunction="percentageTipFunc" height="11" width="100" minimum="0" maximum="100" value="@{this._polygonLineBorderOpacity}" change="onPolygonLineOpacityChanged()"/>
					</s:Group>
					<s:TextInput left="5" height="20" width="20" restrict="0-9" maxChars="3" text="@{this._polygonLineWidth}" change="onPolygonLineWidthChanged()"/>
					<s:Label paddingTop="5" text="px" color="black"/>
				</s:Group>
				
				<s:Group width="170">
					<s:layout >
						<s:VerticalLayout paddingLeft="5" paddingTop="5" gap="5"/>
					</s:layout>
					
					<mx:Image left="5" source="{Line}"/>
					<s:Label id="polyFillLabel" color="black"/>
				</s:Group>
				<s:Group id="fill" width="170">
					<s:layout >
						<s:HorizontalLayout paddingLeft="5" gap="5"/>
					</s:layout>
					
					<s:Graphic x="0" y="0">
						<mx:ColorPicker id="polygonFillColorPicker" selectedColor="@{this._polygonFillColor}" change="onPolygonFillColorChanged()"/>
					</s:Graphic>
					<s:Group>
						<s:layout >
							<s:HorizontalLayout paddingTop="3"/>
						</s:layout>
						
						<s:HSlider id="polygonFillControlOpacity" dataTipFormatFunction="percentageTipFunc" height="11" width="100" minimum="0" maximum="100" value="@{this._polygonFillOpacity}" change="onPolygonFillOpacityChanged()"/>
					</s:Group>
				</s:Group>
				<s:Group >
					<s:layout >
						<s:VerticalLayout paddingLeft="2"/>
					</s:layout>
					<mx:Image left="5" source="{Line}"/>
					<s:Label id="polyApplyTo"/>
					<s:RadioButton id="polyPreviewModeAll" selected="@{this._allMode}" groupName="polygonPreviewMode"/>
					<s:RadioButton id="polyPreviewModeSelected" selected="@{this._selectedMode}" groupName="polygonPreviewMode"/>
					<s:RadioButton id="polyPreviewModeTypeSelected" selected="@{this._typeSelectedMode}" groupName="polygonPreviewMode"/>
				</s:Group>
			</s:Group>
				
			
			
			<!--Label-->
			<s:Group visible="{this._isLabelPoint}" includeInLayout="{this._isLabelPoint}">
				<s:layout >
					<s:VerticalLayout/>
				</s:layout>
				
				<s:Group width="170"  >
					<s:layout >
						<s:VerticalLayout paddingLeft="5" paddingTop="10" gap="10"/>
					</s:layout>
					
					<mx:Image left="5" source="{Line}"/>
					<s:Label text="Couleur" color="black"/>
				</s:Group>
				
				<s:Group id="labelBorder" width="170" >
					<s:layout >
						<s:HorizontalLayout paddingLeft="5" gap="5"/>
					</s:layout>
					
					<s:Graphic x="0" y="0">
						<mx:ColorPicker id="labelColorPicker" />
					</s:Graphic>
					<s:Group >
						<s:layout >
							<s:HorizontalLayout paddingTop="3"/>
						</s:layout>
						
						<s:HSlider id="labelBorderControlOpacity" height="11" width="100" minimum="0" maximum="100" value="70"/>
					</s:Group>
				</s:Group>
				
				<s:Group width="170" >
					<s:layout >
						<s:VerticalLayout paddingLeft="5" paddingTop="5" gap="5"/>
					</s:layout>
					
					<mx:Image left="5" source="{Line}"/>
					<s:Label text="Fond" color="black"/>
				</s:Group>
				<s:Group id="labelFill" width="156" >
					<s:layout >
						<s:HorizontalLayout paddingLeft="5" gap="5"/>
					</s:layout>
					
					<s:Graphic x="0" y="0">
						<mx:ColorPicker id="labelFillColorPicker" />
					</s:Graphic>
					<s:Group >
						<s:layout >
							<s:HorizontalLayout paddingTop="3"/>
						</s:layout>
						
						<s:HSlider id="labelFillControlOpacity" height="11" width="100" minimum="0" maximum="100" value="70"/>
					</s:Group>
				</s:Group>
				
				<s:Group width="170" >
					<s:layout >
						<s:VerticalLayout paddingLeft="5" paddingTop="5" gap="10"/>
					</s:layout>
					
					<mx:Image left="5" source="{Line}"/>
					<s:Label text="Label" color="black"/>
					<s:Group>
						<s:layout>
							<s:HorizontalLayout/>
						</s:layout>
						
						<s:Label paddingTop="5" text="police" width="45" color="black"/>
						<s:DropDownList width="90" id="fonts" dataProvider="{this._fonts}"/>
					</s:Group>
					<s:Group>
						<s:layout>
							<s:HorizontalLayout/>
						</s:layout>
						
						<s:Label paddingTop="5" text="style" width="45" color="black"/>
						<s:DropDownList width="90" id="fontStyles" dataProvider="{this._fontStyles}"/>
					</s:Group>
					<s:Group>
						<s:layout>
							<s:HorizontalLayout/>
						</s:layout>
						<s:Label paddingTop="5" text="taille" width="45" color="black"/><s:TextInput width="30" text="12" restrict="0-9" maxChars="3"/>
					</s:Group>
				</s:Group>
				
				<s:Group>
					<s:layout >
						<s:VerticalLayout paddingLeft="2"/>
					</s:layout>
					<mx:Image left="5" source="{Line}"/>
					<s:Label text="Appliquer à : "/>
					<s:RadioButton selected="@{this._allMode}" groupName="labelPreviewMode" label="Les labels de même style"/>
					<s:RadioButton selected="@{this._selectedMode}" groupName="labelPreviewMode" label="Ce label"/>
					<s:RadioButton selected="@{this._typeSelectedMode}" groupName="labelPreviewMode" label="Tous les labels"/>
				</s:Group>
			</s:Group>
		</s:Group>
</s:TitleWindow>
