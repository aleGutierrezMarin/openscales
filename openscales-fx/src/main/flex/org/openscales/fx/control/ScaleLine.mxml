<?xml version="1.0" encoding="utf-8"?>
<Control xmlns="http://openscales.org" 
		xmlns:fx="http://ns.adobe.com/mxml/2009" 
		xmlns:s="library://ns.adobe.com/flex/spark" 
		xmlns:mx="library://ns.adobe.com/flex/mx" 
		width="400" height="300" >

	<fx:Script>
		<![CDATA[
			import flash.events.Event;
			import flash.text.TextField;
			import flash.text.TextFormat;
			
			import org.openscales.core.Map;
			import org.openscales.core.Trace;
			import org.openscales.core.events.LayerEvent;
			import org.openscales.core.events.MapEvent;
			import org.openscales.geometry.basetypes.Pixel;
			import org.openscales.geometry.basetypes.Unit;
			import org.openscales.proj4as.ProjProjection;
			
			/**
			 * @private
			 * Maximum width of the scale line in pixels.  
			 * @default 100.
			 */
			private var _scaleMaxWidth:Number = 100;
			
			/**
			 * @private
			 * Units for zoomed out on top bar.
			 * @default km.
			 */
			private var _topOutUnits:String = "km";
			
			/**
			 * @private
			 * Units for zoomed in on top bar.  
			 * @default m.
			 */
			private var _topInUnits:String = "m";
			
			/**
			 * @private
			 * Units for zoomed out on bottom bar.
			 * @default mi.
			 */
			private var _bottomOutUnits:String = "mi";
			
			/**
			 * @private
			 * Units for zoomed in on bottom bar.
			 * @default ft
			 */
			private var _bottomInUnits:String = "ft";
			
			
			/**
			 * Get the existing map and add event listener on event Zoom end and baseLayer change.
			 *
			 * @param value
			 */
			override public function set map(value:Map):void {
				if(value != null) {
					this._map=value;	      	
					this._map.addEventListener(MapEvent.MOVE_END,updateScaleLineOnMove);
					this._map.addEventListener(LayerEvent.BASE_LAYER_CHANGED,updateScaleLineOnBaseLayerChanged);
				}
			}
			
			/**
			 * Redraw the scaleline with new parameters.
			 * 
			 * @param event the event can be a MapEvent.MOVE_END.
			 */
			public function updateScaleLineOnMove(e:MapEvent):void {
				if(e.zoomChanged)
					this.updateScale();
			}
			
			public function updateScaleLineOnBaseLayerChanged(e:LayerEvent):void {
				this.updateScale();
			}
			
			
			
			/**
			 * Given a number, round it down to the nearest 1,2,5 times a power of 10.
			 * That seems a fairly useful set of number groups to use.
			 *
			 * @param maxLen the number we're rounding down from
			 *
			 * @return the rounded number (less than or equal to maxLen)
			 */
			private function getBarLen(maxLen:Number):Number 
			{
				// nearest power of 10 lower than maxLen
				var digits:Number = int(Math.log(maxLen) / Math.log(10));
				var pow10:Number = Math.pow(10, digits);
				
				// ok, find first character
				var firstChar:Number = int(maxLen / pow10);
				
				// right, put it into the correct bracket
				var barLen:Number;
				if(firstChar > 5) {
					barLen = 5;
				} else if(firstChar > 2) {
					barLen = 2;
				} else {
					barLen = 1;
				}
				
				// scale it up the correct power of 10
				return barLen * pow10;
			}
			
			/**
			 * Update the size of the bars, and the labels which contains.
			 */
			private function updateScale():void
			{
				// Get the resolution of the map
				var mapResolution:Number = this.map.resolution;
				
				// Map has no resolution, return.
				if (!mapResolution) {return;}
				
				// get the current units of the map
				var currentBaseLayerUnits:String = ProjProjection.getProjProjection(this.map.baseLayer.projSrsCode).projParams.units;
				
				// convert the scaleMaxWidth to map units
				// The result is the max distance IN MAP UNIT, represent in the scaleline
				var maxSizeData:Number = this._scaleMaxWidth * mapResolution * Unit.getInchesPerUnit(currentBaseLayerUnits);
				
				// decide whether to use large or small scale units. it's independent of the map unit    
				var topUnits:String;		
				var bottomUnits:String;	
				if(maxSizeData > 100000) {
					topUnits = this.topOutUnits;
					bottomUnits = this._bottomOutUnits;
				} else {
					topUnits = this.topInUnits;
					bottomUnits = this._bottomInUnits;
				}
				
				// and to map units units
				var topMax:Number = maxSizeData / Unit.getInchesPerUnit(topUnits);
				var bottomMax:Number = maxSizeData / Unit.getInchesPerUnit(bottomUnits);
				
				// now trim this down to useful block length
				
				var topRounded:Number = this.getBarLen(topMax);
				var bottomRounded:Number = this.getBarLen(bottomMax);
				
				// and back to display units
				topMax = topRounded / Unit.getInchesPerUnit(currentBaseLayerUnits) * Unit.getInchesPerUnit(topUnits);
				bottomMax = bottomRounded / Unit.getInchesPerUnit(currentBaseLayerUnits) * Unit.getInchesPerUnit(bottomUnits);
				
				// and to pixel units
				var topPx:Number = topMax / mapResolution;
				var bottomPx:Number = bottomMax / mapResolution;
				
				// update the top rect width
				scaleTopWidth.width = Math.round(topPx);
				scaleBottomWidth.width = Math.round(bottomPx);
			
				scaleTopValue.text = topRounded + " " + topUnits ;
				scaleBottomValue.text = bottomRounded + " " + bottomUnits;
	
			}	
			
			// GETTERS AND SETTERS
			
			/**
			 * Maximum width of the scale line in pixels. 
			 */
			public function get scaleMaxWidth():Number {
				return this._scaleMaxWidth;
			}
			
			/**
			 * @private
			 */
			public function set scaleMaxWidth(value:Number):void {
				this._scaleMaxWidth = value;
			}
			
			/**
			 * Units for zoomed out on top bar.
			 */
			public function get topOutUnits():String {
				return this._topOutUnits;
			}
			
			/**
			 * @private
			 */
			public function set topOutUnits(value:String):void {
				this._topOutUnits = value;
			}
			
			/**
			 * Units for zoomed in on top bar. 
			 */
			public function get topInUnits():String {
				return this._topInUnits;
			}
			
			/**
			 * @private
			 */
			public function set topInUnits(value:String):void {
				this._topInUnits = value;
			}
			
			/**
			 * Units for zoomed out on bottom bar.
			 */
			public function get bottomOutUnits():String {
				return this._bottomOutUnits;
			}
			
			/**
			 * @private
			 */
			public function set bottomOutUnits(value:String):void {
				this._bottomOutUnits = value;
			}
			
			/**
			 * Units for zoomed in on bottom bar.
			 */
			public function get bottomInUnits():String {
				return this._bottomInUnits;
			}
			
			/**
			 * @private
			 */
			public function set bottomInUnits(value:String):void {
				this._bottomInUnits = value;
			}
			
		]]>
	</fx:Script>
	

	<s:Label id="scaleTopValue" x="13" y="0" text="text" />
	<s:Rect id="scaleTopWidth" x="13" y="12" height="8">     
		<s:fill>
			<s:SolidColor color="0x666666" alpha=".5"/>
		</s:fill>
	</s:Rect>
	
	<s:Label id="scaleBottomValue" x="13" y="33" text="text" />
	<s:Rect id="scaleBottomWidth" x="13" y="23" height="8">
		<s:fill>
			<s:SolidColor color="0x666666" alpha=".5"/>
		</s:fill>
	</s:Rect>
	
</Control>
