<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx" 
		 creationComplete="onCreationComplete(event)"
		 width="300" height="350">
	<fx:Declarations>
		<!-- Placer ici les éléments non visuels (services et objets de valeur, par exemple). -->
	</fx:Declarations>
	
	<s:layout>
		<s:VerticalLayout paddingBottom="10" paddingTop="10" paddingLeft="10" paddingRight="10"/>
	</s:layout>
	
	<s:Label id="layerName" text="{this.nameLabel}" width="40%" />
	<s:TextInput id="inputName"  width="60%" />
	
	<s:Group>
		
		<s:layout>
			<s:HorizontalLayout />
		</s:layout>
		
		<s:Group id="formatGroup" >
			<s:Label id="formatLabel" text="{this.formatLabelText}" />
			
			<s:DropDownList id="listFormat"
							change="{this.formatChange(event)}"
							dataProvider="{this.formatProvider}"
							selectedIndex="{this.selectedFormat}" />
		</s:Group>
		
		<s:Group id="versionGroup" visible="false">
			
			<s:Label id="version" text="{this.versionLabel}" width="40%" />
			<s:DropDownList id="listVersion"
							change="{this.versionChange(event)}"
							dataProvider="{this.versionProvider}"
							selectedIndex="{this.selectedVersion}" 
							width="60%"/>
		</s:Group>
	</s:Group>
	
	
	
	
	
	<s:VGroup paddingLeft="10" paddingTop="10">
		<s:RadioButton groupName="source" 
					   id="url"
					   label="{this.urlLabelText}" 
					   width="150" 
					   click="selectUrl(event);"/>
		<s:RadioButton groupName="source" 
					   id="locale"
					   label="{this.localeLabelText}" 
					   width="150" 
					   click="selectLocale(event);"/>
	</s:VGroup>
	

	<s:TextInput id="urlInput" visible="false" />
	<s:Button id="localeButton" visible="false" label="{this.browseLabel}"
			  click="{this.browseFiles()}"/>
	<s:Label id="selectedLocaleFile" visible="false" />
	
	<s:Label visible="false" id="nameError" 
			 text="{this.nameLabelError}" width="{this.width*0.7}" bottom="0" />
	<s:Label visible="false" id="sourceError" 
			 text="{this.sourceLabelError}" width="{this.width*0.7}" bottom="0" />
	
	
	<s:Button id="validateImportButton" label="{this.importLabel}" click="{this.validateImportFeature(event)}" />

	
	<fx:Script>
		<![CDATA[
			import mx.collections.ArrayCollection;
			
			import org.openscales.core.events.I18NEvent;
			import org.openscales.core.i18n.Catalog;
			import org.openscales.core.layer.KML;
			import org.openscales.core.layer.ogc.GML;
			import org.openscales.core.layer.ogc.GPX;
			import org.openscales.core.layer.ogc.GeoRss;
			import org.openscales.core.layer.osm.OSM;
			
			/**
			 * Translation for label Name
			 */
			[Bindable]
			public var nameLabel:String = Catalog.getLocalizationForKey('drawing.name');
			
			
			/**
			 * THe valide import text
			 */
			[Bindable]
			public var importLabel:String = Catalog.getLocalizationForKey('drawing.import');
			
			/**
			 * The label url value
			 */
			[Bindable]
			public var urlLabelText:String = Catalog.getLocalizationForKey('drawing.url');
			
			/**
			 * The label locale file value
			 */
			[Bindable]
			public var localeLabelText:String = Catalog.getLocalizationForKey('drawing.locale');
			
			/**
			 * The label format value
			 */
			[Bindable]
			public var formatLabelText:String = Catalog.getLocalizationForKey('drawing.format');	
			
			/**
			 * Translation for label Version
			 */
			[Bindable]
			public var versionLabel:String = Catalog.getLocalizationForKey('drawing.version');
			
			/**
			 * Translation for label Name error
			 */
			[Bindable]
			public var nameLabelError:String = Catalog.getLocalizationForKey('drawing.nameerror');
			
			/**
			 * Translation for source (url or locale) error (empty)
			 */
			[Bindable]
			public var sourceLabelError:String = Catalog.getLocalizationForKey('drawing.sourceerror');
			
			/**
			 * Browse files
			 */
			[Bindable]
			public var browseLabel:String = Catalog.getLocalizationForKey('drawing.browse');
			
			/**
			 * The current selected format
			 * @default the first one : 0
			 */
			[Bindable]
			public var selectedFormat:Number = 0;
			
			/**
			 * Datas in the format dropdownlist
			 */
			[Bindable]
			public var formatProvider:ArrayCollection = new ArrayCollection();
			
			/**
			 * Contains all the format supported
			 */
			[Bindable]
			public var supportedFormat:Array = null;
			
			/**
			 * Contains all the version supported
			 */
			[Bindable]
			public var supportedVersion:Array = null;
			
			/**
			 * Datas for the version dropdownList
			 */
			[Bindable]
			public var versionProvider:ArrayCollection = new ArrayCollection();
			
			/**
			 * The current selected version
			 * @default the first one : 0
			 */
			[Bindable]
			public var selectedVersion:Number = 0;
			
			/**
			 * @private
			 * Datas contains in the locale file selected
			 * @default null
			 */
			private var _datasFile:ByteArray = null;
			
			/**
			 * The ImportFeature linked to the current pop up
			 */
			private var _importFeature:ImportFeature = null;
			
			/**
			 * Allowed file types
			 */
			private static const FILE_TYPES:Array = [new FileFilter("Text File", "*.xml;*.kml,*.gml")];

			/**
			 * Selected source type
			 */
			[Bindable]
			public var selectedSource:int = -1; 
			
			/**
			 * The file reference
			 */
			private var fileReference:FileReference;

			public function onCreationComplete(event:Event):void
			{
				if(!this.supportedFormat)
				{
					// init all available formats
					this.supportedFormat = new Array();
					this.supportedFormat[0] = "KML";
					this.supportedFormat[1] = "GPX";
					this.supportedFormat[2] = "GeoRSS";
					this.supportedFormat[3] = "GML";
				}
				
				if(!this.supportedVersion)
				{
					this.supportedVersion = new Array();
					this.supportedVersion[0] = [""]; 
					this.supportedVersion[1] = ["1.0.0","1.1.0"]; // GPX
					this.supportedVersion[2] = [""]; 
					this.supportedVersion[3] = ["2.0.0", "2.1.0", "3.2.0", "3.2.1"]; // GML
				}
				
				// init formats :
				for each(var format:String in supportedFormat)
				{
					this.formatProvider.addItem(format);
				}
				
				// init versions :
				for each(var version:String in supportedVersion[this.selectedFormat])
				{
					this.versionProvider.addItem(version);
				}
			}
			
			/**
			 * Call when a change event if dispatch by the dropdownlist linked to formats
			 * Update the current format value according to the new selection
			 * And then refresh the version list
			 */
			public function formatChange(event:Event):void
			{
				if(event)
				{
					var list:DropDownList = event.currentTarget as DropDownList
					this.selectedFormat = list.selectedIndex;
					
					this.updateVersion();
				}
			}
			
			/**
			 * Call when a change event if dispatch by the dropdownlist linked to versions
			 * Update the current version value according to the new selection
			 */
			public function versionChange(event:Event):void
			{
				if(event)
				{
					var list:DropDownList = event.currentTarget as DropDownList
					this.selectedVersion = list.selectedIndex;
				}	
			}
			
			/**
			 * Change versions value according to current format selection
			 */
			public function updateVersion():void
			{
				this.versionProvider.removeAll();
				this.selectedVersion = -1;
				for each(var version:String in supportedVersion[this.selectedFormat])
				{
					this.versionProvider.addItem(version);
				}
				this.selectedVersion = 0;
				
				if(this.versionProvider.length > 1)
					versionGroup.visible = true;
				else
					versionGroup.visible = false;
			}
			
			/**
			 * Change the text values on Map Language changed
			 * @param event The I18N event received
			 */
			public function onMapLanguageChange(event:I18NEvent):void 
			{
				this.importLabel = Catalog.getLocalizationForKey('drawing.import');
				this.urlLabelText = Catalog.getLocalizationForKey('drawing.url');
				this.localeLabelText = Catalog.getLocalizationForKey('drawing.locale');
				
				this.localeLabelText = Catalog.getLocalizationForKey('drawing.name');
				this.localeLabelText = Catalog.getLocalizationForKey('drawing.format');
				this.localeLabelText = Catalog.getLocalizationForKey('drawing.version');
				
			}
			
			/**
			 * Called when the user validate the import
			 * First check that locale file or url is not empty and then create a new Layer with the file data
			 * 
			 * @param event The MouseEvent received
			 */
			public function validateImportFeature(event:MouseEvent):void
			{
				// get and check empty field
				var valide:Boolean = true;
				
				// get the datas fields :
				var name:String = String(this.inputName.text).replace(/\s/g,"");
				var format:String = this.formatProvider.getItemAt(this.selectedFormat) as String;
				var version:String = this.versionProvider.getItemAt(this.selectedVersion) as String;
				var url:String = (this.urlInput.text).replace(/\s/g,"");
				var source:String = (this.urlInput.text).replace(/\s/g,"");
				
				if(!name || name=="" || !this.validateName(name))
				{
					nameError.visible = true;
					valide = false;
				}
				
				if(selectedSource == 0)
				{
					sourceError.visible = true;
					valide = false;
				}	
				
				if(selectedSource == 1 && (!url || url=="") )
				{
					sourceError.visible = true;
					valide = false;
				}	
					
				if(selectedSource == 2 && !_datasFile)
				{
					sourceError.visible = true;
					valide = false;
				}	
				
				
				if(!valide)
					return;
				
				nameError.visible = false;
				sourceError.visible = false;
				
				var xml:XML = null;
				
				if(valide)
				{
					switch(format)
					{
						case "KML":
						
							var kml:KML = null;
							
							if(selectedSource == 1)
							{
								kml = new KML(name, url);
								this.importFeature.map.addLayer(kml);
							}
							
							else // locale file
							{
								xml = new XML(_datasFile.readUTFBytes(_datasFile.bytesAvailable));
								kml = new KML(name, null, xml);
								this.importFeature.map.addLayer(kml);
							}
							
							
						
						break;
						
						case "GPX":
						
							var gpx:GPX = null;
							
							if(selectedSource == 1)
							{
								gpx = new GPX(name, version, url);
								this.importFeature.map.addLayer(gpx);
							}
							else // locale file
							{
								xml = new XML(_datasFile.readUTFBytes(_datasFile.bytesAvailable));
								
								gpx = new GPX(name, version, null, xml);
								this.importFeature.map.addLayer(gpx);
							}
						
							
						break;
						
						case "GeoRSS":
							
							if(selectedSource == 1)
							{
								var geoRss:GeoRss = new GeoRss(name, url);
								this.importFeature.map.addLayer(geoRss);
							}
							else // locale file
							{
								
							}
							
							
						break;
						
						case "OSM":
						
							if(selectedSource == 1)
							{
								var osm:OSM = new OSM(name, url);
								this.importFeature.map.addLayer(osm);
							}
							else // locale file
							{
								
							}
							
						break;
						
						case "GML":
						
							var gml:GML = null;
							
							if(selectedSource == 1)
							{
								gml = new GML(name, version, this.importFeature.map.projection, url);
								this.importFeature.map.addLayer(gml);
							}
							else // locale file
							{
								xml = new XML(_datasFile.readUTFBytes(_datasFile.bytesAvailable));
								
								gml = new GML(name, version, this.importFeature.map.projection, null, xml);
								this.importFeature.map.addLayer(gml);
							}
							
						break;
						
					}	
					this.importFeature.closePopUp();
				}
			}
			
			/**
			 * @private
			 */
			private function validateName(value:String):Boolean
			{
				if(this.importFeature.map)
				{
					if(this.importFeature.map.getLayerByName(value)==null)
						return true;
				}
				return false;
			}
			
			/**
			 * Select url procces for import
			 */
			public function selectUrl(event:MouseEvent):void
			{
				selectedSource = 1;
				urlInput.visible = true;
				localeButton.visible = false;
				selectedLocaleFile.visible = true;
			}
			
			/**
			 * Select locale process for import
			 */
			public function selectLocale(event:MouseEvent):void
			{
				selectedSource = 2;
				urlInput.visible = false;
				selectedLocaleFile.visible = false;
				localeButton.visible = true;
			}
			
			/**
			 * Browse FileSystem to select the locale file to import
			 */
			public function browseFiles():void
			{
				//create the FileReference instance
				fileReference = new FileReference();
				
				//listen for when they select a file
				fileReference.addEventListener(Event.SELECT, onFileSelect);
				
				//listen for when then cancel out of the browse dialog
				fileReference.addEventListener(Event.CANCEL,onCancel);
				
				//open a native browse dialog that filters for text files
				fileReference.browse(FILE_TYPES);
			}
			
			/**
			 * Called when a file is selected on 
			 */
			public function onFileSelect(e:Event):void
			{
				//listen for when the file has loaded
				fileReference.addEventListener(Event.COMPLETE, onLoadComplete);
				
				//listen for any errors reading the file
				fileReference.addEventListener(IOErrorEvent.IO_ERROR, onLoadError);
				
				//load the content of the file
				fileReference.load();
			}
			
			/**
			 * Called when the user cancel the browse process
			 */
			public function onCancel(e:Event):void				
			{
				trace("File Browse Canceled");
				fileReference = null;
			}
			
			/**
			 * private
			 * called when the file has completed loading
			 */
			private function onLoadComplete(e:Event):void
			{
				//get the data from the file as a ByteArray
				_datasFile = fileReference.data;
				
				selectedLocaleFile.text = fileReference.name;
				
				//clean up the FileReference instance
				fileReference = null;
			}
			
			//called if an error occurs while loading the file contents
			private function onLoadError(e:IOErrorEvent):void
			{
				trace("Error loading file : " + e.text);
			}
			
			
			/**
			 * Return the importFeature linked to theb current form
			 */
			public function get importFeature():ImportFeature
			{
				return _importFeature;
			}
			
			/**
			 * @private
			 */
			public function set importFeature(value:ImportFeature):void
			{
				_importFeature = value;
				if(_importFeature.map)
				{
					this._importFeature.map.addEventListener(I18NEvent.LOCALE_CHANGED, this.onMapLanguageChange);
				}
			}

		]]>
	</fx:Script>
	
</s:Group>
