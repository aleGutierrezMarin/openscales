<?xml version="1.0" encoding="utf-8"?>
<os:IconButton xmlns:fx="http://ns.adobe.com/mxml/2009"
			   xmlns:s="library://ns.adobe.com/flex/spark"
			   xmlns:mx="library://ns.adobe.com/flex/mx"
			   xmlns:os="org.openscales.fx.control.*"
			   implements="org.openscales.core.control.IControl"
			   toolTip="{this.tooltip}"
			   icon="{_btnLabel}"
			   alpha="{_alpha}"
			   width="25"
			   height="25"
			   click="onClick()"
			   enabled="{active}">
	
	<fx:Script>
		<![CDATA[
			import mx.events.FlexEvent;
			import mx.managers.PopUpManager;
			
			import org.openscales.core.Map;
			import org.openscales.core.control.IControl;
			import org.openscales.core.events.DrawingEvent;
			import org.openscales.core.events.FeatureEvent;
			import org.openscales.core.events.I18NEvent;
			import org.openscales.core.events.LayerEvent;
			import org.openscales.core.events.MapEvent;
			import org.openscales.core.feature.Feature;
			import org.openscales.core.feature.LabelFeature;
			import org.openscales.core.feature.PointFeature;
			import org.openscales.core.handler.IHandler;
			import org.openscales.core.i18n.Catalog;
			import org.openscales.core.layer.VectorLayer;
			import org.openscales.core.style.Style;
			import org.openscales.fx.control.drawing.popup.EditLabel;
			import org.openscales.fx.control.layer.LayerManager;
			import org.openscales.geometry.LabelPoint;
			import org.openscales.geometry.Point;
			import org.openscales.geometry.basetypes.Location;
			import org.openscales.geometry.basetypes.Pixel;
			
			import spark.components.Button;
			import spark.components.HGroup;
			import spark.components.Label;
			import spark.components.TextInput;
			import spark.components.TitleWindow;
			
			[Bindable]
			private var _alpha:Number = 0.3;
			
			[Bindable]
			private var tooltip:String = Catalog.getLocalizationForKey('drawing.label');
			
			[Bindable]
			[Embed(source="/assets/images/icons/Icons-11.png")]
			private var _btnLabel:Class;
			
			private var _active:Boolean = true;
			private var _drawingActivated:Boolean = false;
			private var _isClick:Boolean = false;
			private var _style:Style = Style.getDefinedLabelStyle("Arial",12,0,false,false);
			private var _map:Map;
			private var _target:VectorLayer;
			private var _popup:EditLabel; 
			

			private var _feature:LabelFeature;
			private var _drawingMode:String;
			
			/**
			 * Indicates for Drawing mode
			 * multiple : tools are in the LayerSwitcher
			 * unique : tools are in the DrawingToolbar
			 */
			[Bindable]
			public function get drawingMode():String{
				
				return _drawingMode;
			}
			
			public function set drawingMode(value:String):void{
				_drawingMode = value;
			}
			
			/**
			 * Flag for activating and deactivating the component
			 * @default true;
			 */
			[Bindable]
			public function get active():Boolean{
				
				return _active;
			}
			public function set active(value:Boolean):void{
				
				_active = value;
			}
			
			/**
			 * Drawing style of the label
			 */
			public function get style():Style{
				
				return this._style;
			}
			public function set style(value:Style):void{
				
				this._style = value;
			}
			
			/**
			 * Map controled by this control
			 */
			public function get map():Map{
				
				return this._map;
			}
			public function set map(value:Map):void{
				
				this._map = value;
				this._map.addEventListener(DrawingEvent.DRAW_HANDLER_ACTIVATED, onChangeActiveHandler);
				this._map.addEventListener(DrawingEvent.EDIT_HANDLER_ACTIVATED, onChangeActiveHandler);
				this._map.addEventListener(DrawingEvent.MOVE_HANDLER_ACTIVATED, onChangeActiveHandler);
				this._map.addEventListener(DrawingEvent.DELETE_HANDLER_ACTIVATED, onChangeActiveHandler);
				this._map.addEventListener(DrawingEvent.SELECT_HANDLER_ACTIVATED, onChangeActiveHandler);
				this._map.addEventListener(DrawingEvent.CHANGE_ACTIVE_LAYER, onChangeActiveLayer);
				this._map.addEventListener(I18NEvent.LOCALE_CHANGED, onMapLanguageChange);
				this._map.addEventListener(MapEvent.MOUSE_CLICK, this.showPopUp);
			}
			
			/**
			 * To create a LabelFeature
			 */
			private function showPopUp(event:Event):void{
				
				if(this._drawingActivated)
				{
					var pixel:Pixel = new Pixel(this._map.mouseX, this._map.mouseY);
					var labelLocation:Location = this._map.getLocationFromMapPx(pixel);
					var pt:LabelPoint = new LabelPoint(null, labelLocation.x, labelLocation.y);
					pt.projection = this.map.projection;
					_feature = new LabelFeature(pt);
					_feature.layer = this.target;
					
					_popup = EditLabel(PopUpManager.createPopUp(this, EditLabel));
					_popup.map = this.map;
					_popup.okButton.addEventListener(MouseEvent.CLICK,createFeature);
					this.map.addEventListener(LayerEvent.LAYER_REMOVED, checkIfLayerStillAlive);
				}
			}
			
			/**
			 * Method that is used to check if the target has been remove and close the popup to avoid trying 
			 * to add a label to a null layer
			 */
			private function checkIfLayerStillAlive(event:LayerEvent):void
			{
				if (!this._target)
				{
					this._popup.discardPopup();
					this.map.removeEventListener(LayerEvent.LAYER_REMOVED, checkIfLayerStillAlive);
				}
			}
			
			private function createFeature(event:MouseEvent):void{
				var text:String = _popup.input.text;
				var rotation:Number = _popup.sliderRotation.value;
				if(_feature && text.length>0){
					_feature.layer.scaleX = 1;
					_feature.layer.scaleY = 1;
					var tf:TextFormat = new TextFormat();
					tf.size = 13;
					_feature.labelPoint.label.setTextFormat(tf);
					_feature.labelPoint.label.text = text;
					_feature.labelPoint.label.background = true;
					_feature.labelPoint.label.backgroundColor = 0xFFFFFF;
					
					_feature.labelPoint.label.rotationZ = rotation;
					
					var middlePixel:Pixel = _feature.layer.map.getMapPxFromLocation(new Location(_feature.labelPoint.x, _feature.labelPoint.y, _feature.layer.map.projection));
					var leftPixel:Pixel = new Pixel();
					var rightPixel:Pixel = new Pixel();
					
					
					
					leftPixel.x = middlePixel.x - _feature.labelPoint.label.width / 2;
					leftPixel.y = middlePixel.y + _feature.labelPoint.label.height / 2;
					rightPixel.x = middlePixel.x + _feature.labelPoint.label.width / 2;
					rightPixel.y = middlePixel.y - _feature.labelPoint.label.height / 2;
					
					var a:Array = getLabelBarycenter(middlePixel.x, middlePixel.y);
					var p2:Pixel = a.pop();
					var p1:Pixel = a.pop();
					
					rightPixel = p1;
					leftPixel = p2;
					
					
					/*
					x = dX + pointLocation.x / resolution;
					y = dY - pointLocation.y / resolution;
					var center:Pixel = getLabelBarycenter(x,y);
					
					var b:Bounds = this.labelPoint.bounds;
					
					this.labelPoint.label.x = x;
					// - this.labelPoint.label.width / 2;
					this.labelPoint.label.y = y;
					// - this.labelPoint.label.height / 2;
					*/
					var rightLoc:Location = _feature.layer.map.getLocationFromMapPx(rightPixel);
					var leftLoc:Location = _feature.layer.map.getLocationFromMapPx(leftPixel);
					_feature.labelPoint.updateBounds(leftLoc.x,leftLoc.y,rightLoc.x,rightLoc.y,_feature.layer.map.projection);
					_feature.layer.addFeature(_feature);
					_feature.draw();
				}
				_feature.layer.map.dispatchEvent(new FeatureEvent(FeatureEvent.FEATURE_DRAWING_END,_feature));
			}
			
			public function getLabelBarycenter(x:Number, y:Number):Array
			{
				var angle:Number = (_feature.labelPoint.label.rotationZ * Math.PI) / 180;
				var anglebis2:Number = 90 - _feature.labelPoint.label.rotationZ;
				var angle2:Number = (anglebis2 * Math.PI) / 180;
				
				var width:Number = _feature.labelPoint.label.width;
				var height:Number = _feature.labelPoint.label.height;
				
				
				var p1:Pixel = new Pixel(x, y);
				var p2:Pixel = new Pixel( p1.x + (Math.cos(angle)*width), 
				p1.y + (Math.sin(angle) * width));
				var p3:Pixel = new Pixel(p1.x + Math.cos((Math.PI/2) - angle)*height, 
				p1.y + Math.sin((Math.PI/2)- angle) * height);
				var p4:Pixel = new Pixel(p3.x + p2.x - p1.x, 
				p3.y + p2.y - p1.y);
				
				/*
				var p1:Pixel = new Pixel(x,y);
				var p2:Pixel = new Pixel(p1.x + (width * Math.cos(angle)),
					p1.y + (width * Math.sin(angle)));
				var p3:Pixel = new Pixel(p2.x - (height * Math.cos(angle2)),
					p2.y + (height * Math.sin(angle2)));
				var p4:Pixel = new Pixel(p1.x - (height * Math.cos(angle2)),
					p1.y + (height * Math.sin(angle2)));
				*/
				// On a besoin des points 2 et 4 pour créer la bounding box
				// On a leurs coordonnées
				// Il suffit donc d'appliquer le vecteur vect2 à chacun d'eux en sens inverse
				
				var xmin:Number = p1.x;
				var xmax:Number = p1.x;
				var ymin:Number = p1.y;
				var ymax:Number = p1.y;
				
				/*
				var vect:Pixel = new Pixel((p2.x - p1.x) / 2, (p2.y - p1.y) / 2);
				var vect2:Pixel = new Pixel((p3.x - p2.x) / 2, (p3.y - p2.y) / 2);
				
				var center:Pixel = new Pixel(p1.x - vect.x - vect2.x, p1.y - vect.y - vect2.y);
				
				var p2n:Pixel = new Pixel(p2.x - vect.x - vect2.x, p2.y - vect.y - vect2.y);
				var p4n:Pixel = new Pixel(p4.x - vect.x - vect2.x, p4.y - vect.y - vect2.y);
				*/
				if (p2.x > xmax) xmax = p2.x;
				if (p2.x < xmin) xmin = p2.x;
				if (p2.y > ymax) ymax = p2.y;
				if (p2.y < ymin) ymin = p2.y;
				
				if (p3.x > xmax) xmax = p3.x;
				if (p3.x < xmin) xmin = p3.x;
				if (p3.y > ymax) ymax = p3.y;
				if (p3.y < ymin) ymin = p3.y;
				
				if (p4.x > xmax) xmax = p4.x;
				if (p4.x < xmin) xmin = p4.x;
				if (p4.y > ymax) ymax = p4.y;
				if (p4.y < ymin) ymin = p4.y;
				
				var p2n:Pixel = new Pixel(xmin, ymax);
				var p4n:Pixel = new Pixel(xmax, ymin);
				
				var a:Array = new Array();
				a.push(p2n);
				a.push(p4n);
				
				
				
				//if (this.labelPoint.label.rotationZ != 0)
				//{
					//center.x = x;
					//center.y = y;
				//}
				
				
				
				/*
				if (p2.x > xmax) xmax = p2.x;
				if (p2.x < xmin) xmin = p2.x;
				if (p2.y > ymax) ymax = p2.y;
				if (p2.y < ymin) ymin = p2.y;
				
				if (p3.x > xmax) xmax = p3.x;
				if (p3.x < xmin) xmin = p3.x;
				if (p3.y > ymax) ymax = p3.y;
				if (p3.y < ymin) ymin = p3.y;
				
				if (p4.x > xmax) xmax = p4.x;
				if (p4.x < xmin) xmin = p4.x;
				if (p4.y > ymax) ymax = p4.y;
				if (p4.y < ymin) ymin = p4.y;
				*/
				
				return a;
			}
			
			/**
			 * Position (x,y) of the handler
			 */
			public function get position():Pixel{
				
				return new Pixel(x,y);
			}
			public function set position(value:Pixel):void{
				
				if(value){
					x = value.x;
					y = value.y;
				}
			}
			
			/**
			 * Layer the features will be drawn on
			 */
			[Bindable]
			public function get target():VectorLayer{
				
				return this._target;
			}
			public function set target(value:VectorLayer):void{
				this.disactivate();
				this._target = value;
			}
			
			/**
			 * To activate or disactivate the handler
			 */
			public function activate():void{
				
				this._drawingActivated = true;
				_alpha = 1;
				this._map.doubleclickZoomEnabled = false;
			}
			public function disactivate():void{
				
				this._drawingActivated = false;
				_alpha = 0.3;
			}
			
			/**
			 * On button click, dispatch a DrawingEvent.DRAW_HANDLER_ACTIVATED event
			 */
			public function onClick():void{
				
				if(!this.target)
					return;
				
				// Disactive this component
				var evt:DrawingEvent;
				if(this._drawingActivated){
					disactivate();
					this._map.doubleclickZoomEnabled = true;
					return;
				}
				
				// Disactive others drawing tools components
				this._isClick = true;
				evt = new DrawingEvent(DrawingEvent.DRAW_HANDLER_ACTIVATED);
				evt.activeHandler = this.id;
				evt.layer = this.target;
				this._map.dispatchEvent(evt);
				
				// Disactive mesure tools components
				evt = new DrawingEvent(DrawingEvent.CHANGE_ACTIVE_HANDLER);
				evt.activeHandler = null;
				this._map.dispatchEvent(evt);
				
				// Active this component
				activate();
			}
			
			/**
			 * Check the handler when a DrawingEvent.DRAW_HANDLER_ACTIVATED or
			 * DrawingEvent.EDIT_HANDLER_ACTIVATED or DrawingEvent.MOVE_HANDLER_ACTIVATED
			 * or DrawingEvent.SELECT_HANDLER_ACTIVATED event occured
			 */
			private function onChangeActiveHandler(evt:DrawingEvent):void{
				
				if(this._drawingActivated && !this._isClick)
					disactivate();
				else
					this._isClick = false;
			}
			
			/**
			 * Update the target on active layer changed
			 */
			private function onChangeActiveLayer(evt:DrawingEvent):void{
				
				if(this.drawingMode == 'unique')
				{
					if(this._drawingActivated){
						disactivate();
						this._map.mouseNavigationEnabled = true;
						this._map.panNavigationEnabled = true;
						this._map.zoomNavigationEnabled = true;
						this._map.keyboardNavigationEnabled = true;
					}
					
					this.target = evt.layer;
					
					if(!evt.layer || !evt.layer.editable) {
						this.buttonMode = false;
						this.useHandCursor = false;
						this.toolTip = Catalog.getLocalizationForKey('drawing.selectDrawingLayer');
					} else {
						this.buttonMode = true;
						this.useHandCursor = true;
						this.toolTip = Catalog.getLocalizationForKey('drawing.label');
					}
				}
			}
			
			/**
			 * Update texts on map language changed
			 */
			public function onMapLanguageChange(event:I18NEvent):void{
				
				this.tooltip = Catalog.getLocalizationForKey('drawing.label');
			}
			
			// Unused functions
			public function draw():void{
				
				this.invalidateDisplayList();
			}
			public function destroy():void{}
		]]>
	</fx:Script>			
</os:IconButton>
