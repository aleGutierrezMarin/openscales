<?xml version="1.0" encoding="utf-8"?>
<os:IconButton xmlns:fx="http://ns.adobe.com/mxml/2009"
			   xmlns:s="library://ns.adobe.com/flex/spark"
			   xmlns:mx="library://ns.adobe.com/flex/mx"
			   xmlns:os="http://openscales.org"
			   implements="org.openscales.core.control.IControl"
			   toolTip="Edit features"
			   icon="{_btnEdit}"
			   width="25"
			   height="25"
			   click="onClick()"
			   enabled="{active}">
	
	<fx:Script>
		<![CDATA[
			import org.openscales.core.Map;
			import org.openscales.core.control.IControl;
			import org.openscales.core.events.DrawingEvent;
			import org.openscales.core.events.FeatureEvent;
			import org.openscales.core.events.I18NEvent;
			import org.openscales.core.feature.Feature;
			import org.openscales.core.feature.PointFeature;
			import org.openscales.core.handler.IHandler;
			import org.openscales.core.handler.feature.SelectFeaturesHandler;
			import org.openscales.core.handler.feature.draw.FeatureLayerEditionHandler;
			import org.openscales.core.layer.VectorLayer;
			import org.openscales.core.style.Style;
			import org.openscales.geometry.Point;
			import org.openscales.geometry.basetypes.Location;
			import org.openscales.geometry.basetypes.Pixel;
			
			[Bindable]
			[Embed(source="/assets/images/icons/Icons-08.png")]
			private var _btnEdit:Class;
			private var _active:Boolean = true;
			private var _handler:FeatureLayerEditionHandler = new FeatureLayerEditionHandler();
			private var _selectFeaturesHandler:SelectFeaturesHandler;
			private var _previousSelectFeaturesHandler:SelectFeaturesHandler = null;
			
			/**
			 * Flag for activating and deactivating the component
			 * @default true;
			 */
			[Bindable]
			public function get active():Boolean{
				
				return _active;
			}
			public function set active(value:Boolean):void{
				
				_active = value;
				if(! _active){
					_handler.active = false;
				}
			}
			
			/**
			 * Drawing style of the virtual points
			 */
			public function get virtualStyle():Style{
				
				return (this._handler as FeatureLayerEditionHandler).virtualStyle;
			}
			public function set virtualStyle(value:Style):void{
				
				(this._handler as FeatureLayerEditionHandler).virtualStyle = value;
			}
			
			/**
			 * Map controled by this control
			 */
			public function get map():Map{
				
				return _handler.map;
			}
			public function set map(value:Map):void{
				
				_handler.map = value;
				_handler.map.addEventListener(DrawingEvent.DRAW_HANDLER_ACTIVATED, onChangeActiveHandler);
				_handler.map.addEventListener(DrawingEvent.EDIT_HANDLER_ACTIVATED, onChangeActiveHandler);
				_handler.map.addEventListener(DrawingEvent.MOVE_HANDLER_ACTIVATED, onChangeActiveHandler);
				_handler.map.addEventListener(DrawingEvent.SELECT_HANDLER_ACTIVATED, onChangeActiveHandler);
				_handler.map.addEventListener(FeatureEvent.FEATURE_SELECTED, onFeatureUpdateSelection);
				_handler.map.addEventListener(FeatureEvent.FEATURE_UNSELECTED, onFeatureUpdateSelection);
			}
			
			/**
			 * Position (x,y) of the handler
			 */
			public function get position():Pixel{
				
				return new Pixel(x,y);
			}
			public function set position(value:Pixel):void{
				
				if(value){
					x = value.x;
					y = value.y;
				}
			}
			
			/**
			 * Layer the features will be edited 
			 */
			public function get target():VectorLayer{
				
				return _handler.layerToEdit;
			}
			public function set target(value:VectorLayer):void{
				
				_handler.layerToEdit = value;
			}
			
			/**
			 * To activate or disactivate the handler
			 */
			private function activate():void{
				
				_handler.active = true;
				
				for each(var ih:IHandler in this.map.controls)
				{
					if(ih is SelectFeaturesHandler && ih != this._selectFeaturesHandler)
					{
						// Store the existing SelectFeaturesHandler
						this._previousSelectFeaturesHandler = (ih as SelectFeaturesHandler);
						(ih as SelectFeaturesHandler).map = null;
						this.map.removeControl(ih);
					}
				}
				// Add a new SelectFeaturesHandler
				this._selectFeaturesHandler = new SelectFeaturesHandler(this.map,true,true,false,false);
				this._selectFeaturesHandler.layers[0] = this.target;
				this._selectFeaturesHandler.clickOut = false;
				this._selectFeaturesHandler.toggle = false;
			}
			private function disactivate():void{
				
				_handler.active = false;
				
				// Manage the new SelectFeaturesHandler
				this._selectFeaturesHandler.clearSelection();
				this._selectFeaturesHandler.map = null;
				this.map.removeControl(this._selectFeaturesHandler);
				
				// Add the previous SelectFeaturesHandler
				if(this._previousSelectFeaturesHandler)
					this._previousSelectFeaturesHandler.map = this.map;
			}
			
			/**
			 * On button click, dispatch a DrawingEvent.EDIT_HANDLER_ACTIVATED event
			 */
			private function onClick():void{
				
				var evt:DrawingEvent = new DrawingEvent(DrawingEvent.EDIT_HANDLER_ACTIVATED);
				evt.activeHandler = this.id;
				evt.layer = this.target;
				_handler.map.dispatchEvent(evt);
				activate();
			}
			
			/**
			 * Check the handler when a DrawingEvent.DRAW_HANDLER_ACTIVATED or
			 * DrawingEvent.EDIT_HANDLER_ACTIVATED or DrawingEvent.MOVE_HANDLER_ACTIVATED
			 * or DrawingEvent.SELECT_HANDLER_ACTIVATED event occured
			 */
			private function onChangeActiveHandler(evt:DrawingEvent):void{
				
				if(_handler.active && (this.id != evt.activeHandler || this.target != evt.layer))
					disactivate();
			}
			
			/**
			 * Update the features to edit when a FeatureEvent.FEATURE_SELECTED or
			 * FeatureEvent.FEATURE_UNSELECTED event occured
			 */
			private function onFeatureUpdateSelection(evt:FeatureEvent):void{
				
				if(_handler.active)
					_handler.editionModeStop();
				
				if(this._selectFeaturesHandler)
					_handler.featuresToEdit = this._selectFeaturesHandler.selectedFeatures;
				
				if(_handler.active)
					_handler.editionModeStart();
			}
			
			// to do
			public function onMapLanguageChange(event:I18NEvent):void{}
			public function draw():void{
				
				this.invalidateDisplayList();
			}
			public function destroy():void{}
		]]>
	</fx:Script>			
</os:IconButton>
