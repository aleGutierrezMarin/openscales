<?xml version="1.0" encoding="utf-8"?>
<os:IconButton xmlns:fx="http://ns.adobe.com/mxml/2009"
			   xmlns:s="library://ns.adobe.com/flex/spark"
			   xmlns:mx="library://ns.adobe.com/flex/mx"
			   xmlns:os="http://openscales.org"
			   implements="org.openscales.core.control.IControl"
			   toolTip="Edit selected features"
			   icon="{_btnEdit}"
			   width="25"
			   height="25"
			   click="onClick()"
			   enabled="{active}">
	
	<fx:Script>
		<![CDATA[
			import org.openscales.core.Map;
			import org.openscales.core.control.IControl;
			import org.openscales.core.events.DrawingEvent;
			import org.openscales.core.events.FeatureEvent;
			import org.openscales.core.events.I18NEvent;
			import org.openscales.core.feature.Feature;
			import org.openscales.core.feature.PointFeature;
			import org.openscales.core.handler.IHandler;
			import org.openscales.core.handler.feature.SelectFeaturesHandler;
			import org.openscales.core.handler.feature.draw.FeatureLayerEditionHandler;
			import org.openscales.core.handler.mouse.DragHandler;
			import org.openscales.core.layer.FeatureLayer;
			import org.openscales.geometry.Point;
			import org.openscales.geometry.basetypes.Location;
			import org.openscales.geometry.basetypes.Pixel;
			
			[Bindable]
			[Embed(source="/assets/images/icons/Icons-08.png")]
			private var _btnEdit:Class;
			private var _active:Boolean = true;
			private var _handler:FeatureLayerEditionHandler = new FeatureLayerEditionHandler();
			private var _dragHandler:DragHandler;
			private var _selectFeaturesHandler:SelectFeaturesHandler;
			
			/**
			 * Flag for activating and deactivating the component
			 * @default true;
			 */
			[Bindable]
			public function get active():Boolean{
				
				return _active;
			}
			public function set active(value:Boolean):void{
				
				_active = value;
				if(! _active){
					_handler.active = false;
				}
			}
			
			/**
			 * Map controled by this control
			 */
			public function get map():Map{
				
				return _handler.map;
			}
			public function set map(value:Map):void{
				
				_handler.map = value;
				_handler.map.addEventListener(DrawingEvent.CHANGE_ACTIVE_HANDLER, onChangeActiveHandler);
				_handler.map.addEventListener(FeatureEvent.FEATURE_SELECTED, onFeatureUpdateSelection);
				_handler.map.addEventListener(FeatureEvent.FEATURE_UNSELECTED, onFeatureUpdateSelection);
				
				for each(var ih:IHandler in this.map.controls){
					if(ih is DragHandler){
						_dragHandler = (ih as DragHandler);
						_dragHandler.map = value;
					}
					if(ih is SelectFeaturesHandler){
						_selectFeaturesHandler = (ih as SelectFeaturesHandler);
					}
				}
			}
			
			/**
			 * Position (x,y) of the handler
			 */
			public function get position():Pixel{
				
				return new Pixel(x,y);
			}
			public function set position(value:Pixel):void{
				
				if(value){
					x = value.x;
					y = value.y;
				}
			}
			
			/**
			 * 
			 */
			public function get target():FeatureLayer{
				
				return _handler.layerToEdit;
			}
			public function set target(value:FeatureLayer):void{
				
				_handler.layerToEdit = value;
			}
			
			/**
			 * To activate or disactivate the handler
			 */
			private function activate():void{
				
				_handler.active = true;
				if(_dragHandler)
					_dragHandler.active = false;
			}
			private function disactivate():void{
				
				_handler.active = false;
				//if(_dragHandler)
					//_dragHandler.active = true;
			}
			
			/**
			 * On button click, dispatch a DrawingEvent.CHANGE_ACTIVE_HANDLER event
			 */
			private function onClick():void{
				
				var evt:DrawingEvent = new DrawingEvent(DrawingEvent.CHANGE_ACTIVE_HANDLER);
				evt.activeHandler = this.id;
				_handler.map.dispatchEvent(evt);
				activate();
			}
			
			/**
			 * Check the handler when a DrawingEvent.CHANGE_ACTIVE_HANDLER event occured
			 */
			private function onChangeActiveHandler(evt:DrawingEvent):void{
				
				if(_handler.active && this.id != evt.activeHandler)
					disactivate();
			}
			
			/**
			 * Update the features to edit when a FeatureEvent.FEATURE_SELECTED or
			 * FeatureEvent.FEATURE_UNSELECTED event occured
			 */
			private function onFeatureUpdateSelection(evt:FeatureEvent):void{
				
				_handler.featuresToEdit = _selectFeaturesHandler.selectedFeatures;
			}
			
			// to do
			public function onMapLanguageChange(event:I18NEvent):void{}
			public function draw():void{
				
				this.invalidateDisplayList();
			}
			public function destroy():void{}
		]]>
	</fx:Script>			
</os:IconButton>
