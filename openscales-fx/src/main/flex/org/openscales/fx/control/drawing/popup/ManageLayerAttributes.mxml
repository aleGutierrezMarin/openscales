<?xml version="1.0" encoding="utf-8"?>
<s:TitleWindow xmlns:fx="http://ns.adobe.com/mxml/2009" 
			   xmlns:s="library://ns.adobe.com/flex/spark" 
			   xmlns:mx="library://ns.adobe.com/flex/mx"
			   creationComplete="init();"
			   removedFromStage="destroy();"
			   close="close();">
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	
	<fx:Script>
		<![CDATA[
			import mx.core.FlexGlobals;
			import mx.core.LayoutDirection;
			import mx.managers.PopUpManager;
			
			import org.openscales.core.Map;
			import org.openscales.core.events.I18NEvent;
			import org.openscales.core.feature.Feature;
			import org.openscales.core.i18n.Catalog;
			import org.openscales.core.layer.VectorLayer;
			
			import spark.components.Application;
			import spark.components.Button;
			import spark.components.HGroup;
			import spark.components.Label;
			import spark.components.TextInput;
			import spark.components.VGroup;
			import spark.layouts.HorizontalLayout;
			
			private var _init:Boolean = false;
			private var _layer:VectorLayer = null;
			private var ti:TextInput = null;
			private var addbtn:Button = null;
			protected var _vgroup:VGroup = null;
			
			private static var DEFAULT_W:Number = 300;
			private static var DEFAULT_H:Number = 200;
			
			/**
			 * feature associated to the popup
			 */
			public function get layer():VectorLayer
			{
				return _layer;
			}
			/**
			 * @private
			 */
			public function set layer(value:VectorLayer):void
			{
				if(this._layer) {
					if(this._layer.map)
						this._layer.map.removeEventListener(I18NEvent.LOCALE_CHANGED,this.localize);
					if(_vgroup)
						_vgroup.removeAllElements();
					if(this._init)
						PopUpManager.removePopUp(this);
				}
				_layer = value;
				if(this._layer && this._layer.map) {
					PopUpManager.addPopUp(this, (FlexGlobals.topLevelApplication as Application), true);
					if(this._init) {
						this._layer.map.addEventListener(I18NEvent.LOCALE_CHANGED,this.localize);
						
						if(!_vgroup) {
							_vgroup = new VGroup();
							_vgroup.gap = 10;
							_vgroup.top = 5;
							container.addElement(_vgroup);
						}
						this.drawContent();
						this.localize();
					}
				}
			}
			
			protected function drawContent():void {
				var j:uint = this._layer.attributesId.length;
				var group:HGroup;
				var lb:Label;
				var btn:Button;
				for(var i:uint = 0;i<j;++i) {
					var key:String = this._layer.attributesId[i];
					group = new HGroup();
					group.gap = 10;
					group.paddingTop = 5;
					group.paddingLeft = 5;
					_vgroup.addElement(group);
					lb = new Label();
					lb.width = 100;
					lb.text = key;
					group.addElement(lb);
					btn = new Button();
					btn.id = key;
					btn.label = Catalog.getLocalizationForKey("managelayerattributes.dellabel");
					btn.addEventListener(MouseEvent.CLICK, remove);
					group.addElement(btn);
				}
				group = new HGroup();
				group.gap = 10;
				group.paddingTop = 5;
				group.paddingLeft = 5;
				_vgroup.addElement(group);
				if(!ti) {
					ti = new TextInput();
				}
				if(!addbtn) {
					addbtn = new Button();
					addbtn.addEventListener(MouseEvent.CLICK, valid);
				}
				ti.text = "";
				group.addElement(ti);
				addbtn.label = Catalog.getLocalizationForKey("managelayerattributes.addlabel");
				group.addElement(addbtn);
			}
			
			protected function localize(e:I18NEvent=null):void {
				this.title = Catalog.getLocalizationForKey("managelayerattributes.title");
			}
			
			protected function init():void {
				this.x = (parent.width-this.width)/2;
				this.y = (parent.height-this.height)/2;
				this.resize(null);
				parent.addEventListener(Event.RESIZE,this.resize);
				if(!this._init) {
					this._init = true;
					this.layer = this.layer;
				}
			}
			
			protected function destroy():void {
				if(parent)
					parent.removeEventListener(Event.RESIZE,this.resize);
				this.layer = null;
			}
			
			private function valid(e:Event):void {
				var found:Boolean = false;
				var value:String = this.ti.text;
				if(value == null || value == "")
					return;
				
				for(var i:uint = this._layer.attributesId.length; (i>0 && !found); --i) {
					if(this._layer.attributesId[i-1]==value)
						found = true;
				}
				if(found) {
					return;
				}
				this.ti.text = "";
				
				this._layer.attributesId.push(value);
				var features:Vector.<Feature> = this._layer.features;
				if(features) {
					for(i=features.length;i>0;--i) {
						if(!features[i-1].attributes[value])
							features[i-1].attributes[value]="";
					}
				}
				this._vgroup.removeAllElements();
				this.drawContent();
				if(this.scroller.horizontalScrollBar)
					this.scroller.horizontalScrollBar.value = this.scroller.horizontalScrollBar.maximum;
			}
			
			private function remove(e:MouseEvent):void {
				if(e.target.id && e.target.id!="") {
					var found:Boolean = false;
					var value:String = e.target.id;
					if(value == null || value == "")
						return;
					
					for(var i:uint = this._layer.attributesId.length; i>0; --i) {
						if(this._layer.attributesId[i-1]==value) {
							this._layer.attributesId.splice(i-1,1);
							var features:Vector.<Feature> = this._layer.features;
							if(features)
								for(var j:uint = features.length;j>0;--j)
									features[j-1].attributes[value]=null;
							break;
						}
					}
					_vgroup.removeAllElements();
					this.drawContent();
				}
			}
			
			private function resize(e:Event):void {
				this.x = (parent.width-this.width)/2;
				this.y = (parent.height-this.height)/2;
				this.width = DEFAULT_W;
				this.height = DEFAULT_H;
				if(this.width > parent.width) {
					this.width = parent.width;
				}
				if(this.height > parent.height) {
					this.height = parent.height;
				}
			}
			
			private function close():void
			{
				this.layer = null;
			}
			
		]]>
	</fx:Script>
	<s:Scroller id="scroller" width="100%" height="100%">
		<s:Group id="container" width="100%" height="100%">
		</s:Group>
	</s:Scroller>
</s:TitleWindow>
