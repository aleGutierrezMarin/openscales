<?xml version="1.0" encoding="utf-8"?>
<os:Control xmlns:fx="http://ns.adobe.com/mxml/2009"
			xmlns:s="library://ns.adobe.com/flex/spark"
			xmlns:mx="library://ns.adobe.com/flex/mx"
			xmlns:os="org.openscales.fx.control.*"
			xmlns:osDraw="org.openscales.fx.control.drawing.*"
			width="400" height="300" xmlns:openscales="http://openscales.org"
			creationComplete="configure()">
	
	<fx:Script>
		<![CDATA[
			import mx.core.UIComponent;
			
			import org.openscales.core.Map;
			import org.openscales.core.events.DrawingEvent;
			import org.openscales.core.events.I18NEvent;
			import org.openscales.core.i18n.Catalog;
			import org.openscales.core.layer.VectorLayer;
			import org.openscales.core.style.Style;
			import org.openscales.fx.FxMap;
			
			public static const DRAWLABEL:String="label";
			public static const DRAWPOINT:String="point";
			public static const DRAWSHAPE:String="shape";
			public static const DRAWPATH:String="path";
			public static const DRAWPOLYGON:String="polygon";
			public static const DRAWSELECT:String="select";
			public static const DRAWDELETE:String="delete";
			public static const DRAWEDIT:String="edit";
			public static const DRAWMOVE:String="move";
			public static const DRAWMANAGE:String="manage";
			public static const DRAWADD:String="add";
			public static const DRAWIMPORT:String="import";
			public static const DRAWEXPORT:String="export";
			
			[Bindable]
			private var _layer:VectorLayer;
			private var _labelStyle:Style = Style.getDefinedLabelStyle("Arial",12,0,false,false);
			private var _pointStyle:Style = Style.getDefaultPointStyle();
			private var _pathStyle:Style = Style.getDefaultLineStyle();
			private var _shapeStyle:Style = Style.getDefaultLineStyle();
			private var _polygonStyle:Style = Style.getDefaultSurfaceStyle();
			private var _clickOut:Boolean = true;
			private var _toggle:Boolean = false;
			private var _hover:Boolean = false;
			private var _virtualStyle:Style = Style.getDefaultCircleStyle();
			private var _defaultAttributes:Vector.<String> = new <String> ["id","description"];
			private var _mode:String = "multiple";
			private var _configured:Boolean = false;
			private var _multipleModeDisplayTools:Vector.<String>=new Vector.<String>();
			private var _multipleModeInitTools:Vector.<String>=new Vector.<String>();
			
		
			
			
			[Bindable]
			private var title:String = Catalog.getLocalizationForKey('drawing.toolbar');
			
			
			private function configure():void{
				_configured = true;
				
				// remove elements if mode = "mini"
				if(this._mode == "multiple")
				{
					this._multipleModeDisplayTools.push(DRAWLABEL);
					this._multipleModeDisplayTools.push(DRAWPOINT);
					this._multipleModeDisplayTools.push(DRAWPATH);
					this._multipleModeDisplayTools.push(DRAWPOLYGON);
					this._multipleModeDisplayTools.push(DRAWSELECT);
					this._multipleModeDisplayTools.push(DRAWEDIT);
					this._multipleModeDisplayTools.push(DRAWMOVE);
					this._multipleModeDisplayTools.push(DRAWMANAGE);
					this._multipleModeDisplayTools.push(DRAWEXPORT);
					this._multipleModeDisplayTools.push(DRAWSHAPE);
					this._multipleModeDisplayTools.push(DRAWDELETE);

					//this.multipleModeInitTools = this._multipleModeDisplayTools.;
					
					for(var i:uint = 0 ; i < _multipleModeDisplayTools.length ; i++) {
						this.multipleModeInitTools.push(_multipleModeDisplayTools[i]);
						this.drawingToolbar.removeElement(this.getComponentFromString(_multipleModeDisplayTools[i]));
					}
				} else {
					//By default, buttons are not enabled
					this.drawLabel.buttonMode = false;
					this.drawLabel.useHandCursor = false;
					this.drawLabel.toolTip = Catalog.getLocalizationForKey('drawing.selectDrawingLayer');
					
					this.drawPoint.buttonMode = false;
					this.drawPoint.useHandCursor = false;
					this.drawPoint.toolTip = Catalog.getLocalizationForKey('drawing.selectDrawingLayer');
					
					this.drawShape.buttonMode = false;
					this.drawShape.useHandCursor = false;
					this.drawShape.toolTip = Catalog.getLocalizationForKey('drawing.selectDrawingLayer');
					
					this.drawPath.buttonMode = false;
					this.drawPath.useHandCursor = false;
					this.drawPath.toolTip = Catalog.getLocalizationForKey('drawing.selectDrawingLayer');
					
					this.drawPolygon.buttonMode = false;
					this.drawPolygon.useHandCursor = false;
					this.drawPolygon.toolTip = Catalog.getLocalizationForKey('drawing.selectDrawingLayer');
					
					this.selectFeatures.buttonMode = false;
					this.selectFeatures.useHandCursor = false;
					this.selectFeatures.toolTip = Catalog.getLocalizationForKey('drawing.selectDrawingLayer');
					
					this.deleteFeatures.buttonMode = false;
					this.deleteFeatures.useHandCursor = false;
					this.deleteFeatures.toolTip = Catalog.getLocalizationForKey('drawing.selectDrawingLayer');
					
					this.editFeatures.buttonMode = false;
					this.editFeatures.useHandCursor = false;
					this.editFeatures.toolTip = Catalog.getLocalizationForKey('drawing.selectDrawingLayer');
					
					this.moveFeatures.buttonMode = false;
					this.moveFeatures.useHandCursor = false;
					this.moveFeatures.toolTip = Catalog.getLocalizationForKey('drawing.selectDrawingLayer');
					
					this.manageAttributes.buttonMode = false;
					this.manageAttributes.useHandCursor = false;
					this.manageAttributes.toolTip = Catalog.getLocalizationForKey('drawing.selectDrawingLayer');
				}
				
				if (this.map)
					this.map.addEventListener(I18NEvent.LOCALE_CHANGED, onMapLanguageChange);
			}
			
			/**
			 * This function hide a component of the drawing toolbar if it was display.
			 *  Otherwise, it has no action
			 * 
			 * @param component Component to hide (constants available in the DrawingToolbar class)
			 */
			public function hideComponent(component:String):void{
				if(this.mode == 'multiple') {
					var index:int = this._multipleModeDisplayTools.indexOf(component);
					if(index >=0) {
						this._multipleModeDisplayTools.splice(index,1);
					}
				} else {
					if(this.drawingToolbar.contains(this.getComponentFromString(component)))
						this.drawingToolbar.removeElement(this.getComponentFromString(component));
				}
			}
			
			/**
			 * This function show a component of the drawing toolbar if it was display.
			 *  Otherwise, it has no action
			 * 
			 * @param component Component to show (constants available in the DrawingToolbar class)
			 */
			public function showComponent(component:String):void{
				if(this.mode == 'multiple') {
					var index:int = this._multipleModeDisplayTools.indexOf(component);
					//item is not found in the displayed tools
					if(index <0) {
						this._multipleModeDisplayTools.push(component);
					}
				} else {
					if(!this.drawingToolbar.contains(this.getComponentFromString(component)))
						this.drawingToolbar.addElementAt(this.getComponentFromString(component),0);	
				}
			}
			
			private function getComponentFromString(value:String):UIComponent{
				var myComponent:UIComponent = null;
				switch(value) {
					case DRAWLABEL:
						myComponent = this.drawLabel;break;
					case DRAWPOINT:
						myComponent = this.drawPoint;break;
					case DRAWSHAPE:
						myComponent = this.drawShape;break;
					case DRAWPATH:
						myComponent = this.drawPath;break;
					case DRAWPOLYGON:
						myComponent = this.drawPolygon;break;
					case DRAWSELECT:
						myComponent = this.selectFeatures;break;
					case DRAWDELETE:
						myComponent = this.deleteFeatures;break;
					case DRAWEDIT:
						myComponent = this.editFeatures;break;
					case DRAWMOVE:
						myComponent = this.moveFeatures;break;
					case DRAWMANAGE:
						myComponent = this.manageAttributes;break;
					case DRAWADD:
						myComponent = this.addFeatures;break;
					case DRAWIMPORT:
						myComponent = this.importFeature;break;
					case DRAWEXPORT:
						myComponent = this.exportFeature;break;
				}
				
				return myComponent;
			}
			
			/**
			 * Update texts on map language changed
			 */
			override public function onMapLanguageChange(event:I18NEvent):void{
				
				this.title = Catalog.getLocalizationForKey('drawing.toolbar');
			}
			
			/**
			 * @inheritDoc
			 */
			override public function set map(value:Map):void{
				
				super.map = value;
			}
			
			/**
			 * @inheritDoc
			 */
			override public function set fxMap(value:FxMap):void{
				
				super.fxMap = value;
			}
			
			/**
			 * The mode of the drawing toolbar
			 */
			[Bindable]
			public function get mode():String{
				return this._mode;
			}
			/**
			 * @private
			 */
			public function set mode(value:String):void{
				this._mode = value;
			}
			
			
			/**
			 * The layer the features will be drawn on
			 */
			public function get layer():VectorLayer {
				return this._layer;
			}
			/**
			 * @private
			 */
			public function set layer(value:VectorLayer):void{
				this._layer = value;
			}
			
			/**
			 * The style of the drawing labels
			 */
			[Bindable]
			public function get labelStyle():Style {
				return this._labelStyle;
			}
			/**
			 * @private
			 */
			public function set labelStyle(value:Style):void{
				this._labelStyle = value;
			}
			
			/**
			 * The style of the drawing points
			 */
			[Bindable]
			public function get pointStyle():Style {
				return this._pointStyle;
			}
			/**
			 * @private
			 */
			public function set pointStyle(value:Style):void{
				this._pointStyle = value;
			}
			
			/**
			 * The style of the drawing paths
			 */
			[Bindable]
			public function get pathStyle():Style {
				return this._pathStyle;
			}
			
			/**
			 * @private
			 */
			public function set pathStyle(value:Style):void{
				this._pathStyle = value;
			}
			
			/**
			 * The style of the drawing shapes
			 */
			[Bindable]
			public function get shapeStyle():Style {
				return this._shapeStyle;
			}
			
			/**
			 * @private
			 */
			public function set shapeStyle(value:Style):void{
				this._shapeStyle = value;
			}
			
			/**
			 * The style of the drawing polygons
			 */
			[Bindable]
			public function get polygonStyle():Style {
				return this._polygonStyle;
			}
			/**
			 * @private
			 */
			public function set polygonStyle(value:Style):void{
				this._polygonStyle = value;
			}
			
			/**
			 * If true, a feature is unselected by clicking out of it
			 * @default true;
			 */
			[Bindable]
			public function get clickout():Boolean {
				return this._clickOut;
			}
			/**
			 * @private
			 */
			public function set clickout(value:Boolean):void{
				this._clickOut = value;
				this._hover = !(value);
			}
			
			/**
			 * If true, a selected feature is unselected by clicking on it
			 * @default false;
			 */
			[Bindable]
			public function get toggle():Boolean {
				return this._toggle;
			}
			/**
			 * @private
			 */
			public function set toggle(value:Boolean):void{
				this._toggle = value;
			}
			
			/**
			 * If true, a feature is selected on mouseover
			 * @default false;
			 */
			[Bindable]
			public function get hover():Boolean {
				return this._hover;
			}
			/**
			 * @private
			 */
			public function set hover(value:Boolean):void{
				this._hover = value;
				this._clickOut = (!value);
			}
			
			/**
			 * The style of the virtual points in editing mode
			 */
			[Bindable]
			public function get virtualStyle():Style {
				return this._virtualStyle;
			}
			/**
			 * @private
			 */
			public function set virtualStyle(value:Style):void{
				this._virtualStyle = value;
			}
			
			/**
			 * Tools to display in multiple mode
			 */
			[Bindable]
			public function get multipleModeDisplayTools():Vector.<String> {
				return this._multipleModeDisplayTools;
			}
			/**
			 * @private
			 */
			public function set multipleModeDisplayTools(value:Vector.<String>):void{
				this._multipleModeDisplayTools = value;
			}
			
			/**
			 * Basic tools displayed at initialization in multiple mode
			 */
			[Bindable]
			public function get multipleModeInitTools():Vector.<String> {
				return this._multipleModeInitTools;
			}
			/**
			 * @private
			 */
			public function set multipleModeInitTools(value:Vector.<String>):void{
				this._multipleModeInitTools = value;
			}
			
			/**
			 * The default attributes for each feature
			 */
			[Bindable]
			public function get defaultAttributes():Vector.<String> {
				return this._defaultAttributes;
			}
			/**
			 * @private
			 */
			public function set defaultAttributes(value:*):void{
				var attributes:Array = null;
				this._defaultAttributes = new Vector.<String>();
				
				if(value is Vector.<String>)
					this._defaultAttributes = value as Vector.<String>;
				else if(value is String) {
					attributes = (value as String).split(",");
				} else if(value is Array) {
					attributes = value as Array;
				}
				if(attributes) {
					for each (var key:String in attributes){
						this._defaultAttributes.push(key);
					}
				}
				if(_configured)
					manageAttributes.defaultAttributes = this._defaultAttributes;
			}
			
		]]>
	</fx:Script>
	
	<s:Panel id="drawingToolbar" title="{this.title}" x="10" y="10" height="70">
		<s:layout>
			<s:HorizontalLayout paddingTop="1" paddingRight="1" paddingBottom="1" paddingLeft="1"
								horizontalAlign="center" verticalAlign="middle" />
		</s:layout>
		<osDraw:DrawLabel style="{this.labelStyle}" map="{this.map}" id="drawLabel" drawingMode="{this.mode}"/>
		<osDraw:DrawPoint style="{this.pointStyle}" map="{this.map}" id="drawPoint" drawingMode="{this.mode}"/>
		<osDraw:DrawShape style="{this.shapeStyle}" map="{this.map}" id="drawShape" drawingMode="{this.mode}"/>
		<osDraw:DrawPath style="{this.pathStyle}" map="{this.map}" id="drawPath" drawingMode="{this.mode}"/>
		<osDraw:DrawPolygon style="{this.polygonStyle}" map="{this.map}" id="drawPolygon" drawingMode="{this.mode}"/>
		<osDraw:SelectFeatures fxMap="{this.fxMap}" map="{this.map}" clickout="{this.clickout}" hover="{this.hover}" toggle="{this.toggle}" id="selectFeatures" drawingMode="{this.mode}"/>
		<osDraw:DeleteFeatures map="{this.map}" id="deleteFeatures" drawingMode="{this.mode}"/>
		<osDraw:EditFeatures virtualStyle="{this.virtualStyle}" map="{this.map}" id="editFeatures" drawingMode="{this.mode}"/>
		<osDraw:MoveFeatures map="{this.map}" id="moveFeatures" drawingMode="{this.mode}"/>
		<osDraw:ManageAttributes defaultAttributes="{this.defaultAttributes}" map="{this.map}" id="manageAttributes" drawingMode="{this.mode}"/>
		<osDraw:AddVectorLayer map="{this.map}" id="addFeatures" drawingMode="{this.mode}"/>
		<osDraw:ImportFeature id="importFeature" map="{this.map}" drawingMode="{this.mode}"/>
		<osDraw:ExportFeature id="exportFeature" map="{this.map}" layer="{this._layer}" drawingMode="{this.mode}"/>
	</s:Panel>
</os:Control>
