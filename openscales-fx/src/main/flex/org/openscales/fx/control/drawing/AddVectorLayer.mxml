<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009"
		   xmlns:s="library://ns.adobe.com/flex/spark"
		   xmlns:mx="library://ns.adobe.com/flex/mx"
		   xmlns:os="org.openscales.fx.control.*">
	
	<os:IconButton icon="{_btnAddVector}" id="iconButton" click="onClick()" toolTip="{this.labelAddVector}"
				   width="22"
				   height="22" alpha="{_alpha}" />
	
	<fx:Script>
		<![CDATA[
			import mx.events.FlexEvent;
			import mx.managers.PopUpManager;
			
			import org.openscales.core.Map;
			import org.openscales.core.events.DrawingEvent;
			import org.openscales.core.events.I18NEvent;
			import org.openscales.core.i18n.Catalog;
			import org.openscales.core.layer.DrawingsLayer;
			import org.openscales.core.layer.VectorLayer;
			import org.openscales.fx.control.drawing.popup.SingleInputPopup;
			
			import spark.components.Button;
			import spark.components.Label;
			import spark.components.TextInput;
			import spark.components.TitleWindow;
			import spark.layouts.HorizontalAlign;
			import spark.layouts.HorizontalLayout;
			import spark.layouts.VerticalLayout;
			
			[Bindable]
			private var _alpha:Number = 1;
			/**
			 * Translation for label button
			 */
			[Bindable]
			[Embed(source="/assets/images/icons/Icons-20.png")]
			private var _btnAddVector:Class;
			
			[Bindable]
			public var labelAddVector:String = Catalog.getLocalizationForKey('drawing.addvectorlayer');
			
			
			private var _map:Map = null;

			private var _drawingMode:String;
			
			private var _popup:SingleInputPopup;
			
			/**
			 * Indicates for Drawing mode
			 * multiple : tools are in the LayerSwitcher
			 * unique : tools are in the DrawingToolbar
			 */
			[Bindable]
			public function get drawingMode():String{
				
				return _drawingMode;
			}
			
			public function set drawingMode(value:String):void{
				_drawingMode = value;
			}
			
			public function onClick():void
			{	
				_popup = SingleInputPopup(PopUpManager.createPopUp(this,SingleInputPopup));
				_popup.map = this.map;
				_popup.callback = addVectorLayer;
			}
			
			/**
			 * Add a nex vector layer on the map
			 */
			public function addVectorLayer():void
			{
				var value:String = _popup.input.text;
				
				var layer:DrawingsLayer = new DrawingsLayer();
				layer.displayedName = value;
				layer.selected = true;
				layer.projection = this.map.projection;
				this.map.addLayer(layer);	
				
				var evt:DrawingEvent = new DrawingEvent(DrawingEvent.CHANGE_ACTIVE_LAYER);
				evt.layer = layer;
				this.map.dispatchEvent(evt);
			}
			
			/**
			 * Change the text values on Map Language changed
			 * @param event The I18N event received
			 */
			public function onMapLanguageChange(event:I18NEvent):void 
			{
				labelAddVector = Catalog.getLocalizationForKey('drawing.addvectorlayer');

			}
			
			/**
			 * The map linked to the add vector layer button
			 */
			public function get map():Map
			{
				return _map;
			}

			/**
			 * @private
			 */
			public function set map(value:Map):void
			{
				this._map = value;
				if(this._map)
				{
					this._map.addEventListener(I18NEvent.LOCALE_CHANGED, this.onMapLanguageChange);
				}
			}

			
			
		]]>
	</fx:Script>			
</s:Group>
