<?xml version="1.0" encoding="utf-8"?>
<!--- Zoom control with zoomLabels --> 
<Control xmlns="org.openscales.fx.control.*" 
		 xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" >
	
	
	<fx:Script>
		<![CDATA[
			import mx.events.DragEvent;
			import mx.events.StateChangeEvent;
			
			import org.openscales.core.Map;
			import org.openscales.core.control.ZoomData;
			import org.openscales.core.events.I18NEvent;
			import org.openscales.core.events.LayerEvent;
			import org.openscales.core.events.MapEvent;
			import org.openscales.core.i18n.Catalog;
			import org.openscales.fx.control.skin.PanSkin;
			import org.openscales.fx.control.skin.ZoomSkin;
			import org.openscales.fx.control.skin.ZoomThumbSkin;
			
			import spark.components.supportClasses.SliderBase;
			import spark.events.TrackBaseEvent;
			
			
			public var DELTA_PX:Number = 100;
			
			
			/**
			 * @private
			 * The string value for the list of labels for the different resolution.
			 * @default null
			 */
			private var _scalesName:String = null;
			
			/**
			 * @private
			 * The list of labels for the different resolution.
			 * @default null
			 */
			private var _scalesLabels:Vector.<ZoomData> = null;
			
			/**
			 * @private
			 * The current value of the zoom label
			 * @default null
			 */
			private var _currentLabel:String = null;
			
			
			/**
			 * @private
			 * Indicates if the slider thumb is dragged
			 * @default false
			 */
			private var _onDrag:Boolean = false;
			
			/**
			 * @private
			 * Indicates the minimum value for the slider
			 * @default 0
			 */
			private var _minSlider:Number = 0;
			
			/**
			 * @private
			 * Indicates the maximum value for the slider
			 * @default 20
			 */
			private var _maxSlider:Number = 20;
			
			
			/**
			 * The current zoom value
			 */
			[Bindable]
			public var currentZoom:Number = 150;
			
			/**
			 * @private
			 * The bindable value corresponding to the zoom out tooltip
			 */
			[Bindable]
			public var toolTipZoomOut:String = Catalog.getLocalizationForKey('zoom.zoomout');
			
			/**
			 * @private
			 * The bindable value corresponding to the zoom in tooltip
			 */
			[Bindable]
			public var toolTipZoomIn:String = Catalog.getLocalizationForKey('zoom.zoomin');
			
			/**
			 * The current y for the label that display scaleName
			 */
			[Bindable]
			public var scaleNameY:Number = 0;
			
			/**
			 * Configure the listener for the pan and the zoom
			 * Configure the list of zoom label once the component is created 
			 * and set the first zoomLabel text value.
			 */
			override protected function onCreationComplete(event:Event):void
			{ 
				super.onCreationComplete(event);
			
				if(this._scalesLabels == null)
				{
					this._scalesLabels = new Vector.<ZoomData>();
				}
				
				this.updateScalesNameLabel();
			}
			
			/**
			 * @inherit
			 */
			override public function onMapLanguageChange(event:I18NEvent):void 
			{
				this.toolTipZoomOut = Catalog.getLocalizationForKey('zoom.zoomout');
				this.toolTipZoomIn = Catalog.getLocalizationForKey('zoom.zoomin');
				this.updateCurrentLabel();
			}
			
			/**
			 * Update the min/maxSlider when the map.maxResolution and minResolution can have changed
			 * Call on 
			 * 
			 * @param event The MapEvent received or null otherwise
			 */
			public function updateMinMaxSliderChanged(event:MapEvent = null):void
			{
				if(this.map.baseLayer)
				{
					this.minSlider = this.map.baseLayer.getZoomForResolution(this.map.maxResolution);
					this.maxSlider = (this.map.baseLayer.getZoomForResolution(this.map.minResolution));
				}
			}
			
			/**
			 * @inherit
			 */
			override public function set map(value:Map):void 
			{
				super.map = value;
				
				if(value)
				{
					this.updateMinMaxSliderChanged();
					this.initializeZoomLevels();
				}
			}
			
			/**
			 * @inherit
			 */
			override public function activate():void 
			{
				super.activate();
				
				// add listener to the map
				if(this._map)
				{
					super.map.addEventListener(LayerEvent.BASE_LAYER_CHANGED, this.initializeZoomLevels);
					super.map.addEventListener(MapEvent.MOVE_END, this.updateZoomLevels);
					super.map.addEventListener(MapEvent.ZOOM_CHANGED, this.updateZoomLevels);	
					super.map.addEventListener(MapEvent.MIN_MAX_RESOLUTION_CHANGED, this.updateMinMaxSliderChanged);
				}
			}
			
			/**
			 * @inherit
			 */
			override public function desactivate():void 
			{
				super.desactivate();
				
				// remove listener to the map
				if(this._map)
				{
					super.map.removeEventListener(LayerEvent.BASE_LAYER_CHANGED, this.initializeZoomLevels);
					super.map.removeEventListener(MapEvent.MOVE_END, this.updateZoomLevels);
					super.map.removeEventListener(MapEvent.ZOOM_CHANGED, this.updateZoomLevels);
					super.map.removeEventListener(MapEvent.MIN_MAX_RESOLUTION_CHANGED, this.updateMinMaxSliderChanged);
				}
			}
			
			
			/**
			 * Refresh the current zoom label.
			 * Get the current map resolution and search the associated label.
			 * Then refresh the display of the label value.
			 */
			public function updateCurrentLabel():void
			{
				if(this._map && this._map.resolution)
				{
					// update the value
					this.currentLabel = this.getLabelFromResolution(this._map.resolution);
					this.updateScalesNameLabel();
				}
			}
			
			/**
			 * 
			 * @private
			 * Update the label y when the thumb slider y change
			 */
			private function updateScalesNameLabel():void
			{
				if(zoomSlider)
					if(zoomSlider.thumb)
						this.scaleNameY = zoomSlider.thumb.y;
			}
			
			/**
			 * Return the label associated to the given zoom (converted in resolution)
			 * 
			 * @param zoom  The zoom given
			 * @return The string value of the label corresponding to the resolution
			 */
			public function getLabelFromZoom(zoom:Number):String
			{
				// get the resolution for the current zoom
				var resolution:Number = this._map.baseLayer.resolutions[zoom];
				return this.getLabelFromResolution(resolution);
			}
			
			/**
			 * Return the label associated to the given resolution 
			 * 
			 * @param resolution The resolution 
			 * @return The string value of the label corresponding to the resolution
			 */
			public function getLabelFromResolution(resolution:Number):String
			{
				if(this._scalesLabels)
				{
					var i:uint = 0;
					var j:uint = this._scalesLabels.length;
					for (; i<j; ++i) 
					{
						if( resolution>=this._scalesLabels[i].minResolution
							&& resolution<=this._scalesLabels[i].maxResolution )
						{
							return Catalog.getLocalizationForKey(this._scalesLabels[i].label);
						}
					}
				}
				return new String("");
			}
			
			/**
			 * Fonction called when the zoom in button is presssed.
			 * Zoom in on the map if possible.
			 * 
			 * @param event The MouseEvent received
			 */
			public function onZoomIn(event:MouseEvent):void
			{
				this.map.moveTo(this.map.center, this.map.zoom + 1, false, true);
			}
			
			/**
			 * Fonction called when the zoom out button is presssed.
			 * Zoom out on the map if possible.
			 * 
			 * @param event The MouseEvent received
			 */
			public function onZoomOut(event:MouseEvent):void
			{
				this.map.moveTo(this.map.center, this.map.zoom - 1, false, true);
			}
			
			/**
			 * Initialise the zoomSlider according to current map zoomLevels
			 */
			private function initializeZoomLevels(event:Event = null):void {
				if(!this._map || !this._map.baseLayer)
					return;
				
				this.currentZoom = map.zoom;
				
				// initialise the label value
				this.updateCurrentLabel();
			}
			
			
			
			private function updateZoomLevels(e:MapEvent = null):void {
				this.updateScalesNameLabel();
				
				if(e.zoomChanged)
				{
					this.currentZoom = map.zoom;
					this.updateCurrentLabel();
				}
			}
			
			/**
			 * Function called when the thumb slider start drag event
			 */
			public function onThumbDrag(event:TrackBaseEvent):void
			{
				this.updateScalesNameLabel();
				this._onDrag = true;
			}
			
			/**
			 * Function called when the thumb slider start drag  complete (when the thumb is released)
			 */
			public function onThumbRelease(event:TrackBaseEvent):void
			{
				this.updateScalesNameLabel();
				var currentSlider:SliderBase= event.target as SliderBase;
				this.currentZoom = currentSlider.value;
				this._onDrag = false;
				this.map.moveTo(this.map.center, this.currentZoom, false, true);
			}
			
			/**
			 * When the slider value is changed : update label
			 * 
			 * @param event The event received
			 */
			public function onZoomSliderChange(event:Event):void {
				
				var currentSlider:SliderBase= event.target as SliderBase;
				
				if(!this._map || !this._map.baseLayer)
					return;
				
				// update the display label
				this.currentLabel = getLabelFromZoom(currentSlider.value);
				
				// if not onDrag really update the zoom
				if(!this._onDrag)
				{
					this.currentZoom = currentSlider.value;
					this.map.moveTo(this.map.center, this.currentZoom, false, true);
				}
				
			}
			
			override public function destroy():void {
				this.active = false;
				super.destroy();
			}
			
			/**
			 * The list of labels for the different resolution.
			 */
			public function set scalesLabels(value:Vector.<ZoomData>):void
			{
				this._scalesLabels = value;
				this.updateCurrentLabel();
			}
			
			/**
			 * @private
			 */
			public function get scalesLabels():Vector.<ZoomData>
			{
				return this._scalesLabels;				
			}
			
			/**
			 * The string value for the list of labels for the different resolution.
			 */
			public function get scalesName():String
			{
				return this._scalesName;
			}
			
			/**
			 * @private
			 */
			public function set scalesName(value:String):void
			{
				this._scalesName = value;
				
				// parse the data
				if( value != null )
				{
					var scales:Vector.<ZoomData>  = new Vector.<ZoomData>();
					
					var zoomDataString:String = null;
					
					for each (zoomDataString in value.split(";")) {
						var values:Array = zoomDataString.split(",");
						var zoomData:ZoomData = new ZoomData(values[0], Number(values[1]), Number(values[2]));
						
						scales.push(zoomData);
					}
					this._scalesLabels = scales;
				}
				this.updateCurrentLabel();
			}	
			
			
			/**
			 * The current value of the zoom label
			 */
			[Bindable]
			public function get currentLabel():String
			{
				return this._currentLabel;
			}
			
			/**
			 * @private
			 */
			public function set currentLabel(value:String):void
			{
				this._currentLabel = value;
			}		
			
			
			/**
			 * Indicates if the slider thumb is dragged
			 */
			public function get onDrag():Boolean
			{
				return this._onDrag;
			}
			
			/**
			 * @private
			 */
			public function set onDrag(value:Boolean):void
			{
				this._onDrag = value;
			}	
			
			/**
			 * Indicates the minimum value for the slider
			 * @default 0
			 */
			[Bindable]
			public function get minSlider():Number
			{
				return this._minSlider;
			}	
			
			/**
			 * @private
			 */
			public function set minSlider(value:Number):void
			{
				this._minSlider = value;
			}
			
			/**
			 * Indicates the maximum value for the slider
			 * @default 20
			 */
			[Bindable]
			public function get maxSlider():Number
			{
				return this._maxSlider;
			}	
			
			/**
			 * @private
			 */
			public function set maxSlider(value:Number):void
			{
				this._maxSlider = value;
			}
			
		]]>
	</fx:Script>
	
	<s:VSlider id="zoomSlider" x="80" y="10"
			   minimum="{this.minSlider}"
			   maximum="{this.maxSlider}"
			   value="{this.currentZoom}"
			   snapInterval="1"
			   useHandCursor="true"
			   buttonMode="true"
			   liveDragging="true"
			   focusEnabled="false"
			   showDataTip="false"
			   thumbDrag="onThumbDrag(event)"
			   thumbRelease="onThumbRelease(event)"
			   change="onZoomSliderChange(event)" />
	
	<s:Button id="zoomOut" name="zoomout" label="-" toolTip="{this.toolTipZoomOut}"
			  click="onZoomOut(event)"
			  width="30" x="95" y="90" useHandCursor="true" buttonMode="true" />
	<s:Button id="zoomIn" name="zoomin" label="+" toolTip="{this.toolTipZoomIn}"
			  click="onZoomIn(event)"
			  width="30" x="95" y="0" useHandCursor="true" buttonMode="true" />
	
	<s:Label id="scalesNameLabel" x="90" y="{this.scaleNameY}"
			 backgroundColor="0xDDDDDD" text="{this.currentLabel}"/>
</Control>

