<?xml version="1.0" encoding="utf-8"?>
<!--- Old PanZoom control, you should use brand new PanZoom Flex control instead -->
<Control xmlns="http://openscales.org" xmlns:fx="http://ns.adobe.com/mxml/2009" 
				 xmlns:s="library://ns.adobe.com/flex/spark" xmlns:mx="library://ns.adobe.com/flex/mx"
				 width="400" height="300" initialize="configure()">
	
	<fx:Script>
		<![CDATA[
			import mx.events.SliderEvent;
			import mx.events.SliderEventClickTarget;
			import mx.events.StateChangeEvent;
			
			import org.openscales.core.Map;
			import org.openscales.core.events.LayerEvent;
			import org.openscales.core.events.MapEvent;
			import org.openscales.fx.control.skin.PanSkin;
			import org.openscales.fx.control.skin.ZoomSkin;
			
			public var DELTA_PX:Number = 100;
			
			override public function set map(value:Map):void {
				super.map = value;
			}
			public function  configure():void{ 
				
				this.panSkin.skin.addEventListener(StateChangeEvent.CURRENT_STATE_CHANGE,this.onPan);
				this.zoomSlider.skin.addEventListener(StateChangeEvent.CURRENT_STATE_CHANGE,this.onZoom);
			}
			
			public function onPan(event:StateChangeEvent):void
			{
			  switch(event.newState)
			  {
				case "south" :
					this.map.pan(0, this.DELTA_PX, true);
					break;
				case "east" :
					this.map.pan(this.DELTA_PX, 0, true);
					break;
				case "north" :
					this.map.pan(0, -this.DELTA_PX, true);		
					break;
				case "west":
					this.map.pan(-this.DELTA_PX, 0, true);
					break;
				default : 
			  }
					
			}
			
			public function onZoom(event:StateChangeEvent):void
			{
				switch(event.newState)
				{
					case "zoomin":
						this.map.moveTo(this.map.center, this.map.zoom - 1, false, true);
						break;
					case "zoomout":
						this.map.moveTo(this.map.center, this.map.zoom + 1, false, true);
						break;
					default : 
				}
				
			}
			
			private function initializeZoomLevels(event:Event = null):void {
				zoomSlider.maximum = map.baseLayer.maxZoomLevel;
				zoomSlider.minimum = map.baseLayer.minZoomLevel;
				zoomSlider.value = map.zoom;
				zoomSlider.addEventListener(SliderEvent.CHANGE,this.zoomSliderChange);
			}
			
			override public function set active(value:Boolean):void {
				if(value) {					
					map.addEventListener(LayerEvent.BASE_LAYER_CHANGED, this.initializeZoomLevels);
					map.addEventListener(MapEvent.MOVE_END, this.updateZoomLevels);
					initializeZoomLevels();								
				} else {
					map.removeEventListener(LayerEvent.BASE_LAYER_CHANGED, this.initializeZoomLevels);
					map.removeEventListener(MapEvent.MOVE_END, this.updateZoomLevels);
				}
				super.active = value;
			}
			
			private function updateZoomLevels(e:MapEvent = null):void {
				if(e.zoomChanged)
					zoomSlider.value = map.zoom;
			}
			

			public function zoomSliderChange(event:Event):void {
				this.map.moveTo(this.map.center, zoomSlider.value, false, true);
			}
			
			override public function destroy():void {
				this.active = false;
				super.destroy();
			}

		
			
		]]>
	</fx:Script>
	
	<s:VSlider id="zoomSlider" x="54" y="10"
			   snapInterval="1"
			   useHandCursor="true"
			   buttonMode="true"
			   liveDragging="false"
			   skinClass="org.openscales.fx.control.skin.ZoomSkin"
			   focusEnabled="false" />
	
	<s:SkinnableContainer id="panSkin"
						  skinClass="org.openscales.fx.control.skin.PanSkin"
						  useHandCursor="true"
						  buttonMode="true">
	</s:SkinnableContainer>
 	
</Control>
