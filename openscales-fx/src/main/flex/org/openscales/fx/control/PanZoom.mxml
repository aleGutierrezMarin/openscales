<?xml version="1.0" encoding="utf-8"?>
<control:Control xmlns:fx="http://ns.adobe.com/mxml/2009" 
				 xmlns:s="library://ns.adobe.com/flex/spark" 
				 xmlns:mx="library://ns.adobe.com/flex/mx" xmlns:control="org.openscales.fx.control.*" width="400" height="300"
				 initialize="configure()"
				 >
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	
	<fx:Script>
		<![CDATA[
			import mx.events.SliderEvent;
			import mx.events.StateChangeEvent;
			
			import org.openscales.core.Map;
			import org.openscales.core.events.LayerEvent;
			import org.openscales.core.events.MapEvent;
			import org.openscales.fx.skin.PanZoomSkin;
			import org.openscales.fx.skin.ZoomSkin;
			
			public var DELTA_PX:Number = 100;
			
			override public function set map(value:Map):void {
				super.map = value;
				//zoom.map = value;
			}
			public function  configure():void{ 
				
				this.panZoomSkin.skin.addEventListener(StateChangeEvent.CURRENT_STATE_CHANGE,this.moveMap);
			}
			
			public function moveMap(event:StateChangeEvent):void
			{
			  switch(event.newState)
			  {
				case "south" :
					this.map.pan(0, this.DELTA_PX, true);
					break;
				case "east" :
					this.map.pan(this.DELTA_PX, 0, true);
					break;
				case "north" :
					this.map.pan(0, -this.DELTA_PX, true);		
					break;
				case "west":
					this.map.pan(-this.DELTA_PX, 0, true);
					break;
				case "zoomin":
					this.map.moveTo(this.map.center, this.map.zoom - 1, false, true);
				case "zoomout":
					this.map.moveTo(this.map.center, this.map.zoom + 1, false, true);
					break;
				default : 
			  }
					
			}
			
			private function initializeZoomLevels(event:Event = null):void {
				zoomSlider.maximum = map.baseLayer.maxZoomLevel;
				zoomSlider.minimum = map.baseLayer.minZoomLevel;
				zoomSlider.value = map.zoom;
				zoomSlider.addEventListener(SliderEvent.CHANGE,this.zoomSliderChange);
			}
			
			override public function set active(value:Boolean):void {
				if(value) {					
					map.addEventListener(LayerEvent.BASE_LAYER_CHANGED, this.initializeZoomLevels);
					map.addEventListener(MapEvent.MOVE_END, this.updateZoomLevels);
					initializeZoomLevels();								
				} else {
					map.removeEventListener(LayerEvent.BASE_LAYER_CHANGED, this.initializeZoomLevels);
					map.removeEventListener(MapEvent.MOVE_END, this.updateZoomLevels);
				}
				super.active = value;
			}
			
			private function updateZoomLevels(e:MapEvent = null):void {
				if(e.zoomChanged)
					zoomSlider.value = map.zoom;
			}
			
			public function onZoomSliderThumbPress():void {
				zoomSlider.removeEventListener(SliderEvent.CHANGE,this.zoomSliderChange);
				zoomSlider.addEventListener(SliderEvent.THUMB_RELEASE,this.onZoomSliderThumbRelease);
			}
			
			public function zoomSliderChange(event:Event):void {
				this.map.moveTo(this.map.center, zoomSlider.value, false, true);
			}
			
			public function onZoomSliderThumbRelease(e:Event):void {
				this.map.moveTo(this.map.center, zoomSlider.value, false, true);
				zoomSlider.addEventListener(SliderEvent.CHANGE,this.zoomSliderChange);
			}
		
			
		]]>
	</fx:Script>
	

	<s:SkinnableContainer id="panZoomSkin"
		skinClass="org.openscales.fx.skin.PanZoomSkin">
	</s:SkinnableContainer>
	
	<s:VSlider id="zoomSlider" x="54" y="10"
			   snapInterval="1"
			   useHandCursor="true"
			   buttonMode="true"
			   thumbPress="onZoomSliderThumbPress()"
			   skinClass="org.openscales.fx.skin.ZoomSkin" />
 	
</control:Control>
