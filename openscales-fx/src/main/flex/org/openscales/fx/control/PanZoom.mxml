<?xml version="1.0" encoding="utf-8"?>
<!--- Old PanZoom control, you should use brand new PanZoom Flex control instead -->
<Control xmlns="http://openscales.org" 
		 xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx"
		 width="400" height="300" initialize="configure()">
	
	<fx:Script>
		<![CDATA[
			import mx.events.SliderEvent;
			import mx.events.SliderEventClickTarget;
			import mx.events.StateChangeEvent;
			
			import org.openscales.core.Map;
			import org.openscales.core.control.ZoomData;
			import org.openscales.core.events.LayerEvent;
			import org.openscales.core.events.MapEvent;
			import org.openscales.fx.control.skin.PanSkin;
			import org.openscales.fx.control.skin.ZoomSkin;
			
			public var DELTA_PX:Number = 100;
			
			
			/**
			 * @private
			 * The list of labels for the different resolution.
			 * @default null
			 */
			private var _scalesLabels:Vector.<ZoomData> = null;
			
			/**
			 * @private
			 * The current value of the zoom label
			 * @default null
			 */
			private var _currentLabel:String = null;


			override public function set map(value:Map):void {
				super.map = value;
			}
			
			/**
			 * Configure the listener for the pan and the zoom
			 * Configure the list of zoom label once the component is created 
			 * and set the first zoomLabel text value.
			 */
			public function  configure():void{ 
				
				this.panSkin.skin.addEventListener(StateChangeEvent.CURRENT_STATE_CHANGE,this.onPan);
				this.zoomSlider.skin.addEventListener(StateChangeEvent.CURRENT_STATE_CHANGE,this.onZoom);
				
				_scalesLabels = new Vector.<ZoomData>();
				/*
				_scalesLabels.push(new ZoomData("World", 0.0439453125, 0.087890625)); // 5- 4
				_scalesLabels.push(new ZoomData("Country", 0.00274658203125, 0.01098328125)); // 9 - 7
*/
			}
			
			/**
			 * Refresh the current zoom label.
			 * Get the current map resolution and search the associated label.
			 * Then refresh the display of the label value.
			 */
			public function updateCurrentLabel():void
			{
				if(this._map!=null)
				{
					trace("** zoom : "+this._map.zoom+" res : "+this._map.resolution)
					
					// update the value
					this._currentLabel = this.getLabelFromResolution(this._map.resolution);
					
					// update the display
					zoomLabel.text = this._map.zoom+" - "+this._currentLabel;
				}
			}
			
			/**
			 * Return the label associated to the given resolution 
			 * 
			 * @param resolution The resolution 
			 * @return The string value of the label corresponding to the resolution
			 */
			public function getLabelFromResolution(resolution:Number):String
			{
				var label:String = new String("");
				var i:uint = 0;
				var j:uint = this._scalesLabels.length;
				for (; i<j; ++i) 
				{
					if( resolution>=this._scalesLabels[i].minResolution
						&& resolution<=this._scalesLabels[i].maxResolution )
					{
						label = this._scalesLabels[i].label;
					}
				}
				return label;
			}
			
			public function onPan(event:StateChangeEvent):void
			{
			  switch(event.newState)
			  {
				case "south" :
					this.map.pan(0, this.DELTA_PX, true);
					break;
				case "east" :
					this.map.pan(this.DELTA_PX, 0, true);
					break;
				case "north" :
					this.map.pan(0, -this.DELTA_PX, true);		
					break;
				case "west":
					this.map.pan(-this.DELTA_PX, 0, true);
					break;
				default : 
			  }
					
			}
			
			public function onZoom(event:StateChangeEvent):void
			{
				switch(event.newState)
				{
					case "zoomin":
						this.map.moveTo(this.map.center, this.map.zoom - 1, false, true);
						break;
					case "zoomout":
						this.map.moveTo(this.map.center, this.map.zoom + 1, false, true);
						break;
					default : 
				}	
			}
			
			private function initializeZoomLevels(event:Event = null):void {
				zoomSlider.maximum = map.baseLayer.maxZoomLevel;
				zoomSlider.minimum = map.baseLayer.minZoomLevel;
				zoomSlider.value = map.zoom;
				// initialise the label value
				this.updateCurrentLabel();
				zoomSlider.addEventListener(SliderEvent.CHANGE,this.zoomSliderChange);
			}
			
			override public function set active(value:Boolean):void {
				if(value) {					
					map.addEventListener(LayerEvent.BASE_LAYER_CHANGED, this.initializeZoomLevels);
					map.addEventListener(MapEvent.MOVE_END, this.updateZoomLevels);
					initializeZoomLevels();								
				} else {
					map.removeEventListener(LayerEvent.BASE_LAYER_CHANGED, this.initializeZoomLevels);
					map.removeEventListener(MapEvent.MOVE_END, this.updateZoomLevels);
				}
				super.active = value;
			}
			
			private function updateZoomLevels(e:MapEvent = null):void {
				if(e.zoomChanged)
				{
					zoomSlider.value = map.zoom;
					this.updateCurrentLabel();
				}
			}
			

			public function zoomSliderChange(event:Event):void {
				this.map.moveTo(this.map.center, zoomSlider.value, false, true);
			}
			
			override public function destroy():void {
				this.active = false;
				super.destroy();
			}
			
			/**
			 * The list of labels for the different resolution.
			 */
			public function set scalesLabels(labels:String):void
			{
				var zoomDataString:String = null;
				var scalesLabel:Vector.<ZoomData> = new Vector.<ZoomData>();
				
				for each (zoomDataString in labels.split(";")) {
					
					var values:Array = zoomDataString.split(",");
					var zoomdata:ZoomData = new ZoomData(values[0], values[1], values[2]);
					
					scalesLabel.push(zoomdata);
				}
				this._scalesLabels = scalesLabel;
			}
			

			/**
			 * The current value of the zoom label
			 */
			public function get currentLabel():String
			{
				return _currentLabel;
			}
			
			/**
			 * @private
			 */
			public function set currentLabel(value:String):void
			{
				_currentLabel = value;
			}
			
		
			
		]]>
	</fx:Script>

	<mx:HBox width="100%" x="70" y="10">
		<mx:Label id="zoomLabel" />
	</mx:HBox>

	<s:VSlider id="zoomSlider" x="54" y="10"
			   snapInterval="1"
			   useHandCursor="true"
			   buttonMode="true"
			   liveDragging="false"
			   skinClass="org.openscales.fx.control.skin.ZoomSkin"
			   focusEnabled="false"
			   showDataTip="true" />
	
	<s:SkinnableContainer id="panSkin"
						  skinClass="org.openscales.fx.control.skin.PanSkin"
						  useHandCursor="true"
						  buttonMode="true">
	</s:SkinnableContainer>
	
	
 	
</Control>
