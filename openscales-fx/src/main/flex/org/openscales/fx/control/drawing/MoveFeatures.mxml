<?xml version="1.0" encoding="utf-8"?>
<os:IconButton xmlns:fx="http://ns.adobe.com/mxml/2009"
			   xmlns:s="library://ns.adobe.com/flex/spark"
			   xmlns:mx="library://ns.adobe.com/flex/mx"
			   xmlns:os="org.openscales.fx.control.*"
			   implements="org.openscales.core.control.IControl"
			   toolTip="Move features"
			   icon="{_btnMove}"
			   width="25"
			   height="25"
			   click="onClick()"
			   enabled="{active}">
	
	<fx:Script>
		<![CDATA[
			import org.openscales.core.Map;
			import org.openscales.core.control.IControl;
			import org.openscales.core.events.DrawingEvent;
			import org.openscales.core.events.FeatureEvent;
			import org.openscales.core.events.I18NEvent;
			import org.openscales.core.feature.Feature;
			import org.openscales.core.feature.PointFeature;
			import org.openscales.core.handler.IHandler;
			import org.openscales.core.handler.feature.DragFeatureHandler;
			import org.openscales.core.layer.VectorLayer;
			import org.openscales.fx.control.layer.LayerManager;
			import org.openscales.geometry.Point;
			import org.openscales.geometry.basetypes.Location;
			import org.openscales.geometry.basetypes.Pixel;
			
			[Bindable]
			[Embed(source="/assets/images/icons/Icons-10.png")]
			private var _btnMove:Class;
			private var _active:Boolean = true;
			private var _handler:DragFeatureHandler = new DragFeatureHandler();
			private var _isClick:Boolean = false;
			
			/**
			 * Flag for activating and deactivating the component
			 * @default true;
			 */
			[Bindable]
			public function get active():Boolean{
				
				return _active;
			}
			public function set active(value:Boolean):void{
				
				_active = value;
				if(! _active){
					_handler.active = false;
				}
			}
			
			/**
			 * Map controled by this control
			 */
			public function get map():Map{
				
				return _handler.map;
			}
			public function set map(value:Map):void{
				
				_handler.map = value;
				_handler.map.addEventListener(DrawingEvent.DRAW_HANDLER_ACTIVATED, onChangeActiveHandler);
				_handler.map.addEventListener(DrawingEvent.EDIT_HANDLER_ACTIVATED, onChangeActiveHandler);
				_handler.map.addEventListener(DrawingEvent.MOVE_HANDLER_ACTIVATED, onChangeActiveHandler);
				_handler.map.addEventListener(DrawingEvent.SELECT_HANDLER_ACTIVATED, onChangeActiveHandler);
				_handler.map.addEventListener(DrawingEvent.CHANGE_ACTIVE_LAYER, onChangeActiveLayer);
				_handler.drawingEventSensitive = false;
			}
			
			/**
			 * Position (x,y) of the handler
			 */
			public function get position():Pixel{
				
				return new Pixel(x,y);
			}
			public function set position(value:Pixel):void{
				
				if(value){
					x = value.x;
					y = value.y;
				}
			}
			
			/**
			 * Layer the features will be moved
			 */
			public function get target():VectorLayer{
				
				return _handler.layerToMove;
			}
			public function set target(value:VectorLayer):void{
				
				_handler.layerToMove = value;
			}
			
			/**
			 * To activate or disactivate the handler
			 */
			private function activate():void{
				
				_handler.active = true;
			}
			private function disactivate():void{
				
				_handler.active = false;
			}
			
			/**
			 * On button click, dispatch a DrawingEvent.MOVE_HANDLER_ACTIVATED event
			 */
			private function onClick():void{
				
				if(!this.target)
					return;
				this._isClick = true;
				var evt:DrawingEvent = new DrawingEvent(DrawingEvent.MOVE_HANDLER_ACTIVATED);
				evt.activeHandler = this.id;
				evt.layer = this.target;
				_handler.map.dispatchEvent(evt);
				activate();
			}
			
			/**
			 * Check the handler when a DrawingEvent.DRAW_HANDLER_ACTIVATED or
			 * DrawingEvent.EDIT_HANDLER_ACTIVATED or DrawingEvent.MOVE_HANDLER_ACTIVATED
			 * or DrawingEvent.SELECT_HANDLER_ACTIVATED event occured
			 */
			private function onChangeActiveHandler(evt:DrawingEvent):void{
				
				if(this._handler.active && !this._isClick)
					disactivate();
				else
					this._isClick = false;
			}
			
			private function onChangeActiveLayer(evt:DrawingEvent):void{
				
				if(this.parentDocument is DrawingToolbar)
				{
					if(this._handler.active)
						disactivate();
					
					this.target = evt.layer;
				}
			}
			
			// to do
			public function onMapLanguageChange(event:I18NEvent):void{}
			public function draw():void{
				
				this.invalidateDisplayList();
			}
			public function destroy():void{}
		]]>
	</fx:Script>			
</os:IconButton>
