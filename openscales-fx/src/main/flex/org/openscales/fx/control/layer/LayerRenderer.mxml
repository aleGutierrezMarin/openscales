<?xml version="1.0" encoding="utf-8"?>
<!--- LayerManager item renderer, design to render a layer in the LayerManager list -->
<s:ItemRenderer xmlns="http://openscales.org"
				xmlns:mx="library://ns.adobe.com/flex/mx"
				xmlns:s="library://ns.adobe.com/flex/spark"
				xmlns:fx="http://ns.adobe.com/mxml/2009"
				xmlns:d="http://ns.adobe.com/fxg/2008/dt" 
				width="100%"
				height="25"
				xmlns:fxg="assets.fxg.*"
		  		autoDrawBackground="false"
				creationComplete="configure()">
	
	<fx:Script>
		<![CDATA[
			import assets.fxg.ButtonOpacity;
			import assets.fxg.DownArrowDown;
			import assets.fxg.DownArrowOver;
			import assets.fxg.DownArrowUp;
			import assets.fxg.LayerItemOver;
			import assets.fxg.LayerItemUp;
			
			import mx.accessibility.ButtonAccImpl;
			import mx.binding.utils.BindingUtils;
			import mx.binding.utils.ChangeWatcher;
			import mx.core.ButtonAsset;
			import mx.core.IVisualElement;
			import mx.events.DragEvent;
			import mx.events.FlexEvent;
			import mx.events.PropertyChangeEvent;
			import mx.events.ScrollEvent;
			import mx.events.SliderEvent;
			import mx.skins.halo.ButtonSkin;
			
			import org.openscales.core.Map;
			import org.openscales.core.Trace;
			import org.openscales.core.events.LayerEvent;
			import org.openscales.core.events.LayerManagerEvent;
			import org.openscales.core.layer.Layer;
			import org.openscales.core.layer.ogc.WFS;
			import org.openscales.fx.control.FeatureDrawing;
			import org.openscales.fx.control.layer.LayerManager;
			import org.openscales.geometry.basetypes.Bounds;
			
			import spark.components.Button;
			import spark.components.CheckBox;
			import spark.components.Label;
			import spark.components.List;
			import spark.components.RadioButton;
			import spark.components.RadioButtonGroup;
			import spark.components.VSlider;
			import spark.core.SpriteVisualElement;
			
			
			[Bindable]
			[Embed(source="/assets/images/widgetHide.png")]
			private var _btnMinimize:Class;
			
			[Bindable]
			[Embed(source="/assets/images/widgetShow.png")]
			private var _btnMaximize:Class;
			
			/**
			 * The layer associated with the current item
			 */
			private var _layer:Layer;
			
			/**
			 * @private
			 * To know if the current LayerRenderer display a minimize or maximize item
			 * @default true
			 */
			private var _isMinimized:Boolean = true;
		
			
			/**
			 * @private
			 * The default Group for drawing tools. Only added if the layer associated is a drawing one
			 * @default null
			 */
			private var _drawGroup:Group = null;
			
			/**
			 * @private
			 * The default drawing components
			 * @default null
			 */
			private var _drawTools:FeatureDrawing = null;
			
			/**
			 * Use the rendererOptions in the LayerManager to set the current optional controls
			 * Get the owner of this rendrer (the List and get its parent to get the LayerManager)
			 */
			public function configure():void
			{
				var list:List = (this.owner as List);
				
				var layerManager:LayerManager = (list.parent.parent as LayerManager);
				
				// check if some options have to be displayed :
				if( layerManager.rendererOptions.hasOwnProperty("displayLegend") && (layerManager.rendererOptions["displayLegend"] == true) )
				{
					layerControlLegend.visible = true;
				}
				
				if( layerManager.rendererOptions.hasOwnProperty("displayZoomToExtent") && (layerManager.rendererOptions["displayZoomToExtent"] == true) )
				{
					layerControlZoomToExtent.visible = true;
				}
				if( layerManager.rendererOptions.hasOwnProperty("displayMetadatas") && (layerManager.rendererOptions["displayMetadatas"] == true) )
				{
					layerControlMetadatas.visible = true;
				}
				
				// if drawing layer add the drawing tools :
				/*
				this._drawGroup = new Group();
				this._drawGroup.id = "layerSwitcherDrawTools";
				
				
				this._drawTools = new FeatureDrawing();
				this._drawGroup.addElement(this._drawTools);
				
				layerSwitcherMainGroup.addElementAt(this._drawGroup, 1);
				*/
			}
			
			/**
			 * Get the layer that the List into the LayerManager.mxml send to display it
			 * @return return the layer
			 */
			private function get layer():Layer 
			{
				return this._layer;
			}
			
			
			/**
			 * Give the current layer to the LayerManager Control which are on this renderer
			 */
			public function setLayerToControls():void
			{
				var i:uint = 0;
				var j:uint = 0;
				var sizeElement:uint = layerSwitcherMainGroup.numElements;
				
				var element:IVisualElement = null;
				var subElement:IVisualElement = null;
				
				// Check elements in the Group
				for(i=0; i<sizeElement; i++) {
					element = layerSwitcherMainGroup.getElementAt(i);
					
					if (element is Group) {
						
						var group:Group = (element as Group)
						var sizeSubElement:uint = group.numElements;
						
						for(j=0; j<sizeSubElement; j++) {
							subElement = group.getElementAt(j);
							
							if (subElement is LayerControl) {
								(subElement as LayerControl).layer = this._layer;
							} 
						}
					}
				}
			}
			

			
			
			public function inOutRange(event:LayerEvent):void 
			{
				var component:IVisualElement = displayControl.getElementAt(0);
				if(component is CheckBox)
				{
					if(event.type == LayerEvent.LAYER_OUT_RANGE)
					{     
						(component as CheckBox).enabled = false;
					}
					else
					{
						(component as CheckBox).enabled = true;
						event.layer.visible = (component as CheckBox).selected; 
					}
				}
			}
			/**
			 * Set the data
			 *
			 * @param value
			 */
			override public function set data(value:Object):void 
			{
				this._layer = value as Layer;
				
				if((this.layer != null) )
				{
					if(this._layer.map!=null){
						this._layer.map.addEventListener(LayerEvent.LAYER_IN_RANGE,inOutRange);
						this._layer.map.addEventListener(LayerEvent.LAYER_OUT_RANGE,inOutRange);
						this._layer.map.addEventListener(LayerEvent.BASE_LAYER_CHANGED,baseLayerChanged);
					}
		
					layerSwitcherLabel.text = this.layer.name;
					this.baseLayerChanged();
					
					// setting the layer to the sub LayerManager Control component :
					this.setLayerToControls();
					
				}
			}
			
			/**
			 * Update extent when BaseLayer changed
			 */
			private function changeBaseLayer(event:MouseEvent):void 
			{
				layer.map.baseLayer = this._layer;
				layer.map.moveTo(layer.map.center);
			}
			
			/**
			 * Update the display of base layer (bold) on baseLayerChanged
			 */
			private function baseLayerChanged(event:LayerEvent=null):void 
			{
				if(!_layer)
					return;
				
				if(_layer.isBaseLayer) {
					layerSwitcherLabel.setStyle("fontWeight", "bold");
					layerSwitcherDeleteLayer.deleteButton.visible = false;
				} else {
					layerSwitcherLabel.setStyle("fontWeight", "normal");
					layerSwitcherDeleteLayer.deleteButton.visible = true;
				}
			}
			
			/**
			 * Reduce or maximize the current LayerManager
			 */
			public function reduceMaximizeLayerSwitcher(event:Event):void 
			{
			
				this._isMinimized = !this._isMinimized;

				layerSwitcherOptionnalDisplay.visible = !this._isMinimized;
				layerSwitcherAdditionnalDisplay.visible = !this._isMinimized;
				
				var groupSize:uint = layerSwitcherOptionnalDisplay.height + layerSwitcherAdditionnalDisplay.height;
				
				if(!this._isMinimized)
				{
					this.height += groupSize;
					//layerSwitcherReduceMaximize.icon = _btnMinimize;
				}
					
				
				else
				{
					this.height -= groupSize; 
					//layerSwitcherReduceMaximize.icon = _btnMaximize;
				}
					

			}
			
			
			
		]]>
	</fx:Script>
	
	<s:VGroup id="layerSwitcherMainGroup" >
		<s:HGroup width="100%"
				  id="hgroup"
				  paddingLeft="2"
				  paddingBottom="2"
				  paddingRight="4"
				  paddingTop="2"
				  verticalAlign="middle">
			
			<ChangeLayerVisibility />
			
			<s:Label id="layerSwitcherLabel" width="100"/>
			
			
			<ChangeLayerPosition  />
			
			
			<IconButton id="layerSwitcherReduceMaximize"
						width="16"
						height="16"
						click="reduceMaximizeLayerSwitcher(event)"
						icon="{_btnMaximize}" />
			<DeleteLayer id="layerSwitcherDeleteLayer" />
			
			<s:Group id="displayControl" />	

		</s:HGroup>

		
		<s:Group id="layerSwitcherAdditionnalDisplay" visible="false">
			<ChangeLayerOpacity id="layerControlOpacity" />
		</s:Group>
		
		<s:Group id="layerSwitcherOptionnalDisplay" visible="false">
			<LayerZoomToExtent id="layerControlZoomToExtent" visible="false" />
			<LayerLegend x="20" id="layerControlLegend" visible="false" />
			<LayerMetadatas x="40" id="layerControlMetadatas" visible="false" />
		</s:Group>
		
		
		
		
	</s:VGroup>
	
	
</s:ItemRenderer>
