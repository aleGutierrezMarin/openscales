<?xml version="1.0" encoding="utf-8"?>
<!--- LayerManager item renderer, design to render a layer in the LayerManager list -->
<s:ItemRenderer xmlns="http://openscales.org"
				xmlns:mx="library://ns.adobe.com/flex/mx"
				xmlns:s="library://ns.adobe.com/flex/spark"
				xmlns:fx="http://ns.adobe.com/mxml/2009"
				xmlns:d="http://ns.adobe.com/fxg/2008/dt" 
				width="100%"
				height="25"
				xmlns:fxg="assets.fxg.*"
		  		autoDrawBackground="false">
	
	<fx:Script>
		<![CDATA[
			import assets.fxg.ButtonCloseOver;
			import assets.fxg.ButtonCloseUp;
			import assets.fxg.ButtonOpacity;
			import assets.fxg.DownArrowDown;
			import assets.fxg.DownArrowOver;
			import assets.fxg.DownArrowUp;
			import assets.fxg.LayerItemOver;
			import assets.fxg.LayerItemUp;
			import assets.fxg.UpArrowDown;
			import assets.fxg.UpArrowOver;
			import assets.fxg.UpArrowUp;
			
			import mx.accessibility.ButtonAccImpl;
			import mx.binding.utils.BindingUtils;
			import mx.binding.utils.ChangeWatcher;
			import mx.core.ButtonAsset;
			import mx.core.IVisualElement;
			import mx.events.DragEvent;
			import mx.events.FlexEvent;
			import mx.events.PropertyChangeEvent;
			import mx.events.ScrollEvent;
			import mx.events.SliderEvent;
			import mx.skins.halo.ButtonSkin;
			
			import org.openscales.geometry.basetypes.Bounds;
			import org.openscales.core.Map;
			import org.openscales.core.Trace;
			import org.openscales.core.events.LayerEvent;
			import org.openscales.core.events.LayerManagerEvent;
			import org.openscales.core.layer.Layer;
			import org.openscales.core.layer.ogc.WFS;
			
			import spark.components.Button;
			import spark.components.CheckBox;
			import spark.components.Label;
			import spark.components.List;
			import spark.components.RadioButton;
			import spark.components.RadioButtonGroup;
			import spark.components.VSlider;
			import spark.core.SpriteVisualElement;
			
			private var labelLayer:Label;
			private var _layer:Layer;
			
			
			
			
			[Bindable]
			private var _opacity:String;
			
			/**
			 * Get the layer that the List into the LayerManager.mxml send to display it
			 *
			 * @return return the layer
			 */
			private function get layer():Layer {
				return this._layer;
			}
			
			/**
			 * Change the layer visibility
			 *
			 * @param event Change event
			 */
			public function layerVisible(event:MouseEvent):void{
				layer.visible = !layer.visible;
				// If the layer was uncheck from the beggining, he hadn't load yet so we need
				// to redraw it to load it.
				if(layer.visible){
					layer.redraw();
				}
			} 
			
			
			/**
			 * Delete the layer on the map
			 *
			 * @param event Click event
			 */
			public function deleteLayer(event:MouseEvent):void {
				_layer.map.removeLayer(_layer);
			}
			
			
			public function inOutRange(event:LayerEvent):void {
				var component:IVisualElement = displayControl.getElementAt(0);
				if(component is CheckBox)
				{
					if(event.type == LayerEvent.LAYER_OUT_RANGE)
					{     
						(component as CheckBox).enabled = false;
					}
					else
					{
						(component as CheckBox).enabled = true;
						event.layer.visible = (component as CheckBox).selected; 
					}
				}
			}
			/**
			 * Set the data
			 *
			 * @param value
			 */
			override public function set data(value:Object):void {
				
				_layer = value as Layer;
				
				if((this.layer != null) && (displayControl != null))
				{
					if(_layer.map!=null){
						_layer.map.addEventListener(LayerEvent.LAYER_IN_RANGE,inOutRange);
						_layer.map.addEventListener(LayerEvent.LAYER_OUT_RANGE,inOutRange);
						_layer.map.addEventListener(LayerEvent.BASE_LAYER_CHANGED,baseLayerChanged);
					}
					displayControl.removeAllElements();
					_opacity = Math.floor(this.layer.alpha*100) + "%";
					labelLayer = new Label();
					labelLayer.text = this.layer.name;
					labelLayer.percentWidth = 100;
					this.baseLayerChanged();
					displayControl.addElement(labelLayer);		
					
					if(this.parent != null){
						var overlayArray:Array=(LayerManager.layerManager).layerList.dataProvider.toArray();
						
						if(overlayArray.length<=1) {
							ArrowUp.enabled = false;
							ArrowDown.enabled = false;
							
						}
						else {
							// the layer is on the bottom of the list, we hide the arrowDown
							
							if(overlayArray.indexOf(this.layer) == 0){
								ArrowUp.enabled = false;
								ArrowDown.enabled = true;
							}
								// the layer is on the to of the list, we hide the arrowUp
							else if(overlayArray.indexOf(this.layer)==overlayArray.length-1){
								ArrowUp.enabled = true;
								ArrowDown.enabled = false;
							}
								// the layer is in the middle, you can up or down it
							else{
								ArrowUp.enabled = true;
								ArrowDown.enabled = true;
							}           	
						}
					}
					
				}
				
			}
			
			/**
			 * Center the map on the layer
			 *
			 * @param event Click event
			 */
			private function setLayerExtent(event:MouseEvent):void
			{
				var bounds:Bounds = _layer.maxExtent;
				if (bounds != null) {
					_layer.map.zoomToExtent(bounds);
				}
			}
			
			private function changeBaseLayer(event:MouseEvent):void {
				layer.map.baseLayer = this._layer;
				layer.map.moveTo(layer.map.center);
			}
			
			private function baseLayerChanged(event:LayerEvent=null):void {
				if(!_layer)
					return;
				
				if(_layer.isBaseLayer) {
					labelLayer.setStyle("fontWeight", "bold");
					deleteButton.visible = false;
				} else {
					labelLayer.setStyle("fontWeight", "normal");
					deleteButton.visible = true;
				}
			}
			
			public function upLayer(event:MouseEvent):void {
				_layer.map.changeLayerIndexByStep(_layer,+1);
			}
			public function downLayer(event:MouseEvent):void {
				_layer.map.changeLayerIndexByStep(_layer,-1);
			}
			
			public function manageOpacity(event:Event):void {
				var layerManagerEvent:LayerManagerEvent = new LayerManagerEvent(LayerManagerEvent.COMPONENT_OPACITY);
				layerManagerEvent.layer = _layer;
				layerManagerEvent.x = (event.target as IconButton).x + (event.target as IconButton).width/2;
				layerManagerEvent.y = this.y + 10;
				if(layer&&layer.map)
					layer.map.dispatchEvent(layerManagerEvent);
			}
			
		]]>
	</fx:Script>
	
	
	<s:HGroup width="100%"
			  id="hgroup"
			  paddingLeft="2"
			  paddingBottom="2"
			  paddingRight="4"
			  paddingTop="2"
			  verticalAlign="middle">
		
		<!-- TODO : radio button not editable for now because there is some issue when you change baseLayer -->
		<!-- <s:RadioButton id="isBaseLayer"
		click="changeBaseLayer(event)"
		enabled="false"/>-->
		
		<s:VGroup verticalAlign="middle" gap="0">
			<IconButton id="ArrowUp"
						toolTip="Déplacer vers l'avant plan"
						click="upLayer(event)"
						icon="{new UpArrowUp()}"
						iconOver="{new UpArrowOver()}"
						iconDown="{new UpArrowDown()}"
						width="10"
						height="10"
						/>

			<IconButton id="ArrowDown"
						toolTip="Déplacer vers l'arrière plan"
						click="downLayer(event)"
						icon="{new DownArrowUp()}"
						iconOver="{new DownArrowOver()}"
						iconDown="{new DownArrowDown()}"
						width="10"
						height="10"
						/>
		</s:VGroup>
		<IconButton id="opacityButton"
					width="16"
					height="16"
					toolTip="Régler l'opacité"
					click="manageOpacity(event)"
					icon="{new ButtonOpacity()}"
					iconOver="{new ButtonOpacity()}"
					iconDown="{new ButtonOpacity()}"/>
		
		<s:Group id="displayControl" width="100%"/>
		<IconButton id="deleteButton"
					toolTip="Supprimer la couche"
					click="deleteLayer(event)"
					icon="{new ButtonCloseUp()}"
					iconOver="{new ButtonCloseOver()}"
					iconDown="{new ButtonCloseOver()}"
					width="14"
					height="14"/>
		
		
	</s:HGroup>
</s:ItemRenderer>
