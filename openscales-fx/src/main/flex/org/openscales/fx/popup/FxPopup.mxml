<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx"
		 xmlns:openscales="http://openscales.org"
		 xmlns:d="http://ns.adobe.com/fxg/2008/dt"
		 creationComplete="create()">
	<fx:Declarations>
		<!-- Placer ici les éléments non visuels (services et objets de valeur, par exemple). -->
	</fx:Declarations>
	
	<fx:Script>
		<![CDATA[
			import assets.fxg.ButtonCloseOver;
			import assets.fxg.ButtonCloseUp;
			import assets.fxg.Popup;
			
			import flashx.textLayout.conversion.TextConverter;
			import flashx.textLayout.elements.SpanElement;
			import flashx.textLayout.elements.TextFlow;
			
			import mx.effects.effectClasses.AddChildActionInstance;
			
			import org.openscales.core.feature.Feature;
			import org.openscales.fx.FxMap;
			import org.openscales.geometry.basetypes.Bounds;
			import org.openscales.geometry.basetypes.Location;
			import org.openscales.geometry.basetypes.Pixel;
			import org.openscales.geometry.basetypes.Size;
			
			import spark.utils.TextFlowUtil;
			
			private var _feature:Feature = null;
			private var _loc:Location = null;
			private var _fxmap:FxMap;
			private var _content:String="";
			private var _size:Size = null;
			private var _relativePosition:String = "";
			
			public var WIDTH:Number = 200;
			public var HEIGHT:Number = 200;
			static public var BR:String = "br";
			static public var TR:String = "tr";
			static public var TL:String = "tl";
			static public var BL:String = "bl";
			
			private var _anchor:Sprite = null;
			
			
			private function create():void{
				
				if ((this.loc != null) && (this.fxmap.map != null)) {
					var px:Pixel = this.fxmap.map.getMapPxFromLocation(this.feature.lonlat);
					this.relativePosition = this.calculateRelativePosition(px);
				}
				this.position = px;
				this.setCurrentState(relativePosition,false);
				if (size != null){
					this._size = size;
				}
				else{
					this.size = new Size(WIDTH,HEIGHT);
				}
				this.fxmap.addFxPopup(this,true);
				
			}
			
			
			public function remove():void {
				this.visible=false;
				var i:uint = this.numElements;
				for (;i>0;--i) {
					this.removeElementAt(0);
				}
				this.feature = null;
				this.loc = null;
				if (this.fxmap != null) {
					this.fxmap.removeFxPopup(this);
				}
			}
			
			public function calculateRelativePosition(px:Pixel):String {
				var lonlat:Location = this.fxmap.map.getLocationFromMapPx(px);
				
				var extent:Bounds = this.fxmap.map.extent;
				var quadrant:String = extent.determineQuadrant(lonlat);
				
				return Bounds.oppositeQuadrant(quadrant);
			}
			
			public function get relativePosition():String {
				return this._relativePosition;
			}
			
			public function set relativePosition(value:String):void {
				this._relativePosition = value;
				this.setCurrentState(_relativePosition,false);
			}
			
			public function get loc():Location {
				return this._loc;
			}
			
			public function set loc(value:Location):void {
				this._loc = value;
			}
			
			public function get feature():Feature {
				return this._feature;
			}
			
			public function set feature(value:Feature):void {
				this._feature = value;
				
				if(!this.feature)
					return;
				
				this.loc = this.feature.lonlat;
				
			}
			
			public function calculateNewPx(px:Pixel):Pixel {
				var newPx:Pixel = px;
				
				if(this.relativePosition == BR){
					newPx.x = newPx.x - 45;
					newPx.y = newPx.y + 48;
				}
				else if (this.relativePosition == BL){
					newPx.x = newPx.x - this.width + 45;
					newPx.y = newPx.y + 48;
				}
				else if (this.relativePosition == TR){
					newPx.x = newPx.x - 45; 
					newPx.y = newPx.y - this.height - 48;
				}
				else if (this.relativePosition == TL){
					newPx.x = newPx.x - this.width + 45;
					newPx.y = newPx.y - this.height - 48;
				}
				
				/*
				var top:Boolean = (this.relativePosition == TR || this.relativePosition == TL);
				if(top){
				newPx.y -= (this.height + this.height/2);
				}
				var left:Boolean = (this.relativePosition == BL || this.relativePosition == TL);
				if(left){
				newPx.x -= this.width;
				}*/
				
				return newPx;
			}
			
			public function set position(px:Pixel):void {
				var newPx:Pixel = this.calculateNewPx(px);
				if (newPx != null) {
					this.x = newPx.x;
					this.y = newPx.y;
				}
			}
			
			public function get position():Pixel {
				return new Pixel(this.x, this.y);
			}
			
			public function get content():String{
				return this._content;
			}
			
			public function set content(value:String):void {
				this._content = value;
			}
			
			public function get fxmap():FxMap {
				return this._fxmap;
				
			}
			
			public function set fxmap(value:FxMap):void {
				this._fxmap = value;
			}
			
			public function get size():Size {
				return this._size;
				
			}
			
			public function set size(size:Size):void {
				if (size != null) {
					this._size = size;
					this.width = this.size.w;
					this.height = this.size.h;
				}
			}
			
			public function closePopup(event:MouseEvent):void {
				var target:Sprite = (event.target as Sprite);
				target.removeEventListener(event.type, closePopup);
				remove();
				event.stopPropagation();
			}
			
		]]>
	</fx:Script>
	
	<s:states>
		<s:State name="tr"/>
		<s:State name="tl"/>
		<s:State name="br"/>
		<s:State name="bl"/>
	</s:states>
	
	<s:TextArea id="textAreaTR"
				includeIn="tr"
				horizontalScrollPolicy="auto"
				verticalScrollPolicy="auto"
				textFlow="{TextConverter.importToFlow(this._content,TextConverter.TEXT_FIELD_HTML_FORMAT)}"
				width="{WIDTH}"
				height="{HEIGHT}"
				skinClass="org.openscales.fx.popup.skin.PopupSkinTR"
				editable="false"/>
	<s:TextArea id="textAreaTL"
				includeIn="tl"
				horizontalScrollPolicy="auto"
				verticalScrollPolicy="auto"
				textFlow="{TextConverter.importToFlow(this._content,TextConverter.TEXT_FIELD_HTML_FORMAT)}"
				width="{WIDTH}"
				height="{HEIGHT}"
				skinClass="org.openscales.fx.popup.skin.PopupSkinTL"
				editable="false"/>
	<s:TextArea id="textAreaBR"
				includeIn="br"
				horizontalScrollPolicy="auto"
				verticalScrollPolicy="auto"
				textFlow="{TextConverter.importToFlow(this._content,TextConverter.TEXT_FIELD_HTML_FORMAT)}"
				width="{WIDTH}"
				height="{HEIGHT}"
				skinClass="org.openscales.fx.popup.skin.PopupSkinBR"
				editable="true"/>
	<s:TextArea id="textAreaBL"
				includeIn="bl"
				horizontalScrollPolicy="auto"
				verticalScrollPolicy="auto"
				textFlow="{TextConverter.importToFlow(this._content,TextConverter.TEXT_FIELD_HTML_FORMAT)}"
				width="{WIDTH}"
				height="{HEIGHT}"
				skinClass="org.openscales.fx.popup.skin.PopupSkinBL"
				editable="true"/>
	<openscales:IconButton id="close"
						   x="{WIDTH-17}"
						   y="3"
						   icon="{new ButtonCloseUp()}"
						   iconOver="{new ButtonCloseOver()}"
						   iconDown="{new ButtonCloseOver()}"
						   alpha="1"
						   click="closePopup(event)"/>
	
	
</s:Group>
