<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx"
		 xmlns:openscales="http://openscales.org"
		 xmlns:d="http://ns.adobe.com/fxg/2008/dt"
		 creationComplete="create()">
	<fx:Declarations>
		<!-- Placer ici les éléments non visuels (services et objets de valeur, par exemple). -->
	</fx:Declarations>
	
	<fx:Script>
		<![CDATA[
			import assets.fxg.ButtonCloseOver;
			import assets.fxg.ButtonCloseUp;
			import assets.fxg.ButtonOpacity;
			import assets.fxg.Popup;
			
			import flashx.textLayout.conversion.TextConverter;
			import flashx.textLayout.elements.SpanElement;
			import flashx.textLayout.elements.TextFlow;
			
			import mx.containers.HBox;
			import mx.containers.VBox;
			import mx.controls.Alert;
			import mx.controls.Text;
			import mx.effects.effectClasses.AddChildActionInstance;
			import mx.skins.halo.HaloBorder;
			
			import org.openscales.core.feature.Feature;
			import org.openscales.fx.FxMap;
			import org.openscales.geometry.basetypes.Bounds;
			import org.openscales.geometry.basetypes.Location;
			import org.openscales.geometry.basetypes.Pixel;
			import org.openscales.geometry.basetypes.Size;
			
			import spark.components.Label;
			import spark.components.TextArea;
			import spark.components.TextInput;
			import spark.utils.TextFlowUtil;
			
			private var _feature:Feature = null;
			private var _loc:Location = null;
			private var _fxmap:FxMap;
			private var _content:String="";
			private var _size:Size = null;
			private var _relativePosition:String = "";
			
			public var WIDTH:Number = 200;
			public var HEIGHT:Number = 200;
			static public var BR:String = "br";
			static public var TR:String = "tr";
			static public var TL:String = "tl";
			static public var BL:String = "bl";
			
			private var _anchor:Sprite = null;
			private var _title:String = "";
			
			private function create():void{
				
				if ((this.loc != null) && (this.fxmap.map != null)) {
					var px:Pixel = this.fxmap.map.getMapPxFromLocation(this.feature.lonlat);
					this.relativePosition = this.calculateRelativePosition(px);
				}
				this.position = px;
				this.setCurrentState(relativePosition,false);
				if (size != null){
					this._size = size;
				}
				else{
					this.size = new Size(WIDTH,HEIGHT);
					//GAB
					this.edit.y = (this.size.h-20);
					this.save.y = (this.size.h-20);
					this.show.y = (this.size.h-20);
				}
				this.fxmap.addFxPopup(this,true);
				this.setViewMode();
				
			}
			
			
			public function remove():void {
				this.visible=false;
				var i:uint = this.numElements;
				for (;i>0;--i) {
					this.removeElementAt(0);
				}
				this.feature = null;
				this.loc = null;
				if (this.fxmap != null) {
					this.fxmap.removeFxPopup(this);
				}
			}
			
			public function calculateRelativePosition(px:Pixel):String {
				var lonlat:Location = this.fxmap.map.getLocationFromMapPx(px);
				
				var extent:Bounds = this.fxmap.map.extent;
				var quadrant:String = extent.determineQuadrant(lonlat);
				
				return Bounds.oppositeQuadrant(quadrant);
			}
			
			public function get relativePosition():String {
				return this._relativePosition;
			}
			
			public function set relativePosition(value:String):void {
				this._relativePosition = value;
				this.setCurrentState(_relativePosition,false);
			}
			
			public function get loc():Location {
				return this._loc;
			}
			
			public function set loc(value:Location):void {
				this._loc = value;
			}
			
			public function get feature():Feature {
				return this._feature;
			}
			
			public function set feature(value:Feature):void {
				this._feature = value;
				
				if(!this.feature)
					return;
				
				this.loc = this.feature.lonlat;
				
			}
			
			public function calculateNewPx(px:Pixel):Pixel {
				var newPx:Pixel = px;
				
				if(this.relativePosition == BR){
					newPx.x = newPx.x - 45;
					newPx.y = newPx.y + 48;
				}
				else if (this.relativePosition == BL){
					newPx.x = newPx.x - this.width + 45;
					newPx.y = newPx.y + 48;
				}
				else if (this.relativePosition == TR){
					newPx.x = newPx.x - 45; 
					newPx.y = newPx.y - this.height - 48;
				}
				else if (this.relativePosition == TL){
					newPx.x = newPx.x - this.width + 45;
					newPx.y = newPx.y - this.height - 48;
				}
				
				/*
				var top:Boolean = (this.relativePosition == TR || this.relativePosition == TL);
				if(top){
				newPx.y -= (this.height + this.height/2);
				}
				var left:Boolean = (this.relativePosition == BL || this.relativePosition == TL);
				if(left){
				newPx.x -= this.width;
				}*/
				
				return newPx;
			}
			
			public function set position(px:Pixel):void {
				var newPx:Pixel = this.calculateNewPx(px);
				if (newPx != null) {
					this.x = newPx.x;
					this.y = newPx.y;
				}
			}
			
			public function get position():Pixel {
				return new Pixel(this.x, this.y);
			}
			
			public function get content():String{
				return this._content;
			}
			
			public function set content(value:String):void {
				this._content = value;
				//GAB
				//this.setViewMode();
				//this.setEditMode();
				//End GAB
			}
			
			public function get fxmap():FxMap {
				return this._fxmap;
				
			}
			
			public function set fxmap(value:FxMap):void {
				this._fxmap = value;
			}
			
			public function get size():Size {
				return this._size;
				
			}
			
			public function set size(size:Size):void {
				if (size != null) {
					this._size = size;
					this.width = this.size.w;
					this.height = this.size.h;
				}
			}
			
			public function set title(_value:String):void{
				this._title = _value;
			}
			
			public function get title():String{
				return this._title;
			}
			
			public function closePopup(event:MouseEvent):void {
				var target:Sprite = (event.target as Sprite);
				target.removeEventListener(event.type, closePopup);
				remove();
				event.stopPropagation();
			}
			//Test GAB
			private function editPopup(event:MouseEvent):void{
				this.setEditMode();
			}
			
			private function setViewMode():void{
				/**
				 * The aim is to have a single TextArea within the FxPop.
				 * In this TextArea, we shall display the content (HTML format).
				 * 
				 * This must be done for each one of the 4 quadrant.
				 * */
				
				this.setViewModeQuadrant("TR");
				this.setViewModeQuadrant("TL");
				this.setViewModeQuadrant("BR");
				this.setViewModeQuadrant("BL");
				
			}
			
			private function setViewModeQuadrant(_quadrant:String):void{
				/**
				 * Given a quadrant, insert a TextArea to the quadrant's panel.
				 * Fill the TextArea's textFlow with the content of FxPopup.
				 * The TextArea must not be editable by the user. 
				 * */
				var _panel:Panel;
				var _tAreaID:String;
				if (_quadrant == "TR"){
					_panel = this.panelTR;
					_tAreaID = "textAreaTR";
				}
				else if (_quadrant == "TL"){
					_panel = this.panelTL;
					_tAreaID = "textAreaTL";
				}
				else if (_quadrant == "BR"){
					_panel = this.panelBR;
					_tAreaID = "textAreaBR";
				}
				else if (_quadrant == "BL"){
					_panel = this.panelBL;
					_tAreaID = "textAreaBL";
				}
				if (_panel == null)
					_panel = new Panel();
				
				_panel.title = this._title;
				//Before inserting the unique TextArea, empty the Panel.
				_panel.removeAllElements();
				
				var _tArea:TextArea = new TextArea();
				_tArea.id = _tAreaID;
				_tArea.textFlow=TextConverter.importToFlow(this._content,TextConverter.TEXT_FIELD_HTML_FORMAT);
				_tArea.percentWidth=100;
				_tArea.percentHeight = 100;
				_tArea.editable=false;
				if (_panel == null)
					_panel = new Panel();
				_panel.addElement(_tArea);
				_panel.height = HEIGHT;
				_panel.width = WIDTH;
			}
			
			private function setEditMode():void{
				/**
				 * Place the content of the FwPop. 
				 * Unlick the view mode, in the edit mode we must insert fields and not one single
				 * TextArea.
				 * */
				this.setEditModeQuadrant("TR");
				this.setEditModeQuadrant("TL");
				this.setEditModeQuadrant("BR");
				this.setEditModeQuadrant("BL");
				
			}
			
			private function setEditModeQuadrant(_quadrant:String):void{
				var _panel:Panel;
				if (_quadrant == "TR"){
					_panel = this.panelTR;
				}
				else if (_quadrant == "TL"){
					_panel = this.panelTL;
				}
				else if (_quadrant == "BR"){
					_panel = this.panelBR;
				}
				else if (_quadrant == "BL"){
					_panel = this.panelBL;
				}
				if (_panel == null)
					_panel = new Panel();
				
				_panel.title = this._title;
				//The first thing to do it to empty the panel
				_panel.removeAllElements();
				var _array:Array = this._content.split("<br />");
				var _vBox:VBox = new VBox();
				for (var i:int=0; i<_array.length; i++){
					var _subArray:Array = (_array[i] as String).split(":");
					if (_subArray.length == 2){
						var _fieldName:String = _subArray[0];
						var _fieldValue:String = _subArray[1];
						
						_fieldName = _fieldName.replace("<b>","");
						_fieldName = _fieldName.replace("</b>","");
						
						var _hBox:HBox = this.getEditionItem(_fieldName, _fieldValue);
						_vBox.addElement(_hBox);	
					}
				}
				_panel.addElement(_vBox);
				
			}
			
			private function getEditionItem(_label:String, _value:String=null):HBox{
				var _hBox:HBox = new HBox();
				var _textInput:TextInput = new TextInput();
				var _text:Text = new Text();
				
				_text.text = _label;
				_textInput.percentWidth = 100;
				_hBox.percentWidth = 95;
				if (_value)
					_textInput.text = _value;
				
				_hBox.addChild(_text);
				_hBox.addChild(_textInput);
				
				return _hBox;
			}
			
			private function displayPopup(event:MouseEvent):void{
				this.setViewMode();
			}
			private function savePopup(event:MouseEvent):void{
				var _panel:Panel;
				if(this.relativePosition == BR){
					_panel = this.panelBR;
				}
				else if (this.relativePosition == BL){
					_panel = this.panelBL;
				}
				else if (this.relativePosition == TR){
					_panel = this.panelTR;
				}
				else if (this.relativePosition == TL){
					_panel = this.panelTL;
				}
				if (_panel.numElements == 1){
					//This only element of a Panel is a VBox
					var obj:Object = _panel.getElementAt(0);
					var _vBox:VBox = (_panel.getElementAt(0) as VBox);
					//A VBox can have 0-many elements, each element is a HBox object.
					
					for (var i:int=0; i<_vBox.numElements; i++){
						var _hBox:HBox = (_vBox.getElementAt(i) as HBox);
						
						//A HBox is composed of one Text (index=0) and one TextInput (index=1)
						if (_hBox.numElements == 2){
							var _text:Text = (_hBox.getElementAt(0) as Text);
							var _textInput:TextInput = (_hBox.getElementAt(1) as TextInput);
							
							var _fieldName:String = _text.text;
							var _value:String = _textInput.text;
							
							Alert.show("New value of " + _fieldName + " is " + _value);
						}
					}
					
					
				}

				 
			}
			//Fin Test GAB
			
		]]>
	</fx:Script>
	
	<s:states>
		<s:State name="tr"/>
		<s:State name="tl"/>
		<s:State name="br"/>
		<s:State name="bl"/>
	</s:states>
	
	<!--
	<s:TextArea id="textAreaTR"
				includeIn="tr"
				horizontalScrollPolicy="auto"
				verticalScrollPolicy="auto"
				textFlow="{TextConverter.importToFlow(this._content,TextConverter.TEXT_FIELD_HTML_FORMAT)}"
				width="{WIDTH}"
				height="{HEIGHT}"
				skinClass="org.openscales.fx.popup.skin.PopupSkinTR"
				editable="false"/>
	<s:TextArea id="textAreaTL"
				includeIn="tl"
				horizontalScrollPolicy="auto"
				verticalScrollPolicy="auto"
				textFlow="{TextConverter.importToFlow(this._content,TextConverter.TEXT_FIELD_HTML_FORMAT)}"
				width="{WIDTH}"
				height="{HEIGHT}"
				skinClass="org.openscales.fx.popup.skin.PopupSkinTL"
				editable="false"/>
	<s:TextArea id="textAreaBR"
				includeIn="br"
				horizontalScrollPolicy="auto"
				verticalScrollPolicy="auto"
				textFlow="{TextConverter.importToFlow(this._content,TextConverter.TEXT_FIELD_HTML_FORMAT)}"
				width="{WIDTH}"
				height="{HEIGHT}"
				skinClass="org.openscales.fx.popup.skin.PopupSkinBR"
				editable="false"/>
	<s:TextArea id="textAreaBL"
				includeIn="bl"
				horizontalScrollPolicy="auto"
				verticalScrollPolicy="auto"
				textFlow="{TextConverter.importToFlow(this._content,TextConverter.TEXT_FIELD_HTML_FORMAT)}"
				width="{WIDTH}"
				height="{HEIGHT}"
				skinClass="org.openscales.fx.popup.skin.PopupSkinBL"
				editable="false"/>
	-->
	<openscales:IconButton id="close"
						   x="{WIDTH-17}"
						   y="3"
						   icon="{new ButtonCloseUp()}"
						   iconOver="{new ButtonCloseOver()}"
						   iconDown="{new ButtonCloseOver()}"
						   alpha="1"
						   click="closePopup(event)"/>
	<!-- Test GAB -->
	
	<s:Panel id="panelTR"
			 includeIn="tr"
			 width="{WIDTH}"
			 height="{HEIGHT}" 
			/>
	
	<s:Panel id="panelTL"
			 includeIn="tl"
			 width="{WIDTH}"
			 height="{HEIGHT}"
			 skinClass="org.openscales.fx.popup.skin.PopupSkinTL"
	         />
	<s:Panel id="panelBR"
			 includeIn="br"
			 width="{WIDTH}"
			 height="{HEIGHT}"
			 />
	<s:Panel id="panelBL"
			 includeIn="bl"
			 width="{WIDTH}"
			 height="{HEIGHT}"
			 />
	<openscales:IconButton id="show"
						   x="{WIDTH-27}"
						   y="{0}"
						   icon="{new ButtonOpacity()}"
						   iconOver="{new ButtonCloseOver()}"
						   iconDown="{new ButtonCloseOver()}"
						   toolTip="Display"
						   click="displayPopup(event)"
						   />
	<openscales:IconButton id="edit"
						   x="{WIDTH-57}"
						   y="{0}"
						   icon="{new ButtonOpacity()}"
						   iconOver="{new ButtonCloseOver()}"
						   iconDown="{new ButtonCloseOver()}"
						   toolTip="Edit"
						   click="editPopup(event)"
						   />
	<openscales:IconButton id="save"
						   x="{WIDTH-77}"
						   y="{0}"
						   icon="{new ButtonOpacity()}"
						   iconOver="{new ButtonCloseOver()}"
						   iconDown="{new ButtonCloseOver()}"
						   toolTip="Save"
						   click="savePopup(event)"
						   />
	<!-- Fin test GAB -->
	
	
</s:Group>
